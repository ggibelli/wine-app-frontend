[{"/Users/giovanni/programming/wine-app-frontend/src/index.tsx":"1","/Users/giovanni/programming/wine-app-frontend/src/reportWebVitals.ts":"2","/Users/giovanni/programming/wine-app-frontend/src/cache.ts":"3","/Users/giovanni/programming/wine-app-frontend/src/App.tsx":"4","/Users/giovanni/programming/wine-app-frontend/src/generated/graphql.tsx":"5","/Users/giovanni/programming/wine-app-frontend/src/pages/index.tsx":"6","/Users/giovanni/programming/wine-app-frontend/src/pages/Ads.tsx":"7","/Users/giovanni/programming/wine-app-frontend/src/pages/Profile.tsx":"8","/Users/giovanni/programming/wine-app-frontend/src/pages/Ad.tsx":"9","/Users/giovanni/programming/wine-app-frontend/src/pages/Signup.tsx":"10","/Users/giovanni/programming/wine-app-frontend/src/components/PageContainer.tsx":"11","/Users/giovanni/programming/wine-app-frontend/src/components/Notification.tsx":"12","/Users/giovanni/programming/wine-app-frontend/src/components/UserForm/index.tsx":"13","/Users/giovanni/programming/wine-app-frontend/src/components/UserForm/data.ts":"14","/Users/giovanni/programming/wine-app-frontend/src/utils/pivaValidator.ts":"15","/Users/giovanni/programming/wine-app-frontend/src/utils/passwordValidator.ts":"16","/Users/giovanni/programming/wine-app-frontend/src/utils/phoneNumberValidator.ts":"17","/Users/giovanni/programming/wine-app-frontend/src/utils/formHelper.ts":"18","/Users/giovanni/programming/wine-app-frontend/src/pages/Home.tsx":"19","/Users/giovanni/programming/wine-app-frontend/src/pages/Buy.tsx":"20","/Users/giovanni/programming/wine-app-frontend/src/components/WineForms/Search/WineFormQuery.tsx":"21","/Users/giovanni/programming/wine-app-frontend/src/components/Navigation/LogoutButton.tsx":"22","/Users/giovanni/programming/wine-app-frontend/src/components/Navigation/index.tsx":"23","/Users/giovanni/programming/wine-app-frontend/src/components/Navigation/AppBar.tsx":"24","/Users/giovanni/programming/wine-app-frontend/src/components/Navigation/Drawer.tsx":"25","/Users/giovanni/programming/wine-app-frontend/src/components/LoginModal/LoginForm.tsx":"26","/Users/giovanni/programming/wine-app-frontend/src/components/FormFields/PasswordField.tsx":"27","/Users/giovanni/programming/wine-app-frontend/src/components/FormFields/TextField.tsx":"28","/Users/giovanni/programming/wine-app-frontend/src/components/LoginModal/index.tsx":"29","/Users/giovanni/programming/wine-app-frontend/src/components/FormFields/SliderField.tsx":"30","/Users/giovanni/programming/wine-app-frontend/src/components/FormFields/ComboboxField.tsx":"31","/Users/giovanni/programming/wine-app-frontend/src/components/FormFields/ComboboxProvince.tsx":"32","/Users/giovanni/programming/wine-app-frontend/src/components/FormFields/ComboboxComuni.tsx":"33","/Users/giovanni/programming/wine-app-frontend/src/components/FormFields/ComboboxFieldWines.tsx":"34","/Users/giovanni/programming/wine-app-frontend/src/components/FormFields/TextFieldAdornment.tsx":"35","/Users/giovanni/programming/wine-app-frontend/src/pages/Results.tsx":"36","/Users/giovanni/programming/wine-app-frontend/src/components/WineForms/Post/WineFormMutation.tsx":"37","/Users/giovanni/programming/wine-app-frontend/src/components/FormFields/SelectField.tsx":"38","/Users/giovanni/programming/wine-app-frontend/src/components/AddressForm/index.tsx":"39"},{"size":2239,"mtime":1611877820525,"results":"40","hashOfConfig":"41"},{"size":454,"mtime":1608694468631,"results":"42","hashOfConfig":"41"},{"size":1283,"mtime":1611877820525,"results":"43","hashOfConfig":"41"},{"size":630,"mtime":1611644760051,"results":"44","hashOfConfig":"41"},{"size":39542,"mtime":1611978823063,"results":"45","hashOfConfig":"41"},{"size":1130,"mtime":1611735416317,"results":"46","hashOfConfig":"41"},{"size":817,"mtime":1608955028589,"results":"47","hashOfConfig":"41"},{"size":825,"mtime":1608955028589,"results":"48","hashOfConfig":"41"},{"size":814,"mtime":1608955028589,"results":"49","hashOfConfig":"41"},{"size":1524,"mtime":1611550319684,"results":"50","hashOfConfig":"41"},{"size":281,"mtime":1611450128148,"results":"51","hashOfConfig":"41"},{"size":1179,"mtime":1611465732871,"results":"52","hashOfConfig":"41"},{"size":7242,"mtime":1611893264854,"results":"53","hashOfConfig":"41"},{"size":1311,"mtime":1611031218673,"results":"54","hashOfConfig":"41"},{"size":429,"mtime":1611032464869,"results":"55","hashOfConfig":"41"},{"size":506,"mtime":1610946072446,"results":"56","hashOfConfig":"41"},{"size":236,"mtime":1610947451436,"results":"57","hashOfConfig":"41"},{"size":515072,"mtime":1611203004002,"results":"58","hashOfConfig":"41"},{"size":159,"mtime":1611449527814,"results":"59","hashOfConfig":"41"},{"size":3928,"mtime":1611985537633,"results":"60","hashOfConfig":"41"},{"size":5625,"mtime":1611889772202,"results":"61","hashOfConfig":"41"},{"size":1191,"mtime":1611450128263,"results":"62","hashOfConfig":"41"},{"size":138,"mtime":1611450547893,"results":"63","hashOfConfig":"41"},{"size":3722,"mtime":1611466196962,"results":"64","hashOfConfig":"41"},{"size":2421,"mtime":1611551408813,"results":"65","hashOfConfig":"41"},{"size":3458,"mtime":1611644899925,"results":"66","hashOfConfig":"41"},{"size":1684,"mtime":1611631984020,"results":"67","hashOfConfig":"41"},{"size":889,"mtime":1611893264793,"results":"68","hashOfConfig":"41"},{"size":954,"mtime":1611644899924,"results":"69","hashOfConfig":"41"},{"size":758,"mtime":1611550692043,"results":"70","hashOfConfig":"41"},{"size":1223,"mtime":1611634756172,"results":"71","hashOfConfig":"41"},{"size":1720,"mtime":1611634756157,"results":"72","hashOfConfig":"41"},{"size":1731,"mtime":1611634756158,"results":"73","hashOfConfig":"41"},{"size":1875,"mtime":1611890518556,"results":"74","hashOfConfig":"41"},{"size":1054,"mtime":1611633090936,"results":"75","hashOfConfig":"41"},{"size":1693,"mtime":1611889520780,"results":"76","hashOfConfig":"41"},{"size":8215,"mtime":1611980457196,"results":"77","hashOfConfig":"41"},{"size":999,"mtime":1611889645349,"results":"78","hashOfConfig":"41"},{"size":1818,"mtime":1611979808283,"results":"79","hashOfConfig":"41"},{"filePath":"80","messages":"81","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"82"},"1hdo000",{"filePath":"83","messages":"84","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"85","usedDeprecatedRules":"82"},{"filePath":"86","messages":"87","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"82"},{"filePath":"88","messages":"89","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"82"},{"filePath":"90","messages":"91","errorCount":0,"warningCount":16,"fixableErrorCount":0,"fixableWarningCount":0,"source":"92","usedDeprecatedRules":"82"},{"filePath":"93","messages":"94","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"82"},{"filePath":"95","messages":"96","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"97"},{"filePath":"98","messages":"99","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"97"},{"filePath":"100","messages":"101","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"97"},{"filePath":"102","messages":"103","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"82"},{"filePath":"104","messages":"105","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"82"},{"filePath":"106","messages":"107","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"82"},{"filePath":"108","messages":"109","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"82"},{"filePath":"110","messages":"111","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"82"},{"filePath":"112","messages":"113","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"82"},{"filePath":"114","messages":"115","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"82"},{"filePath":"116","messages":"117","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"82"},{"filePath":"118","messages":"119","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"82"},{"filePath":"120","messages":"121","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"122"},{"filePath":"123","messages":"124","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"125","messages":"126","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"82"},{"filePath":"127","messages":"128","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"82"},{"filePath":"129","messages":"130","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"82"},{"filePath":"131","messages":"132","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"82"},{"filePath":"133","messages":"134","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"82"},{"filePath":"135","messages":"136","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"82"},{"filePath":"137","messages":"138","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"82"},{"filePath":"139","messages":"140","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"82"},{"filePath":"141","messages":"142","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"82"},{"filePath":"143","messages":"144","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"82"},{"filePath":"145","messages":"146","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"82"},{"filePath":"147","messages":"148","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"82"},{"filePath":"149","messages":"150","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"82"},{"filePath":"151","messages":"152","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"82"},{"filePath":"153","messages":"154","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"82"},{"filePath":"155","messages":"156","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"82"},{"filePath":"157","messages":"158","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"82"},{"filePath":"159","messages":"160","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"82"},{"filePath":"161","messages":"162","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"/Users/giovanni/programming/wine-app-frontend/src/index.tsx",[],[],"/Users/giovanni/programming/wine-app-frontend/src/reportWebVitals.ts",["163"],"import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    void import('web-vitals').then(\n      ({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n        getCLS(onPerfEntry);\n        getFID(onPerfEntry);\n        getFCP(onPerfEntry);\n        getLCP(onPerfEntry);\n        getTTFB(onPerfEntry);\n      }\n    );\n  }\n};\n\nexport default reportWebVitals;\n","/Users/giovanni/programming/wine-app-frontend/src/cache.ts",[],"/Users/giovanni/programming/wine-app-frontend/src/App.tsx",[],"/Users/giovanni/programming/wine-app-frontend/src/generated/graphql.tsx",["164","165","166","167","168","169","170","171","172","173","174","175","176","177","178","179"],"import { gql } from '@apollo/client';\nimport * as Apollo from '@apollo/client';\nexport type Maybe<T> = T | null;\nexport type Exact<T extends { [key: string]: unknown }> = {\n  [K in keyof T]: T[K];\n};\nexport type MakeOptional<T, K extends keyof T> = Omit<T, K> &\n  { [SubKey in K]?: Maybe<T[SubKey]> };\nexport type MakeMaybe<T, K extends keyof T> = Omit<T, K> &\n  { [SubKey in K]: Maybe<T[SubKey]> };\n/** All built-in and custom scalars, mapped to their actual values */\nexport type Scalars = {\n  ID: string;\n  String: string;\n  Boolean: boolean;\n  Int: number;\n  Float: number;\n  Date: any;\n};\n\nexport type Address = {\n  __typename?: 'Address';\n  via: Scalars['String'];\n  CAP: Scalars['String'];\n  comune: Scalars['String'];\n  provincia: Province;\n  regione: Regioni;\n};\n\nexport type AddressInput = {\n  via: Scalars['String'];\n  CAP: Scalars['String'];\n  comune: Scalars['String'];\n  provincia: Province;\n  regione: Regioni;\n};\n\nexport type AdInput = {\n  typeAd: TypeAd;\n  typeProduct: TypeProduct;\n  content: Scalars['String'];\n  address: AddressInput;\n  harvest: Scalars['Int'];\n  abv: Scalars['Float'];\n  wine?: Maybe<Scalars['ID']>;\n  wineName?: Maybe<Scalars['String']>;\n  vineyard?: Maybe<Scalars['ID']>;\n  vineyardName?: Maybe<Scalars['String']>;\n  sottoZona?: Maybe<Scalars['String']>;\n  menzione?: Maybe<Menzione>;\n  metodoProduttivo?: Maybe<MetodoProduttivo>;\n  priceFrom: Scalars['Float'];\n  priceTo: Scalars['Float'];\n  litersFrom?: Maybe<Scalars['Int']>;\n  litersTo?: Maybe<Scalars['Int']>;\n  kgFrom?: Maybe<Scalars['Int']>;\n  kgTo?: Maybe<Scalars['Int']>;\n  needsFollowUp?: Maybe<Scalars['Boolean']>;\n};\n\nexport type AdInputUpdate = {\n  _id: Scalars['ID'];\n  wine?: Maybe<Scalars['ID']>;\n  wineName?: Maybe<Scalars['String']>;\n  vineyard?: Maybe<Scalars['ID']>;\n  vineyardName?: Maybe<Scalars['String']>;\n  sottoZona?: Maybe<Scalars['String']>;\n  menzione?: Maybe<Menzione>;\n  metodoProduttivo?: Maybe<MetodoProduttivo>;\n  harvest?: Maybe<Scalars['Int']>;\n  abv?: Maybe<Scalars['Float']>;\n  priceFrom?: Maybe<Scalars['Float']>;\n  priceTo?: Maybe<Scalars['Float']>;\n  litersFrom?: Maybe<Scalars['Int']>;\n  litersTo?: Maybe<Scalars['Int']>;\n  content?: Maybe<Scalars['String']>;\n  address?: Maybe<AddressInput>;\n  isActive?: Maybe<Scalars['Boolean']>;\n  needsFollowUp?: Maybe<Scalars['Boolean']>;\n};\n\nexport type Ad = {\n  _id: Scalars['ID'];\n  postedBy: User;\n  harvest: Scalars['Int'];\n  abv: Scalars['Float'];\n  priceFrom: Scalars['Float'];\n  priceTo: Scalars['Float'];\n  content: Scalars['String'];\n  address: Address;\n  negotiations?: Maybe<Array<Negotiation>>;\n  activeNegotiations?: Maybe<Scalars['Int']>;\n  /** viewedBy: [User] */\n  numberViews?: Maybe<Scalars['Int']>;\n  typeAd: TypeAd;\n  typeProduct: TypeProduct;\n  isActive: Scalars['Boolean'];\n  datePosted?: Maybe<Scalars['String']>;\n  needsFollowUp?: Maybe<Scalars['Boolean']>;\n};\n\nexport type AdDatePostedArgs = {\n  format?: Maybe<Scalars['String']>;\n};\n\nexport type AdWine = Ad & {\n  __typename?: 'AdWine';\n  _id: Scalars['ID'];\n  postedBy: User;\n  wineName: Scalars['String'];\n  wine?: Maybe<Wine>;\n  sottoZona?: Maybe<Scalars['String']>;\n  menzione?: Maybe<Menzione>;\n  metodoProduttivo?: Maybe<MetodoProduttivo>;\n  harvest: Scalars['Int'];\n  abv: Scalars['Float'];\n  priceFrom: Scalars['Float'];\n  priceTo: Scalars['Float'];\n  litersFrom?: Maybe<Scalars['Int']>;\n  litersTo?: Maybe<Scalars['Int']>;\n  content: Scalars['String'];\n  address: Address;\n  negotiations?: Maybe<Array<Negotiation>>;\n  activeNegotiations?: Maybe<Scalars['Int']>;\n  /** viewedBy: [User] */\n  numberViews?: Maybe<Scalars['Int']>;\n  typeAd: TypeAd;\n  typeProduct: TypeProduct;\n  isActive: Scalars['Boolean'];\n  datePosted?: Maybe<Scalars['String']>;\n  needsFollowUp?: Maybe<Scalars['Boolean']>;\n};\n\nexport type AdWineDatePostedArgs = {\n  format?: Maybe<Scalars['String']>;\n};\n\nexport type AdGrape = Ad & {\n  __typename?: 'AdGrape';\n  _id: Scalars['ID'];\n  postedBy: User;\n  vineyardName: Scalars['String'];\n  vineyard?: Maybe<Vineyard>;\n  harvest: Scalars['Int'];\n  abv: Scalars['Float'];\n  priceFrom: Scalars['Float'];\n  priceTo: Scalars['Float'];\n  kgFrom: Scalars['Int'];\n  kgTo: Scalars['Int'];\n  content: Scalars['String'];\n  address: Address;\n  negotiations?: Maybe<Array<Negotiation>>;\n  activeNegotiations?: Maybe<Scalars['Int']>;\n  /** viewedBy: [User] */\n  numberViews?: Maybe<Scalars['Int']>;\n  typeAd: TypeAd;\n  typeProduct: TypeProduct;\n  isActive: Scalars['Boolean'];\n  datePosted?: Maybe<Scalars['String']>;\n  needsFollowUp?: Maybe<Scalars['Boolean']>;\n};\n\nexport type AdGrapeDatePostedArgs = {\n  format?: Maybe<Scalars['String']>;\n};\n\nexport type AdPayload = {\n  __typename?: 'AdPayload';\n  response?: Maybe<Ad>;\n  errors?: Maybe<Array<Maybe<Errors>>>;\n};\n\nexport type Query = {\n  __typename?: 'Query';\n  ad?: Maybe<Ad>;\n  ads?: Maybe<Array<Maybe<Ad>>>;\n  isLoggedIn: Scalars['Boolean'];\n  me?: Maybe<User>;\n  message?: Maybe<Message>;\n  messages?: Maybe<Array<Message>>;\n  messagesForNegotiation?: Maybe<Array<Message>>;\n  messagesToUser?: Maybe<Array<Message>>;\n  negotiation?: Maybe<Negotiation>;\n  negotiations?: Maybe<Array<Negotiation>>;\n  negotiationsForAd?: Maybe<Array<Negotiation>>;\n  negotiationsWithUser?: Maybe<Array<Negotiation>>;\n  notification?: Maybe<Notification>;\n  review?: Maybe<Review>;\n  reviews?: Maybe<Array<Review>>;\n  searchedWine?: Maybe<WineSearched>;\n  user?: Maybe<User>;\n  users?: Maybe<Array<User>>;\n  vineyard?: Maybe<Vineyard>;\n  vineyards?: Maybe<Array<Vineyard>>;\n  wine?: Maybe<Wine>;\n  wines?: Maybe<Array<Wine>>;\n};\n\nexport type QueryAdArgs = {\n  id: Scalars['ID'];\n};\n\nexport type QueryAdsArgs = {\n  typeAd: TypeAd;\n  typeProduct: TypeProduct;\n  wineName?: Maybe<Scalars['String']>;\n  vineyardName?: Maybe<Scalars['String']>;\n  skip?: Maybe<Scalars['Int']>;\n  orderBy?: Maybe<QueryOrderBy>;\n  limit?: Maybe<Scalars['Int']>;\n};\n\nexport type QueryMessageArgs = {\n  id: Scalars['ID'];\n};\n\nexport type QueryMessagesForNegotiationArgs = {\n  negotiation: Scalars['ID'];\n};\n\nexport type QueryMessagesToUserArgs = {\n  sentTo: Scalars['ID'];\n};\n\nexport type QueryNegotiationArgs = {\n  id: Scalars['ID'];\n};\n\nexport type QueryNegotiationsForAdArgs = {\n  ad: Scalars['ID'];\n};\n\nexport type QueryNegotiationsWithUserArgs = {\n  forUserAd: Scalars['ID'];\n};\n\nexport type QueryReviewArgs = {\n  id: Scalars['ID'];\n};\n\nexport type QueryUserArgs = {\n  id: Scalars['ID'];\n};\n\nexport type QueryVineyardArgs = {\n  id: Scalars['ID'];\n};\n\nexport type QueryWineArgs = {\n  id: Scalars['ID'];\n};\n\nexport type Mutation = {\n  __typename?: 'Mutation';\n  createAd?: Maybe<AdPayload>;\n  updateAd?: Maybe<AdPayload>;\n  deleteAd?: Maybe<AdPayload>;\n  createMessage?: Maybe<MessagePayload>;\n  createNegotiation?: Maybe<NegotiationPayload>;\n  updateNegotiation?: Maybe<NegotiationPayload>;\n  deleteNegotiation?: Maybe<NegotiationPayload>;\n  createReview?: Maybe<ReviewPayload>;\n  updateReview?: Maybe<ReviewPayload>;\n  deleteReview?: Maybe<ReviewPayload>;\n  createUser?: Maybe<AuthUserPayload>;\n  updateUser?: Maybe<UserPayload>;\n  deleteUser?: Maybe<UserPayload>;\n  login?: Maybe<AuthUserPayload>;\n  createWine?: Maybe<WinePayload>;\n  updateWine?: Maybe<WinePayload>;\n  deleteWine?: Maybe<WinePayload>;\n  createVineyard?: Maybe<VineyardPayload>;\n  updateVineyard?: Maybe<VineyardPayload>;\n  deleteVineyard?: Maybe<VineyardPayload>;\n};\n\nexport type MutationCreateAdArgs = {\n  input: AdInput;\n};\n\nexport type MutationUpdateAdArgs = {\n  input: AdInputUpdate;\n};\n\nexport type MutationDeleteAdArgs = {\n  id: Scalars['ID'];\n};\n\nexport type MutationCreateMessageArgs = {\n  message: MessageInput;\n};\n\nexport type MutationCreateNegotiationArgs = {\n  negotiation: NegotiationInput;\n};\n\nexport type MutationUpdateNegotiationArgs = {\n  negotiation: NegotiationInputUpdate;\n};\n\nexport type MutationDeleteNegotiationArgs = {\n  id: Scalars['ID'];\n};\n\nexport type MutationCreateReviewArgs = {\n  review: ReviewInput;\n};\n\nexport type MutationUpdateReviewArgs = {\n  review: ReviewInputUpdate;\n};\n\nexport type MutationDeleteReviewArgs = {\n  id: Scalars['ID'];\n};\n\nexport type MutationCreateUserArgs = {\n  user: UserInput;\n};\n\nexport type MutationUpdateUserArgs = {\n  user: UserInputUpdate;\n};\n\nexport type MutationDeleteUserArgs = {\n  id: Scalars['ID'];\n};\n\nexport type MutationLoginArgs = {\n  email: Scalars['String'];\n  password: Scalars['String'];\n};\n\nexport type MutationCreateWineArgs = {\n  wine: WineInput;\n};\n\nexport type MutationUpdateWineArgs = {\n  wine: WineInputUpdate;\n};\n\nexport type MutationDeleteWineArgs = {\n  id: Scalars['ID'];\n};\n\nexport type MutationCreateVineyardArgs = {\n  vineyard: VineyardInput;\n};\n\nexport type MutationUpdateVineyardArgs = {\n  vineyard: VineyardInputUpdate;\n};\n\nexport type MutationDeleteVineyardArgs = {\n  id: Scalars['ID'];\n};\n\nexport type Subscription = {\n  __typename?: 'Subscription';\n  adPostedFollowUp: Ad;\n  adRemoved: Ad;\n  messageSent: Message;\n  negotiationCreated: Negotiation;\n  negotiationClosed: Ad;\n  reviewCreated: Review;\n};\n\nexport type MessageInput = {\n  content: Scalars['String'];\n  sentTo: Scalars['ID'];\n  negotiation: Scalars['ID'];\n};\n\nexport type Message = {\n  __typename?: 'Message';\n  _id: Scalars['ID'];\n  content: Scalars['String'];\n  sentBy: User;\n  sentTo: User;\n  negotiation: Negotiation;\n  dateSent?: Maybe<Scalars['String']>;\n};\n\nexport type MessageDateSentArgs = {\n  format?: Maybe<Scalars['String']>;\n};\n\nexport type MessagePayload = {\n  __typename?: 'MessagePayload';\n  response?: Maybe<Message>;\n  errors?: Maybe<Array<Maybe<Errors>>>;\n};\n\nexport type NegotiationInput = {\n  ad: Scalars['ID'];\n  forUserAd: Scalars['ID'];\n  type: TypeAd;\n};\n\nexport type NegotiationInputUpdate = {\n  _id: Scalars['ID'];\n  isConcluded?: Maybe<Scalars['Boolean']>;\n};\n\nexport type Negotiation = {\n  __typename?: 'Negotiation';\n  _id: Scalars['ID'];\n  createdBy: User;\n  ad: Ad;\n  forUserAd: User;\n  messages?: Maybe<Array<Message>>;\n  isConcluded: Scalars['Boolean'];\n  dateCreated?: Maybe<Scalars['String']>;\n  review?: Maybe<Array<Maybe<Review>>>;\n  type: TypeAd;\n};\n\nexport type NegotiationDateCreatedArgs = {\n  format?: Maybe<Scalars['String']>;\n};\n\nexport type NegotiationPayload = {\n  __typename?: 'NegotiationPayload';\n  response?: Maybe<Negotiation>;\n  errors?: Maybe<Array<Maybe<Errors>>>;\n};\n\nexport type ReviewInput = {\n  negotiation: Scalars['ID'];\n  forUser: Scalars['ID'];\n  rating: Rating;\n  content: Scalars['String'];\n  type: TypeAd;\n};\n\nexport type ReviewInputUpdate = {\n  _id: Scalars['ID'];\n  rating?: Maybe<Rating>;\n  content?: Maybe<Scalars['String']>;\n};\n\nexport type Review = {\n  __typename?: 'Review';\n  _id: Scalars['ID'];\n  createdBy: User;\n  negotiation: Negotiation;\n  forUser: User;\n  rating: Rating;\n  dateCreated?: Maybe<Scalars['String']>;\n  content: Scalars['String'];\n  type: TypeAd;\n};\n\nexport type ReviewDateCreatedArgs = {\n  format?: Maybe<Scalars['String']>;\n};\n\nexport type ReviewPayload = {\n  __typename?: 'ReviewPayload';\n  response?: Maybe<Review>;\n  errors?: Maybe<Array<Maybe<Errors>>>;\n};\n\nexport type ProducedWines = {\n  __typename?: 'ProducedWines';\n  wine: Wine;\n  bottlesProduced: Scalars['Int'];\n  metodoProduttivo: MetodoProduttivo;\n};\n\nexport type OwnedVineyards = {\n  __typename?: 'OwnedVineyards';\n  vineyard: Vineyard;\n  tonsProduced: Scalars['Int'];\n  metodoProduttivo: MetodoProduttivo;\n};\n\nexport type ProducedWinesInput = {\n  wine: Scalars['ID'];\n  bottlesProduced?: Maybe<Scalars['Int']>;\n  metodoProduttivo?: Maybe<MetodoProduttivo>;\n};\n\nexport type OwnedVineyardsInput = {\n  vineyard: Scalars['ID'];\n  tonsProduced?: Maybe<Scalars['Int']>;\n  metodoProduttivo?: Maybe<MetodoProduttivo>;\n};\n\nexport type UserInput = {\n  email: Scalars['String'];\n  password: Scalars['String'];\n  firstName: Scalars['String'];\n  lastName: Scalars['String'];\n  pIva: Scalars['String'];\n  phoneNumber: Scalars['String'];\n  address: AddressInput;\n  hideContact: Scalars['Boolean'];\n  producedWines?: Maybe<ProducedWinesInput>;\n  ownedVineyards?: Maybe<OwnedVineyardsInput>;\n};\n\nexport type UserInputUpdate = {\n  _id: Scalars['ID'];\n  email?: Maybe<Scalars['String']>;\n  password?: Maybe<Scalars['String']>;\n  firstName?: Maybe<Scalars['String']>;\n  lastName?: Maybe<Scalars['String']>;\n  pIva?: Maybe<Scalars['String']>;\n  phoneNumber?: Maybe<Scalars['String']>;\n  address?: Maybe<AddressInput>;\n  isVerified?: Maybe<Scalars['Boolean']>;\n  isPremium?: Maybe<Scalars['Boolean']>;\n  hideContact: Scalars['Boolean'];\n  producedWines?: Maybe<ProducedWinesInput>;\n  ownedVineyards?: Maybe<OwnedVineyardsInput>;\n};\n\nexport type User = {\n  __typename?: 'User';\n  _id: Scalars['ID'];\n  email: Scalars['String'];\n  firstName: Scalars['String'];\n  lastName: Scalars['String'];\n  pIva: Scalars['String'];\n  phoneNumber: Scalars['String'];\n  address: Address;\n  isVerified: Scalars['Boolean'];\n  isPremium?: Maybe<Scalars['Boolean']>;\n  isAdmin: Scalars['Boolean'];\n  hideContact: Scalars['Boolean'];\n  ads?: Maybe<Array<Ad>>;\n  messages?: Maybe<Array<Message>>;\n  negotiations?: Maybe<Array<Negotiation>>;\n  reviews?: Maybe<Array<Review>>;\n  adsRemaining?: Maybe<Scalars['Int']>;\n  dateCreated?: Maybe<Scalars['String']>;\n  producedWines?: Maybe<ProducedWines>;\n  ownedVineyards?: Maybe<OwnedVineyards>;\n};\n\nexport type UserDateCreatedArgs = {\n  format?: Maybe<Scalars['String']>;\n};\n\nexport type AuthUser = {\n  __typename?: 'AuthUser';\n  token: Scalars['String'];\n  user: User;\n};\n\nexport type AuthUserPayload = {\n  __typename?: 'AuthUserPayload';\n  response?: Maybe<AuthUser>;\n  errors?: Maybe<Array<Maybe<Errors>>>;\n};\n\nexport type UserPayload = {\n  __typename?: 'UserPayload';\n  response?: Maybe<User>;\n  errors?: Maybe<Array<Maybe<Errors>>>;\n};\n\nexport type WineInput = {\n  denominazioneVino: Scalars['String'];\n  aka?: Maybe<Scalars['String']>;\n  espressioneComunitaria: EspressioneComunitaria;\n  denominazioneZona: DenomZona;\n  regione: Array<Regioni>;\n};\n\nexport type WineInputUpdate = {\n  _id: Scalars['ID'];\n  denominazioneVino?: Maybe<Scalars['String']>;\n  aka?: Maybe<Scalars['String']>;\n  espressioneComunitaria?: Maybe<EspressioneComunitaria>;\n  denominazioneZona?: Maybe<DenomZona>;\n  regione?: Maybe<Array<Maybe<Regioni>>>;\n};\n\nexport type Wine = {\n  __typename?: 'Wine';\n  _id: Scalars['ID'];\n  denominazioneVino: Scalars['String'];\n  aka?: Maybe<Scalars['String']>;\n  espressioneComunitaria: EspressioneComunitaria;\n  denominazioneZona: DenomZona;\n  regione: Array<Regioni>;\n};\n\nexport type WinePayload = {\n  __typename?: 'WinePayload';\n  response?: Maybe<Wine>;\n  errors?: Maybe<Array<Maybe<Errors>>>;\n};\n\nexport type Vineyard = {\n  __typename?: 'Vineyard';\n  _id: Scalars['ID'];\n  name: Scalars['String'];\n  colore?: Maybe<Colore>;\n};\n\nexport type VineyardInput = {\n  name: Scalars['String'];\n  colore?: Maybe<Colore>;\n};\n\nexport type VineyardInputUpdate = {\n  _id: Scalars['ID'];\n  name?: Maybe<Scalars['String']>;\n  colore?: Maybe<Colore>;\n};\n\nexport type VineyardPayload = {\n  __typename?: 'VineyardPayload';\n  response?: Maybe<Vineyard>;\n  errors?: Maybe<Array<Maybe<Errors>>>;\n};\n\nexport enum Province {\n  AG = 'AG',\n  AL = 'AL',\n  AN = 'AN',\n  AO = 'AO',\n  AP = 'AP',\n  AQ = 'AQ',\n  AR = 'AR',\n  AT = 'AT',\n  AV = 'AV',\n  BA = 'BA',\n  BG = 'BG',\n  BI = 'BI',\n  BL = 'BL',\n  BN = 'BN',\n  BO = 'BO',\n  BR = 'BR',\n  BS = 'BS',\n  BT = 'BT',\n  BZ = 'BZ',\n  CA = 'CA',\n  CB = 'CB',\n  CE = 'CE',\n  CH = 'CH',\n  CL = 'CL',\n  CN = 'CN',\n  CO = 'CO',\n  CR = 'CR',\n  CS = 'CS',\n  CT = 'CT',\n  CZ = 'CZ',\n  EN = 'EN',\n  FC = 'FC',\n  FE = 'FE',\n  FG = 'FG',\n  FI = 'FI',\n  FM = 'FM',\n  FR = 'FR',\n  GE = 'GE',\n  GO = 'GO',\n  GR = 'GR',\n  IM = 'IM',\n  IS = 'IS',\n  KR = 'KR',\n  LC = 'LC',\n  LE = 'LE',\n  LI = 'LI',\n  LO = 'LO',\n  LT = 'LT',\n  LU = 'LU',\n  MB = 'MB',\n  MC = 'MC',\n  ME = 'ME',\n  MI = 'MI',\n  MN = 'MN',\n  MO = 'MO',\n  MS = 'MS',\n  MT = 'MT',\n  NA = 'NA',\n  NO = 'NO',\n  NU = 'NU',\n  OR = 'OR',\n  PA = 'PA',\n  PC = 'PC',\n  PD = 'PD',\n  PE = 'PE',\n  PG = 'PG',\n  PI = 'PI',\n  PN = 'PN',\n  PO = 'PO',\n  PR = 'PR',\n  PT = 'PT',\n  PU = 'PU',\n  PV = 'PV',\n  PZ = 'PZ',\n  RA = 'RA',\n  RC = 'RC',\n  RE = 'RE',\n  RG = 'RG',\n  RI = 'RI',\n  RM = 'RM',\n  RN = 'RN',\n  RO = 'RO',\n  SA = 'SA',\n  SI = 'SI',\n  SO = 'SO',\n  SP = 'SP',\n  SR = 'SR',\n  SS = 'SS',\n  SU = 'SU',\n  SV = 'SV',\n  TA = 'TA',\n  TE = 'TE',\n  TN = 'TN',\n  TO = 'TO',\n  TP = 'TP',\n  TR = 'TR',\n  TS = 'TS',\n  TV = 'TV',\n  UD = 'UD',\n  VA = 'VA',\n  VB = 'VB',\n  VC = 'VC',\n  VE = 'VE',\n  VI = 'VI',\n  VR = 'VR',\n  VT = 'VT',\n  VV = 'VV',\n}\n\nexport enum Regioni {\n  Abruzzo = 'ABRUZZO',\n  Basilicata = 'BASILICATA',\n  Calabria = 'CALABRIA',\n  Campania = 'CAMPANIA',\n  Emilia = 'EMILIA',\n  Friuli = 'FRIULI',\n  Lazio = 'LAZIO',\n  Liguria = 'LIGURIA',\n  Lombardia = 'LOMBARDIA',\n  Marche = 'MARCHE',\n  Molise = 'MOLISE',\n  Piemonte = 'PIEMONTE',\n  Puglia = 'PUGLIA',\n  Sardegna = 'SARDEGNA',\n  Sicilia = 'SICILIA',\n  Toscana = 'TOSCANA',\n  Trentino = 'TRENTINO',\n  Umbria = 'UMBRIA',\n  Valdaosta = 'VALDAOSTA',\n  Veneto = 'VENETO',\n}\n\nexport enum TypeAd {\n  Sell = 'SELL',\n  Buy = 'BUY',\n}\n\nexport enum TypeProduct {\n  AdWine = 'AdWine',\n  AdGrape = 'AdGrape',\n}\n\nexport enum Menzione {\n  Classico = 'CLASSICO',\n  Riserva = 'RISERVA',\n  Superiore = 'SUPERIORE',\n  Vigna = 'VIGNA',\n}\n\nexport enum MetodoProduttivo {\n  Convenzionale = 'CONVENZIONALE',\n  Biologico = 'BIOLOGICO',\n  Biodinamico = 'BIODINAMICO',\n  Naturale = 'NATURALE',\n  Vegano = 'VEGANO',\n}\n\nexport enum Rating {\n  Poor = 'POOR',\n  Average = 'AVERAGE',\n  Ok = 'OK',\n  Good = 'GOOD',\n  Perfect = 'PERFECT',\n}\n\nexport enum Colore {\n  Bianca = 'BIANCA',\n  Rossa = 'ROSSA',\n}\n\nexport enum EspressioneComunitaria {\n  Dop = 'DOP',\n  Igp = 'IGP',\n  Nd = 'ND',\n}\n\nexport enum DenomZona {\n  Doc = 'DOC',\n  Docg = 'DOCG',\n  Igt = 'IGT',\n  Varietale = 'VARIETALE',\n  Vino = 'VINO',\n}\n\nexport enum QueryOrderBy {\n  CreatedAtAsc = 'createdAt_ASC',\n  CreatedAtDesc = 'createdAt_DESC',\n  PriceAsc = 'price_ASC',\n  PriceDesc = 'price_DESC',\n}\n\nexport type Errors = {\n  __typename?: 'Errors';\n  name?: Maybe<Scalars['String']>;\n  text?: Maybe<Scalars['String']>;\n};\n\nexport enum AlertStatus {\n  Success = 'success',\n  Warning = 'warning',\n  Info = 'info',\n  Error = 'error',\n}\n\nexport type WineSearched = {\n  __typename?: 'WineSearched';\n  typeAd?: Maybe<TypeAd>;\n  typeProduct?: Maybe<TypeProduct>;\n  wineName?: Maybe<Scalars['String']>;\n  harvest?: Maybe<Scalars['Int']>;\n  abv?: Maybe<Scalars['Float']>;\n  price?: Maybe<Scalars['Float']>;\n  liters?: Maybe<Scalars['Int']>;\n  isPost?: Maybe<Scalars['Boolean']>;\n};\n\nexport type Notification = {\n  __typename?: 'Notification';\n  type?: AlertStatus;\n  message?: Maybe<Scalars['String']>;\n};\n\nexport type LoginMutationVariables = Exact<{\n  email: Scalars['String'];\n  password: Scalars['String'];\n}>;\n\nexport type LoginMutation = { __typename?: 'Mutation' } & {\n  login?: Maybe<\n    { __typename?: 'AuthUserPayload' } & {\n      response?: Maybe<\n        { __typename?: 'AuthUser' } & Pick<AuthUser, 'token'> & {\n            user: { __typename?: 'User' } & Pick<User, '_id' | 'firstName'>;\n          }\n      >;\n      errors?: Maybe<\n        Array<Maybe<{ __typename?: 'Errors' } & Pick<Errors, 'name' | 'text'>>>\n      >;\n    }\n  >;\n};\n\nexport type CreateUserMutationVariables = Exact<{\n  userInput: UserInput;\n}>;\n\nexport type CreateUserMutation = { __typename?: 'Mutation' } & {\n  createUser?: Maybe<\n    { __typename?: 'AuthUserPayload' } & {\n      response?: Maybe<\n        { __typename?: 'AuthUser' } & Pick<AuthUser, 'token'> & {\n            user: { __typename?: 'User' } & Pick<User, '_id' | 'firstName'>;\n          }\n      >;\n      errors?: Maybe<\n        Array<Maybe<{ __typename?: 'Errors' } & Pick<Errors, 'name' | 'text'>>>\n      >;\n    }\n  >;\n};\n\nexport type CreateAdWineMutationVariables = Exact<{\n  input: AdInput;\n}>;\n\nexport type CreateAdWineMutation = { __typename?: 'Mutation' } & {\n  createAd?: Maybe<\n    { __typename?: 'AdPayload' } & {\n      response?: Maybe<\n        | ({ __typename?: 'AdWine' } & Pick<\n            AdWine,\n            'wineName' | '_id' | 'content' | 'typeProduct' | 'typeAd'\n          >)\n        | ({ __typename?: 'AdGrape' } & Pick<\n            AdGrape,\n            '_id' | 'content' | 'typeProduct' | 'typeAd'\n          >)\n      >;\n      errors?: Maybe<\n        Array<Maybe<{ __typename?: 'Errors' } & Pick<Errors, 'name' | 'text'>>>\n      >;\n    }\n  >;\n};\n\nexport type MeQueryVariables = Exact<{ [key: string]: never }>;\n\nexport type MeQuery = { __typename?: 'Query' } & {\n  me?: Maybe<\n    { __typename?: 'User' } & Pick<\n      User,\n      '_id' | 'firstName' | 'lastName' | 'email'\n    > & {\n        address: { __typename?: 'Address' } & Pick<\n          Address,\n          'regione' | 'provincia' | 'comune' | 'via' | 'CAP'\n        >;\n        ads?: Maybe<\n          Array<\n            | ({ __typename?: 'AdWine' } & Pick<\n                AdWine,\n                'wineName' | '_id' | 'typeAd'\n              >)\n            | ({ __typename?: 'AdGrape' } & Pick<AdGrape, '_id' | 'typeAd'>)\n          >\n        >;\n        negotiations?: Maybe<\n          Array<\n            { __typename?: 'Negotiation' } & Pick<Negotiation, '_id'> & {\n                ad:\n                  | ({ __typename?: 'AdWine' } & Pick<\n                      AdWine,\n                      'wineName' | '_id'\n                    >)\n                  | ({ __typename?: 'AdGrape' } & Pick<AdGrape, '_id'>);\n                forUserAd: { __typename?: 'User' } & Pick<\n                  User,\n                  '_id' | 'email'\n                >;\n              }\n          >\n        >;\n      }\n  >;\n};\n\nexport type IsUserLoggedInQueryVariables = Exact<{ [key: string]: never }>;\n\nexport type IsUserLoggedInQuery = { __typename?: 'Query' } & Pick<\n  Query,\n  'isLoggedIn'\n>;\n\nexport type NotificationQueryVariables = Exact<{ [key: string]: never }>;\n\nexport type NotificationQuery = { __typename?: 'Query' } & {\n  notification?: Maybe<\n    { __typename?: 'Notification' } & Pick<Notification, 'type' | 'message'>\n  >;\n};\n\nexport type WineSearchedQueryVariables = Exact<{ [key: string]: never }>;\n\nexport type WineSearchedQuery = { __typename?: 'Query' } & {\n  searchedWine?: Maybe<\n    { __typename?: 'WineSearched' } & Pick<\n      WineSearched,\n      | 'typeAd'\n      | 'typeProduct'\n      | 'wineName'\n      | 'harvest'\n      | 'abv'\n      | 'price'\n      | 'liters'\n      | 'isPost'\n    >\n  >;\n};\n\nexport type AdsWineQueryVariables = Exact<{\n  typeAd: TypeAd;\n  typeProduct: TypeProduct;\n  wineName?: Maybe<Scalars['String']>;\n  skip?: Maybe<Scalars['Int']>;\n  orderBy?: Maybe<QueryOrderBy>;\n  limit?: Maybe<Scalars['Int']>;\n}>;\n\nexport type AdsWineQuery = { __typename?: 'Query' } & {\n  ads?: Maybe<\n    Array<\n      Maybe<\n        | ({ __typename?: 'AdWine' } & Pick<\n            AdWine,\n            | 'wineName'\n            | 'litersFrom'\n            | 'litersTo'\n            | '_id'\n            | 'harvest'\n            | 'abv'\n            | 'priceFrom'\n            | 'priceTo'\n            | 'activeNegotiations'\n            | 'datePosted'\n          > & {\n              postedBy: { __typename?: 'User' } & Pick<\n                User,\n                '_id' | 'firstName' | 'lastName'\n              >;\n              address: { __typename?: 'Address' } & Pick<\n                Address,\n                'regione' | 'provincia'\n              >;\n            })\n        | ({ __typename?: 'AdGrape' } & Pick<\n            AdGrape,\n            | '_id'\n            | 'harvest'\n            | 'abv'\n            | 'priceFrom'\n            | 'priceTo'\n            | 'activeNegotiations'\n            | 'datePosted'\n          > & {\n              postedBy: { __typename?: 'User' } & Pick<\n                User,\n                '_id' | 'firstName' | 'lastName'\n              >;\n              address: { __typename?: 'Address' } & Pick<\n                Address,\n                'regione' | 'provincia'\n              >;\n            })\n      >\n    >\n  >;\n};\n\nexport type WinesQueryVariables = Exact<{ [key: string]: never }>;\n\nexport type WinesQuery = { __typename?: 'Query' } & {\n  wines?: Maybe<\n    Array<\n      { __typename?: 'Wine' } & Pick<\n        Wine,\n        | '_id'\n        | 'denominazioneVino'\n        | 'espressioneComunitaria'\n        | 'denominazioneZona'\n        | 'regione'\n      >\n    >\n  >;\n};\n\nexport const LoginDocument = gql`\n  mutation login($email: String!, $password: String!) {\n    login(email: $email, password: $password) {\n      response {\n        token\n        user {\n          _id\n          firstName\n        }\n      }\n      errors {\n        name\n        text\n      }\n    }\n  }\n`;\nexport type LoginMutationFn = Apollo.MutationFunction<\n  LoginMutation,\n  LoginMutationVariables\n>;\n\n/**\n * __useLoginMutation__\n *\n * To run a mutation, you first call `useLoginMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useLoginMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [loginMutation, { data, loading, error }] = useLoginMutation({\n *   variables: {\n *      email: // value for 'email'\n *      password: // value for 'password'\n *   },\n * });\n */\nexport function useLoginMutation(\n  baseOptions?: Apollo.MutationHookOptions<\n    LoginMutation,\n    LoginMutationVariables\n  >\n) {\n  return Apollo.useMutation<LoginMutation, LoginMutationVariables>(\n    LoginDocument,\n    baseOptions\n  );\n}\nexport type LoginMutationHookResult = ReturnType<typeof useLoginMutation>;\nexport type LoginMutationResult = Apollo.MutationResult<LoginMutation>;\nexport type LoginMutationOptions = Apollo.BaseMutationOptions<\n  LoginMutation,\n  LoginMutationVariables\n>;\nexport const CreateUserDocument = gql`\n  mutation CreateUser($userInput: UserInput!) {\n    createUser(user: $userInput) {\n      response {\n        token\n        user {\n          _id\n          firstName\n        }\n      }\n      errors {\n        name\n        text\n      }\n    }\n  }\n`;\nexport type CreateUserMutationFn = Apollo.MutationFunction<\n  CreateUserMutation,\n  CreateUserMutationVariables\n>;\n\n/**\n * __useCreateUserMutation__\n *\n * To run a mutation, you first call `useCreateUserMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useCreateUserMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [createUserMutation, { data, loading, error }] = useCreateUserMutation({\n *   variables: {\n *      userInput: // value for 'userInput'\n *   },\n * });\n */\nexport function useCreateUserMutation(\n  baseOptions?: Apollo.MutationHookOptions<\n    CreateUserMutation,\n    CreateUserMutationVariables\n  >\n) {\n  return Apollo.useMutation<CreateUserMutation, CreateUserMutationVariables>(\n    CreateUserDocument,\n    baseOptions\n  );\n}\nexport type CreateUserMutationHookResult = ReturnType<\n  typeof useCreateUserMutation\n>;\nexport type CreateUserMutationResult = Apollo.MutationResult<CreateUserMutation>;\nexport type CreateUserMutationOptions = Apollo.BaseMutationOptions<\n  CreateUserMutation,\n  CreateUserMutationVariables\n>;\nexport const CreateAdWineDocument = gql`\n  mutation CreateAdWine($input: AdInput!) {\n    createAd(input: $input) {\n      response {\n        _id\n        content\n        typeProduct\n        typeAd\n        ... on AdWine {\n          wineName\n        }\n      }\n      errors {\n        name\n        text\n      }\n    }\n  }\n`;\nexport type CreateAdWineMutationFn = Apollo.MutationFunction<\n  CreateAdWineMutation,\n  CreateAdWineMutationVariables\n>;\n\n/**\n * __useCreateAdWineMutation__\n *\n * To run a mutation, you first call `useCreateAdWineMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useCreateAdWineMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [createAdWineMutation, { data, loading, error }] = useCreateAdWineMutation({\n *   variables: {\n *      input: // value for 'input'\n *   },\n * });\n */\nexport function useCreateAdWineMutation(\n  baseOptions?: Apollo.MutationHookOptions<\n    CreateAdWineMutation,\n    CreateAdWineMutationVariables\n  >\n) {\n  return Apollo.useMutation<\n    CreateAdWineMutation,\n    CreateAdWineMutationVariables\n  >(CreateAdWineDocument, baseOptions);\n}\nexport type CreateAdWineMutationHookResult = ReturnType<\n  typeof useCreateAdWineMutation\n>;\nexport type CreateAdWineMutationResult = Apollo.MutationResult<CreateAdWineMutation>;\nexport type CreateAdWineMutationOptions = Apollo.BaseMutationOptions<\n  CreateAdWineMutation,\n  CreateAdWineMutationVariables\n>;\nexport const MeDocument = gql`\n  query me {\n    me {\n      _id\n      firstName\n      lastName\n      address {\n        regione\n        provincia\n        comune\n        via\n        CAP\n      }\n      email\n      ads {\n        _id\n        typeAd\n        ... on AdWine {\n          wineName\n        }\n      }\n      negotiations {\n        _id\n        ad {\n          _id\n          ... on AdWine {\n            wineName\n          }\n        }\n        forUserAd {\n          _id\n          email\n        }\n      }\n    }\n  }\n`;\n\n/**\n * __useMeQuery__\n *\n * To run a query within a React component, call `useMeQuery` and pass it any options that fit your needs.\n * When your component renders, `useMeQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useMeQuery({\n *   variables: {\n *   },\n * });\n */\nexport function useMeQuery(\n  baseOptions?: Apollo.QueryHookOptions<MeQuery, MeQueryVariables>\n) {\n  return Apollo.useQuery<MeQuery, MeQueryVariables>(MeDocument, baseOptions);\n}\nexport function useMeLazyQuery(\n  baseOptions?: Apollo.LazyQueryHookOptions<MeQuery, MeQueryVariables>\n) {\n  return Apollo.useLazyQuery<MeQuery, MeQueryVariables>(\n    MeDocument,\n    baseOptions\n  );\n}\nexport type MeQueryHookResult = ReturnType<typeof useMeQuery>;\nexport type MeLazyQueryHookResult = ReturnType<typeof useMeLazyQuery>;\nexport type MeQueryResult = Apollo.QueryResult<MeQuery, MeQueryVariables>;\nexport const IsUserLoggedInDocument = gql`\n  query IsUserLoggedIn {\n    isLoggedIn @client\n  }\n`;\n\n/**\n * __useIsUserLoggedInQuery__\n *\n * To run a query within a React component, call `useIsUserLoggedInQuery` and pass it any options that fit your needs.\n * When your component renders, `useIsUserLoggedInQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useIsUserLoggedInQuery({\n *   variables: {\n *   },\n * });\n */\nexport function useIsUserLoggedInQuery(\n  baseOptions?: Apollo.QueryHookOptions<\n    IsUserLoggedInQuery,\n    IsUserLoggedInQueryVariables\n  >\n) {\n  return Apollo.useQuery<IsUserLoggedInQuery, IsUserLoggedInQueryVariables>(\n    IsUserLoggedInDocument,\n    baseOptions\n  );\n}\nexport function useIsUserLoggedInLazyQuery(\n  baseOptions?: Apollo.LazyQueryHookOptions<\n    IsUserLoggedInQuery,\n    IsUserLoggedInQueryVariables\n  >\n) {\n  return Apollo.useLazyQuery<IsUserLoggedInQuery, IsUserLoggedInQueryVariables>(\n    IsUserLoggedInDocument,\n    baseOptions\n  );\n}\nexport type IsUserLoggedInQueryHookResult = ReturnType<\n  typeof useIsUserLoggedInQuery\n>;\nexport type IsUserLoggedInLazyQueryHookResult = ReturnType<\n  typeof useIsUserLoggedInLazyQuery\n>;\nexport type IsUserLoggedInQueryResult = Apollo.QueryResult<\n  IsUserLoggedInQuery,\n  IsUserLoggedInQueryVariables\n>;\nexport const NotificationDocument = gql`\n  query Notification {\n    notification @client {\n      type @client\n      message @client\n    }\n  }\n`;\n\n/**\n * __useNotificationQuery__\n *\n * To run a query within a React component, call `useNotificationQuery` and pass it any options that fit your needs.\n * When your component renders, `useNotificationQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useNotificationQuery({\n *   variables: {\n *   },\n * });\n */\nexport function useNotificationQuery(\n  baseOptions?: Apollo.QueryHookOptions<\n    NotificationQuery,\n    NotificationQueryVariables\n  >\n) {\n  return Apollo.useQuery<NotificationQuery, NotificationQueryVariables>(\n    NotificationDocument,\n    baseOptions\n  );\n}\nexport function useNotificationLazyQuery(\n  baseOptions?: Apollo.LazyQueryHookOptions<\n    NotificationQuery,\n    NotificationQueryVariables\n  >\n) {\n  return Apollo.useLazyQuery<NotificationQuery, NotificationQueryVariables>(\n    NotificationDocument,\n    baseOptions\n  );\n}\nexport type NotificationQueryHookResult = ReturnType<\n  typeof useNotificationQuery\n>;\nexport type NotificationLazyQueryHookResult = ReturnType<\n  typeof useNotificationLazyQuery\n>;\nexport type NotificationQueryResult = Apollo.QueryResult<\n  NotificationQuery,\n  NotificationQueryVariables\n>;\nexport const WineSearchedDocument = gql`\n  query WineSearched {\n    searchedWine @client {\n      typeAd @client\n      typeProduct @client\n      wineName @client\n      harvest @client\n      abv @client\n      price @client\n      liters @client\n      isPost @client\n    }\n  }\n`;\n\n/**\n * __useWineSearchedQuery__\n *\n * To run a query within a React component, call `useWineSearchedQuery` and pass it any options that fit your needs.\n * When your component renders, `useWineSearchedQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useWineSearchedQuery({\n *   variables: {\n *   },\n * });\n */\nexport function useWineSearchedQuery(\n  baseOptions?: Apollo.QueryHookOptions<\n    WineSearchedQuery,\n    WineSearchedQueryVariables\n  >\n) {\n  return Apollo.useQuery<WineSearchedQuery, WineSearchedQueryVariables>(\n    WineSearchedDocument,\n    baseOptions\n  );\n}\nexport function useWineSearchedLazyQuery(\n  baseOptions?: Apollo.LazyQueryHookOptions<\n    WineSearchedQuery,\n    WineSearchedQueryVariables\n  >\n) {\n  return Apollo.useLazyQuery<WineSearchedQuery, WineSearchedQueryVariables>(\n    WineSearchedDocument,\n    baseOptions\n  );\n}\nexport type WineSearchedQueryHookResult = ReturnType<\n  typeof useWineSearchedQuery\n>;\nexport type WineSearchedLazyQueryHookResult = ReturnType<\n  typeof useWineSearchedLazyQuery\n>;\nexport type WineSearchedQueryResult = Apollo.QueryResult<\n  WineSearchedQuery,\n  WineSearchedQueryVariables\n>;\nexport const AdsWineDocument = gql`\n  query AdsWine(\n    $typeAd: TypeAd!\n    $typeProduct: TypeProduct!\n    $wineName: String\n    $skip: Int\n    $orderBy: QueryOrderBy\n    $limit: Int\n  ) {\n    ads(\n      typeAd: $typeAd\n      typeProduct: $typeProduct\n      wineName: $wineName\n      skip: $skip\n      orderBy: $orderBy\n      limit: $limit\n    ) {\n      _id\n      postedBy {\n        _id\n        firstName\n        lastName\n      }\n      harvest\n      abv\n      priceFrom\n      priceTo\n      ... on AdWine {\n        wineName\n        litersFrom\n        litersTo\n      }\n      address {\n        regione\n        provincia\n      }\n      activeNegotiations\n      datePosted\n    }\n  }\n`;\n\n/**\n * __useAdsWineQuery__\n *\n * To run a query within a React component, call `useAdsWineQuery` and pass it any options that fit your needs.\n * When your component renders, `useAdsWineQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useAdsWineQuery({\n *   variables: {\n *      typeAd: // value for 'typeAd'\n *      typeProduct: // value for 'typeProduct'\n *      wineName: // value for 'wineName'\n *      skip: // value for 'skip'\n *      orderBy: // value for 'orderBy'\n *      limit: // value for 'limit'\n *   },\n * });\n */\nexport function useAdsWineQuery(\n  baseOptions: Apollo.QueryHookOptions<AdsWineQuery, AdsWineQueryVariables>\n) {\n  return Apollo.useQuery<AdsWineQuery, AdsWineQueryVariables>(\n    AdsWineDocument,\n    baseOptions\n  );\n}\nexport function useAdsWineLazyQuery(\n  baseOptions?: Apollo.LazyQueryHookOptions<AdsWineQuery, AdsWineQueryVariables>\n) {\n  return Apollo.useLazyQuery<AdsWineQuery, AdsWineQueryVariables>(\n    AdsWineDocument,\n    baseOptions\n  );\n}\nexport type AdsWineQueryHookResult = ReturnType<typeof useAdsWineQuery>;\nexport type AdsWineLazyQueryHookResult = ReturnType<typeof useAdsWineLazyQuery>;\nexport type AdsWineQueryResult = Apollo.QueryResult<\n  AdsWineQuery,\n  AdsWineQueryVariables\n>;\nexport const WinesDocument = gql`\n  query Wines {\n    wines {\n      _id\n      denominazioneVino\n      espressioneComunitaria\n      denominazioneZona\n      regione\n    }\n  }\n`;\n\n/**\n * __useWinesQuery__\n *\n * To run a query within a React component, call `useWinesQuery` and pass it any options that fit your needs.\n * When your component renders, `useWinesQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useWinesQuery({\n *   variables: {\n *   },\n * });\n */\nexport function useWinesQuery(\n  baseOptions?: Apollo.QueryHookOptions<WinesQuery, WinesQueryVariables>\n) {\n  return Apollo.useQuery<WinesQuery, WinesQueryVariables>(\n    WinesDocument,\n    baseOptions\n  );\n}\nexport function useWinesLazyQuery(\n  baseOptions?: Apollo.LazyQueryHookOptions<WinesQuery, WinesQueryVariables>\n) {\n  return Apollo.useLazyQuery<WinesQuery, WinesQueryVariables>(\n    WinesDocument,\n    baseOptions\n  );\n}\nexport type WinesQueryHookResult = ReturnType<typeof useWinesQuery>;\nexport type WinesLazyQueryHookResult = ReturnType<typeof useWinesLazyQuery>;\nexport type WinesQueryResult = Apollo.QueryResult<\n  WinesQuery,\n  WinesQueryVariables\n>;\n","/Users/giovanni/programming/wine-app-frontend/src/pages/index.tsx",[],"/Users/giovanni/programming/wine-app-frontend/src/pages/Ads.tsx",[],[],"/Users/giovanni/programming/wine-app-frontend/src/pages/Profile.tsx",[],"/Users/giovanni/programming/wine-app-frontend/src/pages/Ad.tsx",[],"/Users/giovanni/programming/wine-app-frontend/src/pages/Signup.tsx",[],"/Users/giovanni/programming/wine-app-frontend/src/components/PageContainer.tsx",[],"/Users/giovanni/programming/wine-app-frontend/src/components/Notification.tsx",[],"/Users/giovanni/programming/wine-app-frontend/src/components/UserForm/index.tsx",[],"/Users/giovanni/programming/wine-app-frontend/src/components/UserForm/data.ts",[],"/Users/giovanni/programming/wine-app-frontend/src/utils/pivaValidator.ts",[],"/Users/giovanni/programming/wine-app-frontend/src/utils/passwordValidator.ts",[],"/Users/giovanni/programming/wine-app-frontend/src/utils/phoneNumberValidator.ts",[],"/Users/giovanni/programming/wine-app-frontend/src/utils/formHelper.ts",[],"/Users/giovanni/programming/wine-app-frontend/src/pages/Home.tsx",[],[],"/Users/giovanni/programming/wine-app-frontend/src/pages/Buy.tsx",[],"/Users/giovanni/programming/wine-app-frontend/src/components/WineForms/Search/WineFormQuery.tsx",[],"/Users/giovanni/programming/wine-app-frontend/src/components/Navigation/LogoutButton.tsx",[],"/Users/giovanni/programming/wine-app-frontend/src/components/Navigation/index.tsx",[],"/Users/giovanni/programming/wine-app-frontend/src/components/Navigation/AppBar.tsx",[],"/Users/giovanni/programming/wine-app-frontend/src/components/Navigation/Drawer.tsx",[],"/Users/giovanni/programming/wine-app-frontend/src/components/LoginModal/LoginForm.tsx",[],"/Users/giovanni/programming/wine-app-frontend/src/components/FormFields/PasswordField.tsx",[],"/Users/giovanni/programming/wine-app-frontend/src/components/FormFields/TextField.tsx",[],"/Users/giovanni/programming/wine-app-frontend/src/components/LoginModal/index.tsx",[],"/Users/giovanni/programming/wine-app-frontend/src/components/FormFields/SliderField.tsx",[],"/Users/giovanni/programming/wine-app-frontend/src/components/FormFields/ComboboxField.tsx",[],"/Users/giovanni/programming/wine-app-frontend/src/components/FormFields/ComboboxProvince.tsx",[],"/Users/giovanni/programming/wine-app-frontend/src/components/FormFields/ComboboxComuni.tsx",[],"/Users/giovanni/programming/wine-app-frontend/src/components/FormFields/ComboboxFieldWines.tsx",[],"/Users/giovanni/programming/wine-app-frontend/src/components/FormFields/TextFieldAdornment.tsx",[],"/Users/giovanni/programming/wine-app-frontend/src/pages/Results.tsx",[],"/Users/giovanni/programming/wine-app-frontend/src/components/WineForms/Post/WineFormMutation.tsx",[],"/Users/giovanni/programming/wine-app-frontend/src/components/FormFields/SelectField.tsx",[],"/Users/giovanni/programming/wine-app-frontend/src/components/AddressForm/index.tsx",["180"],{"ruleId":"181","severity":1,"message":"182","line":3,"column":25,"nodeType":"183","messageId":"184","endLine":3,"endColumn":57},{"ruleId":"185","severity":1,"message":"186","line":14,"column":9,"nodeType":"187","messageId":"188","endLine":14,"endColumn":12,"suggestions":"189"},{"ruleId":"181","severity":1,"message":"182","line":1100,"column":8,"nodeType":"190","messageId":"184","endLine":1100,"endColumn":114},{"ruleId":"181","severity":1,"message":"182","line":1142,"column":8,"nodeType":"190","messageId":"184","endLine":1142,"endColumn":129},{"ruleId":"181","severity":1,"message":"182","line":1186,"column":8,"nodeType":"190","messageId":"184","endLine":1186,"endColumn":135},{"ruleId":"181","severity":1,"message":"182","line":1245,"column":8,"nodeType":"190","messageId":"184","endLine":1245,"endColumn":93},{"ruleId":"181","severity":1,"message":"182","line":1248,"column":8,"nodeType":"190","messageId":"184","endLine":1248,"endColumn":101},{"ruleId":"181","severity":1,"message":"182","line":1275,"column":8,"nodeType":"190","messageId":"184","endLine":1275,"endColumn":129},{"ruleId":"181","severity":1,"message":"182","line":1278,"column":8,"nodeType":"190","messageId":"184","endLine":1278,"endColumn":137},{"ruleId":"181","severity":1,"message":"182","line":1308,"column":8,"nodeType":"190","messageId":"184","endLine":1308,"endColumn":123},{"ruleId":"181","severity":1,"message":"182","line":1311,"column":8,"nodeType":"190","messageId":"184","endLine":1311,"endColumn":131},{"ruleId":"181","severity":1,"message":"182","line":1347,"column":8,"nodeType":"190","messageId":"184","endLine":1347,"endColumn":123},{"ruleId":"181","severity":1,"message":"182","line":1350,"column":8,"nodeType":"190","messageId":"184","endLine":1350,"endColumn":131},{"ruleId":"181","severity":1,"message":"182","line":1412,"column":8,"nodeType":"190","messageId":"184","endLine":1412,"endColumn":107},{"ruleId":"181","severity":1,"message":"182","line":1415,"column":8,"nodeType":"190","messageId":"184","endLine":1415,"endColumn":116},{"ruleId":"181","severity":1,"message":"182","line":1448,"column":8,"nodeType":"190","messageId":"184","endLine":1448,"endColumn":102},{"ruleId":"181","severity":1,"message":"182","line":1451,"column":8,"nodeType":"190","messageId":"184","endLine":1451,"endColumn":110},{"ruleId":"185","severity":1,"message":"186","line":14,"column":12,"nodeType":"187","messageId":"188","endLine":14,"endColumn":15,"suggestions":"191"},"@typescript-eslint/explicit-module-boundary-types","Missing return type on function.","ArrowFunctionExpression","missingReturnType","@typescript-eslint/no-explicit-any","Unexpected any. Specify a different type.","TSAnyKeyword","unexpectedAny",["192","193"],"FunctionDeclaration",["194","195"],{"messageId":"196","fix":"197","desc":"198"},{"messageId":"199","fix":"200","desc":"201"},{"messageId":"196","fix":"202","desc":"198"},{"messageId":"199","fix":"203","desc":"201"},"suggestUnknown",{"range":"204","text":"205"},"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct.","suggestNever",{"range":"204","text":"206"},"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of.",{"range":"207","text":"205"},{"range":"207","text":"206"},[579,582],"unknown","never",[570,573]]