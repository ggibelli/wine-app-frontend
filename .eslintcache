[{"/Users/giovanni/programming/wine-app-frontend/src/index.tsx":"1","/Users/giovanni/programming/wine-app-frontend/src/reportWebVitals.ts":"2","/Users/giovanni/programming/wine-app-frontend/src/cache.ts":"3","/Users/giovanni/programming/wine-app-frontend/src/App.tsx":"4","/Users/giovanni/programming/wine-app-frontend/src/generated/graphql.tsx":"5","/Users/giovanni/programming/wine-app-frontend/src/pages/index.tsx":"6","/Users/giovanni/programming/wine-app-frontend/src/pages/Ads.tsx":"7","/Users/giovanni/programming/wine-app-frontend/src/pages/Profile.tsx":"8","/Users/giovanni/programming/wine-app-frontend/src/pages/Ad.tsx":"9","/Users/giovanni/programming/wine-app-frontend/src/pages/Signup.tsx":"10","/Users/giovanni/programming/wine-app-frontend/src/components/PageContainer.tsx":"11","/Users/giovanni/programming/wine-app-frontend/src/components/Notification.tsx":"12","/Users/giovanni/programming/wine-app-frontend/src/components/UserForm/index.tsx":"13","/Users/giovanni/programming/wine-app-frontend/src/components/UserForm/data.ts":"14","/Users/giovanni/programming/wine-app-frontend/src/utils/pivaValidator.ts":"15","/Users/giovanni/programming/wine-app-frontend/src/utils/passwordValidator.ts":"16","/Users/giovanni/programming/wine-app-frontend/src/utils/phoneNumberValidator.ts":"17","/Users/giovanni/programming/wine-app-frontend/src/utils/formHelper.ts":"18","/Users/giovanni/programming/wine-app-frontend/src/pages/Home.tsx":"19","/Users/giovanni/programming/wine-app-frontend/src/components/WineForms/Search/WineFormQuery.tsx":"20","/Users/giovanni/programming/wine-app-frontend/src/components/Navigation/LogoutButton.tsx":"21","/Users/giovanni/programming/wine-app-frontend/src/components/Navigation/index.tsx":"22","/Users/giovanni/programming/wine-app-frontend/src/components/Navigation/AppBar.tsx":"23","/Users/giovanni/programming/wine-app-frontend/src/components/Navigation/Drawer.tsx":"24","/Users/giovanni/programming/wine-app-frontend/src/components/LoginModal/LoginForm.tsx":"25","/Users/giovanni/programming/wine-app-frontend/src/components/FormFields/PasswordField.tsx":"26","/Users/giovanni/programming/wine-app-frontend/src/components/FormFields/TextField.tsx":"27","/Users/giovanni/programming/wine-app-frontend/src/components/LoginModal/index.tsx":"28","/Users/giovanni/programming/wine-app-frontend/src/components/FormFields/SliderField.tsx":"29","/Users/giovanni/programming/wine-app-frontend/src/components/FormFields/ComboboxField.tsx":"30","/Users/giovanni/programming/wine-app-frontend/src/components/FormFields/ComboboxProvince.tsx":"31","/Users/giovanni/programming/wine-app-frontend/src/components/FormFields/ComboboxComuni.tsx":"32","/Users/giovanni/programming/wine-app-frontend/src/components/FormFields/ComboboxFieldWines.tsx":"33","/Users/giovanni/programming/wine-app-frontend/src/components/FormFields/TextFieldAdornment.tsx":"34","/Users/giovanni/programming/wine-app-frontend/src/components/WineForms/Post/WineFormMutation.tsx":"35","/Users/giovanni/programming/wine-app-frontend/src/components/FormFields/SelectField.tsx":"36","/Users/giovanni/programming/wine-app-frontend/src/components/AddressForm/index.tsx":"37","/Users/giovanni/programming/wine-app-frontend/src/components/CardWine.tsx":"38","/Users/giovanni/programming/wine-app-frontend/src/pages/BuySell.tsx":"39","/Users/giovanni/programming/wine-app-frontend/src/components/CardWineDetail.tsx":"40","/Users/giovanni/programming/wine-app-frontend/src/utils/multiFilter.ts":"41","/Users/giovanni/programming/wine-app-frontend/src/components/BackButton.tsx":"42","/Users/giovanni/programming/wine-app-frontend/src/components/Filter.tsx":"43","/Users/giovanni/programming/wine-app-frontend/src/components/Snackbar.tsx":"44","/Users/giovanni/programming/wine-app-frontend/src/pages/MyAds.tsx":"45","/Users/giovanni/programming/wine-app-frontend/src/components/FavoriteButton.tsx":"46","/Users/giovanni/programming/wine-app-frontend/src/components/NegotiationModal/index.tsx":"47","/Users/giovanni/programming/wine-app-frontend/src/utils/updateCache.ts":"48","/Users/giovanni/programming/wine-app-frontend/src/pages/Negotiations.tsx":"49","/Users/giovanni/programming/wine-app-frontend/src/components/CardNegotiation.tsx":"50","/Users/giovanni/programming/wine-app-frontend/src/pages/Negotiation.tsx":"51","/Users/giovanni/programming/wine-app-frontend/src/components/OpenNegotiations.tsx":"52"},{"size":2332,"mtime":1616365163909,"results":"53","hashOfConfig":"54"},{"size":531,"mtime":1612412796133,"results":"55","hashOfConfig":"54"},{"size":4996,"mtime":1616479077197,"results":"56","hashOfConfig":"54"},{"size":760,"mtime":1613690018131,"results":"57","hashOfConfig":"54"},{"size":110534,"mtime":1616476695791,"results":"58","hashOfConfig":"54"},{"size":3073,"mtime":1616480216214,"results":"59","hashOfConfig":"54"},{"size":8714,"mtime":1616130091584,"results":"60","hashOfConfig":"54"},{"size":825,"mtime":1608955028589,"results":"61","hashOfConfig":"54"},{"size":5084,"mtime":1616480978915,"results":"62","hashOfConfig":"54"},{"size":1598,"mtime":1616313203732,"results":"63","hashOfConfig":"54"},{"size":281,"mtime":1611450128148,"results":"64","hashOfConfig":"54"},{"size":1124,"mtime":1613535398507,"results":"65","hashOfConfig":"54"},{"size":9357,"mtime":1614136155286,"results":"66","hashOfConfig":"54"},{"size":1311,"mtime":1611031218673,"results":"67","hashOfConfig":"54"},{"size":429,"mtime":1611032464869,"results":"68","hashOfConfig":"54"},{"size":506,"mtime":1610946072446,"results":"69","hashOfConfig":"54"},{"size":236,"mtime":1610947451436,"results":"70","hashOfConfig":"54"},{"size":515072,"mtime":1611203004002,"results":"71","hashOfConfig":"54"},{"size":3456,"mtime":1616459969551,"results":"72","hashOfConfig":"54"},{"size":8640,"mtime":1614234294771,"results":"73","hashOfConfig":"54"},{"size":1558,"mtime":1616313203800,"results":"74","hashOfConfig":"54"},{"size":2208,"mtime":1616481178955,"results":"75","hashOfConfig":"54"},{"size":5208,"mtime":1616476752325,"results":"76","hashOfConfig":"54"},{"size":4181,"mtime":1616368720998,"results":"77","hashOfConfig":"54"},{"size":4006,"mtime":1614133899279,"results":"78","hashOfConfig":"54"},{"size":1902,"mtime":1614133826727,"results":"79","hashOfConfig":"54"},{"size":1317,"mtime":1613692805464,"results":"80","hashOfConfig":"54"},{"size":954,"mtime":1611644899924,"results":"81","hashOfConfig":"54"},{"size":825,"mtime":1614231072579,"results":"82","hashOfConfig":"54"},{"size":1474,"mtime":1614136077220,"results":"83","hashOfConfig":"54"},{"size":1958,"mtime":1614136077220,"results":"84","hashOfConfig":"54"},{"size":1969,"mtime":1614136077220,"results":"85","hashOfConfig":"54"},{"size":2371,"mtime":1614135608346,"results":"86","hashOfConfig":"54"},{"size":1440,"mtime":1613693195473,"results":"87","hashOfConfig":"54"},{"size":15611,"mtime":1614727107824,"results":"88","hashOfConfig":"54"},{"size":1368,"mtime":1614232990654,"results":"89","hashOfConfig":"54"},{"size":1815,"mtime":1612133045101,"results":"90","hashOfConfig":"54"},{"size":1713,"mtime":1616313203743,"results":"91","hashOfConfig":"54"},{"size":7290,"mtime":1616473819058,"results":"92","hashOfConfig":"54"},{"size":3223,"mtime":1616460598263,"results":"93","hashOfConfig":"54"},{"size":665,"mtime":1615502445800,"results":"94","hashOfConfig":"54"},{"size":1322,"mtime":1615619689874,"results":"95","hashOfConfig":"54"},{"size":2683,"mtime":1615778867057,"results":"96","hashOfConfig":"54"},{"size":1218,"mtime":1615782467700,"results":"97","hashOfConfig":"54"},{"size":3827,"mtime":1616313203731,"results":"98","hashOfConfig":"54"},{"size":1950,"mtime":1616460598259,"results":"99","hashOfConfig":"54"},{"size":1017,"mtime":1616481164623,"results":"100","hashOfConfig":"54"},{"size":2602,"mtime":1616477595823,"results":"101","hashOfConfig":"54"},{"size":4463,"mtime":1616480100216,"results":"102","hashOfConfig":"54"},{"size":2643,"mtime":1616480100228,"results":"103","hashOfConfig":"54"},{"size":2759,"mtime":1616480100216,"results":"104","hashOfConfig":"54"},{"size":2068,"mtime":1616480100216,"results":"105","hashOfConfig":"54"},{"filePath":"106","messages":"107","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"108"},"1hdo000",{"filePath":"109","messages":"110","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"108"},{"filePath":"111","messages":"112","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"113","usedDeprecatedRules":"108"},{"filePath":"114","messages":"115","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"108"},{"filePath":"116","messages":"117","errorCount":0,"warningCount":48,"fixableErrorCount":0,"fixableWarningCount":0,"source":"118","usedDeprecatedRules":"108"},{"filePath":"119","messages":"120","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"121","messages":"122","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"108"},{"filePath":"123","messages":"124","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"125"},{"filePath":"126","messages":"127","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"128","messages":"129","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"108"},{"filePath":"130","messages":"131","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"132"},{"filePath":"133","messages":"134","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"108"},{"filePath":"135","messages":"136","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"108"},{"filePath":"137","messages":"138","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"108"},{"filePath":"139","messages":"140","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"108"},{"filePath":"141","messages":"142","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"108"},{"filePath":"143","messages":"144","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"108"},{"filePath":"145","messages":"146","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"108"},{"filePath":"147","messages":"148","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"108"},{"filePath":"149","messages":"150","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"108"},{"filePath":"151","messages":"152","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"108"},{"filePath":"153","messages":"154","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"155","messages":"156","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"108"},{"filePath":"157","messages":"158","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"108"},{"filePath":"159","messages":"160","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"108"},{"filePath":"161","messages":"162","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"108"},{"filePath":"163","messages":"164","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"108"},{"filePath":"165","messages":"166","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"108"},{"filePath":"167","messages":"168","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"108"},{"filePath":"169","messages":"170","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"108"},{"filePath":"171","messages":"172","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"108"},{"filePath":"173","messages":"174","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"108"},{"filePath":"175","messages":"176","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"108"},{"filePath":"177","messages":"178","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"108"},{"filePath":"179","messages":"180","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"108"},{"filePath":"181","messages":"182","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"108"},{"filePath":"183","messages":"184","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"108"},{"filePath":"185","messages":"186","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"108"},{"filePath":"187","messages":"188","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"108"},{"filePath":"189","messages":"190","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"108"},{"filePath":"191","messages":"192","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"193","usedDeprecatedRules":"108"},{"filePath":"194","messages":"195","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"108"},{"filePath":"196","messages":"197","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"108"},{"filePath":"198","messages":"199","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"108"},{"filePath":"200","messages":"201","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"108"},{"filePath":"202","messages":"203","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"108"},{"filePath":"204","messages":"205","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"206","messages":"207","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"208","usedDeprecatedRules":"108"},{"filePath":"209","messages":"210","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"108"},{"filePath":"211","messages":"212","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"108"},{"filePath":"213","messages":"214","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"108"},{"filePath":"215","messages":"216","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"108"},"/Users/giovanni/programming/wine-app-frontend/src/index.tsx",[],[],"/Users/giovanni/programming/wine-app-frontend/src/reportWebVitals.ts",[],"/Users/giovanni/programming/wine-app-frontend/src/cache.ts",["217","218","219"],"/* eslint-disable @typescript-eslint/no-unsafe-member-access */\n/* eslint-disable @typescript-eslint/no-unsafe-assignment */\nimport { InMemoryCache, makeVar } from '@apollo/client';\nimport { TypeAd, TypeProduct } from './generated/graphql';\n// import { offsetLimitPagination } from '@apollo/client/utilities';\nimport _ from 'lodash';\nexport const cache: InMemoryCache = new InMemoryCache({\n  typePolicies: {\n    User: {\n      fields: {\n        ads: {\n          keyArgs: false,\n          // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n          //@ts-ignore\n          merge(existing = [], incoming: any, { args: { offset = 0 } }) {\n            if (offset === 0) {\n              // eslint-disable-next-line @typescript-eslint/no-unsafe-return\n              return {\n                __typeName: 'AdsResult',\n                ads: incoming.ads,\n                pageCount: incoming.pageCount,\n              };\n            }\n            // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\n            // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\n            // eslint-disable-next-line @typescript-eslint/no-unsafe-return\n            // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\n            return {\n              __typeName: 'AdsResult',\n              ads: _.unionBy(existing.ads, incoming.ads, '__ref'),\n              pageCount: incoming.pageCount,\n            };\n          },\n        },\n      },\n    },\n    Query: {\n      fields: {\n        ads: {\n          // Don't cache separate results based on\n          // any of this field's arguments.\n          keyArgs: ['wineName', 'typeProduct', 'typeAd'],\n          // Concatenate the incoming list items with\n          // the existing list items.\n          // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n          //@ts-ignore\n          merge(existing = [], incoming: any, { args: { offset = 0 } }) {\n            if (offset === 0) {\n              // eslint-disable-next-line @typescript-eslint/no-unsafe-return\n              return {\n                __typeName: 'AdsResult',\n                ads: incoming.ads,\n                pageCount: incoming.pageCount,\n              };\n            }\n            // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\n            // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\n            // eslint-disable-next-line @typescript-eslint/no-unsafe-return\n            // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\n            return {\n              __typeName: 'AdsResult',\n              ads: _.unionBy(existing.ads, incoming.ads, '__ref'),\n              pageCount: incoming.pageCount,\n            };\n          },\n        },\n        negotiations: {\n          keyArgs: false,\n          // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n          //@ts-ignore\n          merge(existing = [], incoming: any, { args: { offset = 0 } }) {\n            if (offset === 0) {\n              // eslint-disable-next-line @typescript-eslint/no-unsafe-return\n              return {\n                __typeName: 'NegotiationResult',\n                negotiations: incoming.negotiations,\n                pageCount: incoming.pageCount,\n              };\n            }\n            // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\n            // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\n            // eslint-disable-next-line @typescript-eslint/no-unsafe-return\n            // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\n            return {\n              __typeName: 'NegotiationResult',\n              negotiations: _.unionBy(\n                existing.negotiations,\n                incoming.negotiations,\n                '__ref'\n              ),\n              pageCount: incoming.pageCount,\n            };\n          },\n        },\n        isLoggedIn: {\n          read() {\n            return isLoggedInVar();\n          },\n        },\n        notification: {\n          read() {\n            return notification();\n          },\n        },\n        searchedWine: {\n          read() {\n            return searchedWine();\n          },\n        },\n      },\n    },\n  },\n});\n\nexport const isLoggedInVar = makeVar<boolean>(\n  !!localStorage.getItem('wineapp-user-token')\n);\n\ntype AlertStatus = 'success' | 'warning' | 'error' | 'info' | undefined;\n\ninterface DrawerProfile {\n  name: string;\n  negotiations: number;\n  ads: number;\n}\n\ninterface WineSearched {\n  typeAd: TypeAd;\n  typeProduct: TypeProduct;\n  wineName: string;\n  harvest: number;\n  abv: number;\n  price: number;\n  liters: number;\n  isPost: boolean;\n}\n\nexport const searchedWine = makeVar<WineSearched | undefined>(undefined);\n\ninterface Notification {\n  type: AlertStatus;\n  message: string;\n}\n\nexport const notification = makeVar<Notification | undefined>(undefined);\n\nexport const drawerProfile = makeVar<DrawerProfile | undefined>(undefined);\n","/Users/giovanni/programming/wine-app-frontend/src/App.tsx",[],"/Users/giovanni/programming/wine-app-frontend/src/generated/graphql.tsx",["220","221","222","223","224","225","226","227","228","229","230","231","232","233","234","235","236","237","238","239","240","241","242","243","244","245","246","247","248","249","250","251","252","253","254","255","256","257","258","259","260","261","262","263","264","265","266","267"],"import { gql } from '@apollo/client';\nimport * as Apollo from '@apollo/client';\nexport type Maybe<T> = T | null;\nexport type Exact<T extends { [key: string]: unknown }> = {\n  [K in keyof T]: T[K];\n};\nexport type MakeOptional<T, K extends keyof T> = Omit<T, K> &\n  { [SubKey in K]?: Maybe<T[SubKey]> };\nexport type MakeMaybe<T, K extends keyof T> = Omit<T, K> &\n  { [SubKey in K]: Maybe<T[SubKey]> };\n/** All built-in and custom scalars, mapped to their actual values */\nexport type Scalars = {\n  ID: string;\n  String: string;\n  Boolean: boolean;\n  Int: number;\n  Float: number;\n  Date: any;\n};\n\nexport type Address = {\n  __typename?: 'Address';\n  via: Scalars['String'];\n  CAP: Scalars['String'];\n  comune: Scalars['String'];\n  provincia: Province;\n  regione: Regioni;\n};\n\nexport type AddressInput = {\n  via: Scalars['String'];\n  CAP: Scalars['String'];\n  comune: Scalars['String'];\n  provincia: Province;\n  regione: Regioni;\n};\n\nexport type AdInput = {\n  typeAd: TypeAd;\n  typeProduct: TypeProduct;\n  content: Scalars['String'];\n  address: AddressInput;\n  harvest: Scalars['Int'];\n  abv: Scalars['Float'];\n  wine?: Maybe<Scalars['ID']>;\n  wineName?: Maybe<Scalars['String']>;\n  vineyard?: Maybe<Scalars['ID']>;\n  vineyardName?: Maybe<Scalars['String']>;\n  sottoZona?: Maybe<Scalars['String']>;\n  menzione?: Maybe<Menzione>;\n  metodoProduttivo?: Maybe<MetodoProduttivo>;\n  priceFrom: Scalars['Float'];\n  priceTo: Scalars['Float'];\n  litersFrom?: Maybe<Scalars['Int']>;\n  litersTo?: Maybe<Scalars['Int']>;\n  kgFrom?: Maybe<Scalars['Int']>;\n  kgTo?: Maybe<Scalars['Int']>;\n  needsFollowUp?: Maybe<Scalars['Boolean']>;\n};\n\nexport type AdInputUpdate = {\n  _id: Scalars['ID'];\n  wine?: Maybe<Scalars['ID']>;\n  wineName?: Maybe<Scalars['String']>;\n  vineyard?: Maybe<Scalars['ID']>;\n  vineyardName?: Maybe<Scalars['String']>;\n  sottoZona?: Maybe<Scalars['String']>;\n  menzione?: Maybe<Menzione>;\n  metodoProduttivo?: Maybe<MetodoProduttivo>;\n  harvest?: Maybe<Scalars['Int']>;\n  abv?: Maybe<Scalars['Float']>;\n  priceFrom?: Maybe<Scalars['Float']>;\n  priceTo?: Maybe<Scalars['Float']>;\n  litersFrom?: Maybe<Scalars['Int']>;\n  litersTo?: Maybe<Scalars['Int']>;\n  content?: Maybe<Scalars['String']>;\n  address?: Maybe<AddressInput>;\n  isActive?: Maybe<Scalars['Boolean']>;\n  needsFollowUp?: Maybe<Scalars['Boolean']>;\n};\n\nexport type Ad = {\n  _id: Scalars['ID'];\n  postedBy: User;\n  harvest: Scalars['Int'];\n  abv: Scalars['Float'];\n  priceFrom: Scalars['Float'];\n  priceTo: Scalars['Float'];\n  content: Scalars['String'];\n  address: Address;\n  negotiations?: Maybe<Array<Negotiation>>;\n  activeNegotiations?: Maybe<Scalars['Int']>;\n  /** viewedBy: [User] */\n  numberViews?: Maybe<Scalars['Int']>;\n  typeAd: TypeAd;\n  typeProduct: TypeProduct;\n  isActive: Scalars['Boolean'];\n  datePosted?: Maybe<Scalars['String']>;\n  needsFollowUp?: Maybe<Scalars['Boolean']>;\n};\n\nexport type AdDatePostedArgs = {\n  format?: Maybe<Scalars['String']>;\n};\n\nexport type AdWine = Ad & {\n  __typename?: 'AdWine';\n  _id: Scalars['ID'];\n  postedBy: User;\n  wineName: Scalars['String'];\n  wine?: Maybe<Wine>;\n  sottoZona?: Maybe<Scalars['String']>;\n  menzione?: Maybe<Menzione>;\n  metodoProduttivo?: Maybe<MetodoProduttivo>;\n  harvest: Scalars['Int'];\n  abv: Scalars['Float'];\n  priceFrom: Scalars['Float'];\n  priceTo: Scalars['Float'];\n  litersFrom?: Maybe<Scalars['Int']>;\n  litersTo?: Maybe<Scalars['Int']>;\n  content: Scalars['String'];\n  address: Address;\n  negotiations?: Maybe<Array<Negotiation>>;\n  activeNegotiations?: Maybe<Scalars['Int']>;\n  /** viewedBy: [User] */\n  numberViews?: Maybe<Scalars['Int']>;\n  typeAd: TypeAd;\n  typeProduct: TypeProduct;\n  isActive: Scalars['Boolean'];\n  datePosted?: Maybe<Scalars['String']>;\n  needsFollowUp?: Maybe<Scalars['Boolean']>;\n};\n\nexport type AdWineDatePostedArgs = {\n  format?: Maybe<Scalars['String']>;\n};\n\nexport type AdGrape = Ad & {\n  __typename?: 'AdGrape';\n  _id: Scalars['ID'];\n  postedBy: User;\n  vineyardName: Scalars['String'];\n  vineyard?: Maybe<Vineyard>;\n  harvest: Scalars['Int'];\n  abv: Scalars['Float'];\n  priceFrom: Scalars['Float'];\n  priceTo: Scalars['Float'];\n  kgFrom: Scalars['Int'];\n  kgTo: Scalars['Int'];\n  content: Scalars['String'];\n  address: Address;\n  negotiations?: Maybe<Array<Negotiation>>;\n  activeNegotiations?: Maybe<Scalars['Int']>;\n  /** viewedBy: [User] */\n  numberViews?: Maybe<Scalars['Int']>;\n  typeAd: TypeAd;\n  typeProduct: TypeProduct;\n  isActive: Scalars['Boolean'];\n  datePosted?: Maybe<Scalars['String']>;\n  needsFollowUp?: Maybe<Scalars['Boolean']>;\n};\n\nexport type AdGrapeDatePostedArgs = {\n  format?: Maybe<Scalars['String']>;\n};\n\nexport type AdsResult = {\n  __typename?: 'AdsResult';\n  ads?: Maybe<Array<Maybe<Ad>>>;\n  pageCount?: Maybe<Scalars['Int']>;\n};\n\nexport type AdPayload = {\n  __typename?: 'AdPayload';\n  response?: Maybe<Ad>;\n  errors?: Maybe<Array<Maybe<Errors>>>;\n};\n\nexport type Query = {\n  __typename?: 'Query';\n  ad?: Maybe<Ad>;\n  ads?: Maybe<AdsResult>;\n  isLoggedIn: Scalars['Boolean'];\n  me?: Maybe<User>;\n  message?: Maybe<Message>;\n  messages?: Maybe<Array<Message>>;\n  messagesForNegotiation?: Maybe<Array<Message>>;\n  messagesToUser?: Maybe<Array<Message>>;\n  negotiation?: Maybe<Negotiation>;\n  negotiations?: Maybe<NegotiationResult>;\n  negotiationsForAd?: Maybe<Array<Negotiation>>;\n  negotiationsWithUser?: Maybe<Array<Negotiation>>;\n  notification?: Maybe<Notification>;\n  review?: Maybe<Review>;\n  reviews?: Maybe<ReviewResult>;\n  searchedWine?: Maybe<WineSearched>;\n  user?: Maybe<User>;\n  users?: Maybe<Array<User>>;\n  vineyard?: Maybe<Vineyard>;\n  vineyards?: Maybe<Array<Vineyard>>;\n  wine?: Maybe<Wine>;\n  wines?: Maybe<Array<Wine>>;\n};\n\nexport type QueryAdArgs = {\n  id: Scalars['ID'];\n};\n\nexport type QueryAdsArgs = {\n  typeAd: TypeAd;\n  typeProduct: TypeProduct;\n  wineName?: Maybe<Scalars['String']>;\n  vineyardName?: Maybe<Scalars['String']>;\n  offset?: Maybe<Scalars['Int']>;\n  orderBy?: Maybe<QueryOrderBy>;\n  limit?: Maybe<Scalars['Int']>;\n};\n\nexport type QueryMessageArgs = {\n  id: Scalars['ID'];\n};\n\nexport type QueryMessagesForNegotiationArgs = {\n  negotiation: Scalars['ID'];\n};\n\nexport type QueryMessagesToUserArgs = {\n  sentTo: Scalars['ID'];\n};\n\nexport type QueryNegotiationArgs = {\n  id: Scalars['ID'];\n};\n\nexport type QueryNegotiationsArgs = {\n  offset?: Maybe<Scalars['Int']>;\n  orderBy?: Maybe<QueryOrderBy>;\n  limit?: Maybe<Scalars['Int']>;\n};\n\nexport type QueryNegotiationsForAdArgs = {\n  ad: Scalars['ID'];\n};\n\nexport type QueryNegotiationsWithUserArgs = {\n  forUserAd: Scalars['ID'];\n};\n\nexport type QueryReviewArgs = {\n  id: Scalars['ID'];\n};\n\nexport type QueryReviewsArgs = {\n  offset?: Maybe<Scalars['Int']>;\n  orderBy?: Maybe<QueryOrderBy>;\n  limit?: Maybe<Scalars['Int']>;\n};\n\nexport type QueryUserArgs = {\n  id: Scalars['ID'];\n};\n\nexport type QueryVineyardArgs = {\n  id: Scalars['ID'];\n};\n\nexport type QueryWineArgs = {\n  id: Scalars['ID'];\n};\n\nexport type Mutation = {\n  __typename?: 'Mutation';\n  createAd?: Maybe<AdPayload>;\n  updateAd?: Maybe<AdPayload>;\n  deleteAd?: Maybe<AdPayload>;\n  saveAd?: Maybe<AdPayload>;\n  createMessage?: Maybe<MessagePayload>;\n  createNegotiation?: Maybe<NegotiationPayload>;\n  updateNegotiation?: Maybe<NegotiationPayload>;\n  deleteNegotiation?: Maybe<NegotiationPayload>;\n  createReview?: Maybe<ReviewPayload>;\n  updateReview?: Maybe<ReviewPayload>;\n  deleteReview?: Maybe<ReviewPayload>;\n  createUser?: Maybe<AuthUserPayload>;\n  updateUser?: Maybe<UserPayload>;\n  deleteUser?: Maybe<UserPayload>;\n  login?: Maybe<AuthUserPayload>;\n  createWine?: Maybe<WinePayload>;\n  updateWine?: Maybe<WinePayload>;\n  deleteWine?: Maybe<WinePayload>;\n  createVineyard?: Maybe<VineyardPayload>;\n  updateVineyard?: Maybe<VineyardPayload>;\n  deleteVineyard?: Maybe<VineyardPayload>;\n};\n\nexport type MutationCreateAdArgs = {\n  input: AdInput;\n};\n\nexport type MutationUpdateAdArgs = {\n  input: AdInputUpdate;\n};\n\nexport type MutationDeleteAdArgs = {\n  id: Scalars['ID'];\n};\n\nexport type MutationSaveAdArgs = {\n  id: Scalars['ID'];\n};\n\nexport type MutationCreateMessageArgs = {\n  message: MessageInput;\n};\n\nexport type MutationCreateNegotiationArgs = {\n  negotiation: NegotiationInput;\n};\n\nexport type MutationUpdateNegotiationArgs = {\n  negotiation: NegotiationInputUpdate;\n};\n\nexport type MutationDeleteNegotiationArgs = {\n  id: Scalars['ID'];\n};\n\nexport type MutationCreateReviewArgs = {\n  review: ReviewInput;\n};\n\nexport type MutationUpdateReviewArgs = {\n  review: ReviewInputUpdate;\n};\n\nexport type MutationDeleteReviewArgs = {\n  id: Scalars['ID'];\n};\n\nexport type MutationCreateUserArgs = {\n  user: UserInput;\n};\n\nexport type MutationUpdateUserArgs = {\n  user: UserInputUpdate;\n};\n\nexport type MutationDeleteUserArgs = {\n  id: Scalars['ID'];\n};\n\nexport type MutationLoginArgs = {\n  email: Scalars['String'];\n  password: Scalars['String'];\n};\n\nexport type MutationCreateWineArgs = {\n  wine: WineInput;\n};\n\nexport type MutationUpdateWineArgs = {\n  wine: WineInputUpdate;\n};\n\nexport type MutationDeleteWineArgs = {\n  id: Scalars['ID'];\n};\n\nexport type MutationCreateVineyardArgs = {\n  vineyard: VineyardInput;\n};\n\nexport type MutationUpdateVineyardArgs = {\n  vineyard: VineyardInputUpdate;\n};\n\nexport type MutationDeleteVineyardArgs = {\n  id: Scalars['ID'];\n};\n\nexport type Subscription = {\n  __typename?: 'Subscription';\n  adPostedFollowUp: Ad;\n  adRemoved: Ad;\n  messageSent: Message;\n  negotiationCreated: Negotiation;\n  negotiationClosed: Ad;\n  reviewCreated: Review;\n};\n\nexport type MessageInput = {\n  content: Scalars['String'];\n  sentTo: Scalars['ID'];\n  negotiation: Scalars['ID'];\n};\n\nexport type Message = {\n  __typename?: 'Message';\n  _id: Scalars['ID'];\n  content: Scalars['String'];\n  sentBy: User;\n  sentTo: User;\n  negotiation: Negotiation;\n  dateSent?: Maybe<Scalars['String']>;\n};\n\nexport type MessageDateSentArgs = {\n  format?: Maybe<Scalars['String']>;\n};\n\nexport type MessagePayload = {\n  __typename?: 'MessagePayload';\n  response?: Maybe<Message>;\n  errors?: Maybe<Array<Maybe<Errors>>>;\n};\n\nexport type NegotiationInput = {\n  ad: Scalars['ID'];\n  forUserAd: Scalars['ID'];\n  type: TypeAd;\n};\n\nexport type NegotiationInputUpdate = {\n  _id: Scalars['ID'];\n  isConcluded?: Maybe<Scalars['Boolean']>;\n};\n\nexport type Negotiation = {\n  __typename?: 'Negotiation';\n  _id: Scalars['ID'];\n  createdBy: User;\n  ad: Ad;\n  forUserAd: User;\n  messages?: Maybe<Array<Message>>;\n  isConcluded: Scalars['Boolean'];\n  dateCreated?: Maybe<Scalars['String']>;\n  review?: Maybe<Array<Maybe<Review>>>;\n  type: TypeAd;\n};\n\nexport type NegotiationDateCreatedArgs = {\n  format?: Maybe<Scalars['String']>;\n};\n\nexport type NegotiationResult = {\n  __typename?: 'NegotiationResult';\n  negotiations?: Maybe<Array<Maybe<Negotiation>>>;\n  pageCount?: Maybe<Scalars['Int']>;\n};\n\nexport type NegotiationPayload = {\n  __typename?: 'NegotiationPayload';\n  response?: Maybe<Negotiation>;\n  errors?: Maybe<Array<Maybe<Errors>>>;\n};\n\nexport type ReviewInput = {\n  negotiation: Scalars['ID'];\n  forUser: Scalars['ID'];\n  rating: Rating;\n  content: Scalars['String'];\n  type: TypeAd;\n};\n\nexport type ReviewInputUpdate = {\n  _id: Scalars['ID'];\n  rating?: Maybe<Rating>;\n  content?: Maybe<Scalars['String']>;\n};\n\nexport type ReviewResult = {\n  __typename?: 'ReviewResult';\n  reviews?: Maybe<Array<Maybe<Review>>>;\n  pageCount?: Maybe<Scalars['Int']>;\n};\n\nexport type Review = {\n  __typename?: 'Review';\n  _id: Scalars['ID'];\n  createdBy: User;\n  negotiation: Negotiation;\n  forUser: User;\n  rating: Rating;\n  dateCreated?: Maybe<Scalars['String']>;\n  content: Scalars['String'];\n  type: TypeAd;\n};\n\nexport type ReviewDateCreatedArgs = {\n  format?: Maybe<Scalars['String']>;\n};\n\nexport type ReviewPayload = {\n  __typename?: 'ReviewPayload';\n  response?: Maybe<Review>;\n  errors?: Maybe<Array<Maybe<Errors>>>;\n};\n\nexport type ProducedWines = {\n  __typename?: 'ProducedWines';\n  wine: Wine;\n  bottlesProduced: Scalars['Int'];\n  metodoProduttivo: MetodoProduttivo;\n};\n\nexport type OwnedVineyards = {\n  __typename?: 'OwnedVineyards';\n  vineyard: Vineyard;\n  tonsProduced: Scalars['Int'];\n  metodoProduttivo: MetodoProduttivo;\n};\n\nexport type ProducedWinesInput = {\n  wine: Scalars['ID'];\n  bottlesProduced?: Maybe<Scalars['Int']>;\n  metodoProduttivo?: Maybe<MetodoProduttivo>;\n};\n\nexport type OwnedVineyardsInput = {\n  vineyard: Scalars['ID'];\n  tonsProduced?: Maybe<Scalars['Int']>;\n  metodoProduttivo?: Maybe<MetodoProduttivo>;\n};\n\nexport type UserInput = {\n  email: Scalars['String'];\n  password: Scalars['String'];\n  firstName: Scalars['String'];\n  lastName: Scalars['String'];\n  pIva: Scalars['String'];\n  phoneNumber: Scalars['String'];\n  address: AddressInput;\n  hideContact: Scalars['Boolean'];\n  producedWines?: Maybe<ProducedWinesInput>;\n  ownedVineyards?: Maybe<OwnedVineyardsInput>;\n};\n\nexport type UserInputUpdate = {\n  _id: Scalars['ID'];\n  email?: Maybe<Scalars['String']>;\n  password?: Maybe<Scalars['String']>;\n  firstName?: Maybe<Scalars['String']>;\n  lastName?: Maybe<Scalars['String']>;\n  pIva?: Maybe<Scalars['String']>;\n  phoneNumber?: Maybe<Scalars['String']>;\n  address?: Maybe<AddressInput>;\n  isVerified?: Maybe<Scalars['Boolean']>;\n  isPremium?: Maybe<Scalars['Boolean']>;\n  hideContact: Scalars['Boolean'];\n  producedWines?: Maybe<ProducedWinesInput>;\n  ownedVineyards?: Maybe<OwnedVineyardsInput>;\n};\n\nexport type User = {\n  __typename?: 'User';\n  _id: Scalars['ID'];\n  email: Scalars['String'];\n  firstName: Scalars['String'];\n  lastName: Scalars['String'];\n  pIva: Scalars['String'];\n  phoneNumber: Scalars['String'];\n  address: Address;\n  isVerified: Scalars['Boolean'];\n  isPremium?: Maybe<Scalars['Boolean']>;\n  isAdmin: Scalars['Boolean'];\n  hideContact: Scalars['Boolean'];\n  ads?: Maybe<AdsResult>;\n  savedAds?: Maybe<Array<Ad>>;\n  messages?: Maybe<Array<Message>>;\n  negotiations?: Maybe<NegotiationResult>;\n  reviews?: Maybe<ReviewResult>;\n  adsRemaining?: Maybe<Scalars['Int']>;\n  dateCreated?: Maybe<Scalars['String']>;\n  producedWines?: Maybe<ProducedWines>;\n  ownedVineyards?: Maybe<OwnedVineyards>;\n};\n\nexport type UserAdsArgs = {\n  offset?: Maybe<Scalars['Int']>;\n  orderBy?: Maybe<QueryOrderBy>;\n  limit?: Maybe<Scalars['Int']>;\n};\n\nexport type UserNegotiationsArgs = {\n  offset?: Maybe<Scalars['Int']>;\n  orderBy?: Maybe<QueryOrderBy>;\n  limit?: Maybe<Scalars['Int']>;\n};\n\nexport type UserReviewsArgs = {\n  offset?: Maybe<Scalars['Int']>;\n  orderBy?: Maybe<QueryOrderBy>;\n  limit?: Maybe<Scalars['Int']>;\n};\n\nexport type UserDateCreatedArgs = {\n  format?: Maybe<Scalars['String']>;\n};\n\nexport type AuthUser = {\n  __typename?: 'AuthUser';\n  token: Scalars['String'];\n  user: User;\n};\n\nexport type AuthUserPayload = {\n  __typename?: 'AuthUserPayload';\n  response?: Maybe<AuthUser>;\n  errors?: Maybe<Array<Maybe<Errors>>>;\n};\n\nexport type UserPayload = {\n  __typename?: 'UserPayload';\n  response?: Maybe<User>;\n  errors?: Maybe<Array<Maybe<Errors>>>;\n};\n\nexport type WineInput = {\n  denominazioneVino: Scalars['String'];\n  aka?: Maybe<Scalars['String']>;\n  espressioneComunitaria: EspressioneComunitaria;\n  denominazioneZona: DenomZona;\n  regione: Array<Regioni>;\n};\n\nexport type WineInputUpdate = {\n  _id: Scalars['ID'];\n  denominazioneVino?: Maybe<Scalars['String']>;\n  aka?: Maybe<Scalars['String']>;\n  espressioneComunitaria?: Maybe<EspressioneComunitaria>;\n  denominazioneZona?: Maybe<DenomZona>;\n  regione?: Maybe<Array<Maybe<Regioni>>>;\n};\n\nexport type Wine = {\n  __typename?: 'Wine';\n  _id: Scalars['ID'];\n  denominazioneVino: Scalars['String'];\n  aka?: Maybe<Scalars['String']>;\n  espressioneComunitaria: EspressioneComunitaria;\n  denominazioneZona: DenomZona;\n  regione: Array<Regioni>;\n};\n\nexport type WinePayload = {\n  __typename?: 'WinePayload';\n  response?: Maybe<Wine>;\n  errors?: Maybe<Array<Maybe<Errors>>>;\n};\n\nexport type Vineyard = {\n  __typename?: 'Vineyard';\n  _id: Scalars['ID'];\n  name: Scalars['String'];\n  colore?: Maybe<Colore>;\n};\n\nexport type VineyardInput = {\n  name: Scalars['String'];\n  colore?: Maybe<Colore>;\n};\n\nexport type VineyardInputUpdate = {\n  _id: Scalars['ID'];\n  name?: Maybe<Scalars['String']>;\n  colore?: Maybe<Colore>;\n};\n\nexport type VineyardPayload = {\n  __typename?: 'VineyardPayload';\n  response?: Maybe<Vineyard>;\n  errors?: Maybe<Array<Maybe<Errors>>>;\n};\n\nexport enum Province {\n  AG = 'AG',\n  AL = 'AL',\n  AN = 'AN',\n  AO = 'AO',\n  AP = 'AP',\n  AQ = 'AQ',\n  AR = 'AR',\n  AT = 'AT',\n  AV = 'AV',\n  BA = 'BA',\n  BG = 'BG',\n  BI = 'BI',\n  BL = 'BL',\n  BN = 'BN',\n  BO = 'BO',\n  BR = 'BR',\n  BS = 'BS',\n  BT = 'BT',\n  BZ = 'BZ',\n  CA = 'CA',\n  CB = 'CB',\n  CE = 'CE',\n  CH = 'CH',\n  CL = 'CL',\n  CN = 'CN',\n  CO = 'CO',\n  CR = 'CR',\n  CS = 'CS',\n  CT = 'CT',\n  CZ = 'CZ',\n  EN = 'EN',\n  FC = 'FC',\n  FE = 'FE',\n  FG = 'FG',\n  FI = 'FI',\n  FM = 'FM',\n  FR = 'FR',\n  GE = 'GE',\n  GO = 'GO',\n  GR = 'GR',\n  IM = 'IM',\n  IS = 'IS',\n  KR = 'KR',\n  LC = 'LC',\n  LE = 'LE',\n  LI = 'LI',\n  LO = 'LO',\n  LT = 'LT',\n  LU = 'LU',\n  MB = 'MB',\n  MC = 'MC',\n  ME = 'ME',\n  MI = 'MI',\n  MN = 'MN',\n  MO = 'MO',\n  MS = 'MS',\n  MT = 'MT',\n  NA = 'NA',\n  NO = 'NO',\n  NU = 'NU',\n  OR = 'OR',\n  PA = 'PA',\n  PC = 'PC',\n  PD = 'PD',\n  PE = 'PE',\n  PG = 'PG',\n  PI = 'PI',\n  PN = 'PN',\n  PO = 'PO',\n  PR = 'PR',\n  PT = 'PT',\n  PU = 'PU',\n  PV = 'PV',\n  PZ = 'PZ',\n  RA = 'RA',\n  RC = 'RC',\n  RE = 'RE',\n  RG = 'RG',\n  RI = 'RI',\n  RM = 'RM',\n  RN = 'RN',\n  RO = 'RO',\n  SA = 'SA',\n  SI = 'SI',\n  SO = 'SO',\n  SP = 'SP',\n  SR = 'SR',\n  SS = 'SS',\n  SU = 'SU',\n  SV = 'SV',\n  TA = 'TA',\n  TE = 'TE',\n  TN = 'TN',\n  TO = 'TO',\n  TP = 'TP',\n  TR = 'TR',\n  TS = 'TS',\n  TV = 'TV',\n  UD = 'UD',\n  VA = 'VA',\n  VB = 'VB',\n  VC = 'VC',\n  VE = 'VE',\n  VI = 'VI',\n  VR = 'VR',\n  VT = 'VT',\n  VV = 'VV',\n}\n\nexport enum Regioni {\n  Abruzzo = 'ABRUZZO',\n  Basilicata = 'BASILICATA',\n  Calabria = 'CALABRIA',\n  Campania = 'CAMPANIA',\n  Emilia = 'EMILIA',\n  Friuli = 'FRIULI',\n  Lazio = 'LAZIO',\n  Liguria = 'LIGURIA',\n  Lombardia = 'LOMBARDIA',\n  Marche = 'MARCHE',\n  Molise = 'MOLISE',\n  Piemonte = 'PIEMONTE',\n  Puglia = 'PUGLIA',\n  Sardegna = 'SARDEGNA',\n  Sicilia = 'SICILIA',\n  Toscana = 'TOSCANA',\n  Trentino = 'TRENTINO',\n  Umbria = 'UMBRIA',\n  Valdaosta = 'VALDAOSTA',\n  Veneto = 'VENETO',\n}\n\nexport enum TypeAd {\n  Sell = 'SELL',\n  Buy = 'BUY',\n}\n\nexport enum TypeProduct {\n  AdWine = 'AdWine',\n  AdGrape = 'AdGrape',\n}\n\nexport enum Menzione {\n  Classico = 'CLASSICO',\n  Riserva = 'RISERVA',\n  Superiore = 'SUPERIORE',\n  Vigna = 'VIGNA',\n}\n\nexport enum MetodoProduttivo {\n  Convenzionale = 'CONVENZIONALE',\n  Biologico = 'BIOLOGICO',\n  Biodinamico = 'BIODINAMICO',\n  Naturale = 'NATURALE',\n  Vegano = 'VEGANO',\n}\n\nexport enum Rating {\n  Poor = 'POOR',\n  Average = 'AVERAGE',\n  Ok = 'OK',\n  Good = 'GOOD',\n  Perfect = 'PERFECT',\n}\n\nexport enum Colore {\n  Bianca = 'BIANCA',\n  Rossa = 'ROSSA',\n}\n\nexport enum EspressioneComunitaria {\n  Dop = 'DOP',\n  Igp = 'IGP',\n  Nd = 'ND',\n}\n\nexport enum DenomZona {\n  Doc = 'DOC',\n  Docg = 'DOCG',\n  Igt = 'IGT',\n  Varietale = 'VARIETALE',\n  Vino = 'VINO',\n}\n\nexport enum QueryOrderBy {\n  CreatedAtAsc = 'createdAt_ASC',\n  CreatedAtDesc = 'createdAt_DESC',\n  PriceAsc = 'price_ASC',\n  PriceDesc = 'price_DESC',\n}\n\nexport type Errors = {\n  __typename?: 'Errors';\n  name?: Maybe<Scalars['String']>;\n  text?: Maybe<Scalars['String']>;\n};\n\nexport enum AlertStatus {\n  Success = 'success',\n  Warning = 'warning',\n  Info = 'info',\n  Error = 'error',\n}\n\nexport type WineSearched = {\n  __typename?: 'WineSearched';\n  typeAd?: Maybe<TypeAd>;\n  typeProduct?: Maybe<TypeProduct>;\n  wineName?: Maybe<Scalars['String']>;\n  harvest?: Maybe<Scalars['Int']>;\n  abv?: Maybe<Scalars['Float']>;\n  price?: Maybe<Scalars['Float']>;\n  liters?: Maybe<Scalars['Int']>;\n  isPost?: Maybe<Scalars['Boolean']>;\n};\n\nexport type Notification = {\n  __typename?: 'Notification';\n  type?: AlertStatus;\n  message?: Maybe<Scalars['String']>;\n};\n\nexport type LoginMutationVariables = Exact<{\n  email: Scalars['String'];\n  password: Scalars['String'];\n}>;\n\nexport type LoginMutation = { __typename?: 'Mutation' } & {\n  login?: Maybe<\n    { __typename?: 'AuthUserPayload' } & {\n      response?: Maybe<\n        { __typename?: 'AuthUser' } & Pick<AuthUser, 'token'> & {\n            user: { __typename?: 'User' } & Pick<User, '_id' | 'firstName'>;\n          }\n      >;\n      errors?: Maybe<\n        Array<Maybe<{ __typename?: 'Errors' } & Pick<Errors, 'name' | 'text'>>>\n      >;\n    }\n  >;\n};\n\nexport type CreateUserMutationVariables = Exact<{\n  userInput: UserInput;\n}>;\n\nexport type CreateUserMutation = { __typename?: 'Mutation' } & {\n  createUser?: Maybe<\n    { __typename?: 'AuthUserPayload' } & {\n      response?: Maybe<\n        { __typename?: 'AuthUser' } & Pick<AuthUser, 'token'> & {\n            user: { __typename?: 'User' } & Pick<User, '_id' | 'firstName'>;\n          }\n      >;\n      errors?: Maybe<\n        Array<Maybe<{ __typename?: 'Errors' } & Pick<Errors, 'name' | 'text'>>>\n      >;\n    }\n  >;\n};\n\nexport type UpdateUserMutationVariables = Exact<{\n  user: UserInputUpdate;\n}>;\n\nexport type UpdateUserMutation = { __typename?: 'Mutation' } & {\n  updateUser?: Maybe<\n    { __typename?: 'UserPayload' } & {\n      response?: Maybe<\n        { __typename?: 'User' } & Pick<User, '_id' | 'firstName'>\n      >;\n      errors?: Maybe<\n        Array<Maybe<{ __typename?: 'Errors' } & Pick<Errors, 'name' | 'text'>>>\n      >;\n    }\n  >;\n};\n\nexport type DeleteUserMutationVariables = Exact<{\n  id: Scalars['ID'];\n}>;\n\nexport type DeleteUserMutation = { __typename?: 'Mutation' } & {\n  deleteUser?: Maybe<\n    { __typename?: 'UserPayload' } & {\n      response?: Maybe<\n        { __typename?: 'User' } & Pick<User, '_id' | 'firstName'>\n      >;\n      errors?: Maybe<\n        Array<Maybe<{ __typename?: 'Errors' } & Pick<Errors, 'name' | 'text'>>>\n      >;\n    }\n  >;\n};\n\nexport type CreateAdWineMutationVariables = Exact<{\n  input: AdInput;\n}>;\n\nexport type CreateAdWineMutation = { __typename?: 'Mutation' } & {\n  createAd?: Maybe<\n    { __typename?: 'AdPayload' } & {\n      response?: Maybe<\n        | ({ __typename?: 'AdWine' } & Pick<\n            AdWine,\n            | 'wineName'\n            | 'litersFrom'\n            | 'litersTo'\n            | 'metodoProduttivo'\n            | '_id'\n            | 'needsFollowUp'\n            | 'harvest'\n            | 'abv'\n            | 'priceFrom'\n            | 'priceTo'\n            | 'typeAd'\n            | 'activeNegotiations'\n            | 'datePosted'\n          > & {\n              wine?: Maybe<\n                { __typename?: 'Wine' } & Pick<\n                  Wine,\n                  'denominazioneZona' | 'regione'\n                >\n              >;\n              postedBy: { __typename?: 'User' } & Pick<\n                User,\n                '_id' | 'firstName' | 'lastName' | 'hideContact'\n              >;\n              address: { __typename?: 'Address' } & Pick<\n                Address,\n                'regione' | 'provincia' | 'comune'\n              >;\n            })\n        | ({ __typename?: 'AdGrape' } & Pick<\n            AdGrape,\n            | '_id'\n            | 'needsFollowUp'\n            | 'harvest'\n            | 'abv'\n            | 'priceFrom'\n            | 'priceTo'\n            | 'typeAd'\n            | 'activeNegotiations'\n            | 'datePosted'\n          > & {\n              postedBy: { __typename?: 'User' } & Pick<\n                User,\n                '_id' | 'firstName' | 'lastName' | 'hideContact'\n              >;\n              address: { __typename?: 'Address' } & Pick<\n                Address,\n                'regione' | 'provincia' | 'comune'\n              >;\n            })\n      >;\n      errors?: Maybe<\n        Array<Maybe<{ __typename?: 'Errors' } & Pick<Errors, 'name' | 'text'>>>\n      >;\n    }\n  >;\n};\n\nexport type UpdateAdWineMutationVariables = Exact<{\n  input: AdInputUpdate;\n}>;\n\nexport type UpdateAdWineMutation = { __typename?: 'Mutation' } & {\n  updateAd?: Maybe<\n    { __typename?: 'AdPayload' } & {\n      response?: Maybe<\n        | ({ __typename?: 'AdWine' } & Pick<\n            AdWine,\n            | 'wineName'\n            | 'litersFrom'\n            | 'litersTo'\n            | 'metodoProduttivo'\n            | '_id'\n            | 'needsFollowUp'\n            | 'harvest'\n            | 'abv'\n            | 'priceFrom'\n            | 'priceTo'\n            | 'typeAd'\n            | 'activeNegotiations'\n            | 'datePosted'\n          > & {\n              wine?: Maybe<\n                { __typename?: 'Wine' } & Pick<\n                  Wine,\n                  'denominazioneZona' | 'regione'\n                >\n              >;\n              postedBy: { __typename?: 'User' } & Pick<\n                User,\n                '_id' | 'firstName' | 'lastName' | 'hideContact'\n              >;\n              address: { __typename?: 'Address' } & Pick<\n                Address,\n                'regione' | 'provincia' | 'comune'\n              >;\n            })\n        | ({ __typename?: 'AdGrape' } & Pick<\n            AdGrape,\n            | '_id'\n            | 'needsFollowUp'\n            | 'harvest'\n            | 'abv'\n            | 'priceFrom'\n            | 'priceTo'\n            | 'typeAd'\n            | 'activeNegotiations'\n            | 'datePosted'\n          > & {\n              postedBy: { __typename?: 'User' } & Pick<\n                User,\n                '_id' | 'firstName' | 'lastName' | 'hideContact'\n              >;\n              address: { __typename?: 'Address' } & Pick<\n                Address,\n                'regione' | 'provincia' | 'comune'\n              >;\n            })\n      >;\n      errors?: Maybe<\n        Array<Maybe<{ __typename?: 'Errors' } & Pick<Errors, 'name' | 'text'>>>\n      >;\n    }\n  >;\n};\n\nexport type SaveAdMutationVariables = Exact<{\n  id: Scalars['ID'];\n}>;\n\nexport type SaveAdMutation = { __typename?: 'Mutation' } & {\n  saveAd?: Maybe<\n    { __typename?: 'AdPayload' } & {\n      response?: Maybe<\n        | ({ __typename?: 'AdWine' } & Pick<\n            AdWine,\n            | 'wineName'\n            | 'litersFrom'\n            | 'litersTo'\n            | '_id'\n            | 'harvest'\n            | 'abv'\n            | 'priceFrom'\n            | 'priceTo'\n            | 'datePosted'\n          > & {\n              wine?: Maybe<\n                { __typename?: 'Wine' } & Pick<Wine, 'denominazioneZona'>\n              >;\n            })\n        | ({ __typename?: 'AdGrape' } & Pick<\n            AdGrape,\n            '_id' | 'harvest' | 'abv' | 'priceFrom' | 'priceTo' | 'datePosted'\n          >)\n      >;\n      errors?: Maybe<\n        Array<Maybe<{ __typename?: 'Errors' } & Pick<Errors, 'name' | 'text'>>>\n      >;\n    }\n  >;\n};\n\nexport type DeleteAdMutationVariables = Exact<{\n  id: Scalars['ID'];\n}>;\n\nexport type DeleteAdMutation = { __typename?: 'Mutation' } & {\n  deleteAd?: Maybe<\n    { __typename?: 'AdPayload' } & {\n      response?: Maybe<\n        | ({ __typename?: 'AdWine' } & Pick<AdWine, '_id'>)\n        | ({ __typename?: 'AdGrape' } & Pick<AdGrape, '_id'>)\n      >;\n      errors?: Maybe<\n        Array<Maybe<{ __typename?: 'Errors' } & Pick<Errors, 'name' | 'text'>>>\n      >;\n    }\n  >;\n};\n\nexport type CreateNegotiationMutationVariables = Exact<{\n  negotiation: NegotiationInput;\n}>;\n\nexport type CreateNegotiationMutation = { __typename?: 'Mutation' } & {\n  createNegotiation?: Maybe<\n    { __typename?: 'NegotiationPayload' } & {\n      response?: Maybe<\n        { __typename?: 'Negotiation' } & NegotiationDetailsFragment\n      >;\n      errors?: Maybe<\n        Array<Maybe<{ __typename?: 'Errors' } & Pick<Errors, 'name' | 'text'>>>\n      >;\n    }\n  >;\n};\n\nexport type UpdateNegotiationMutationVariables = Exact<{\n  negotiation: NegotiationInputUpdate;\n}>;\n\nexport type UpdateNegotiationMutation = { __typename?: 'Mutation' } & {\n  updateNegotiation?: Maybe<\n    { __typename?: 'NegotiationPayload' } & {\n      response?: Maybe<\n        { __typename?: 'Negotiation' } & NegotiationDetailsFragment\n      >;\n      errors?: Maybe<\n        Array<Maybe<{ __typename?: 'Errors' } & Pick<Errors, 'name' | 'text'>>>\n      >;\n    }\n  >;\n};\n\nexport type DeleteNegotiationMutationVariables = Exact<{\n  id: Scalars['ID'];\n}>;\n\nexport type DeleteNegotiationMutation = { __typename?: 'Mutation' } & {\n  deleteNegotiation?: Maybe<\n    { __typename?: 'NegotiationPayload' } & {\n      response?: Maybe<\n        { __typename?: 'Negotiation' } & Pick<Negotiation, '_id'>\n      >;\n      errors?: Maybe<\n        Array<Maybe<{ __typename?: 'Errors' } & Pick<Errors, 'name' | 'text'>>>\n      >;\n    }\n  >;\n};\n\nexport type CreateMessageMutationVariables = Exact<{\n  message: MessageInput;\n}>;\n\nexport type CreateMessageMutation = { __typename?: 'Mutation' } & {\n  createMessage?: Maybe<\n    { __typename?: 'MessagePayload' } & {\n      response?: Maybe<{ __typename?: 'Message' } & MessageDetailsFragment>;\n      errors?: Maybe<\n        Array<Maybe<{ __typename?: 'Errors' } & Pick<Errors, 'name' | 'text'>>>\n      >;\n    }\n  >;\n};\n\nexport type CreateReviewMutationVariables = Exact<{\n  review: ReviewInput;\n}>;\n\nexport type CreateReviewMutation = { __typename?: 'Mutation' } & {\n  createReview?: Maybe<\n    { __typename?: 'ReviewPayload' } & {\n      response?: Maybe<{ __typename?: 'Review' } & ReviewDetailsFragment>;\n      errors?: Maybe<\n        Array<Maybe<{ __typename?: 'Errors' } & Pick<Errors, 'name' | 'text'>>>\n      >;\n    }\n  >;\n};\n\ntype AdDetails_AdWine_Fragment = { __typename?: 'AdWine' } & Pick<\n  AdWine,\n  | 'wineName'\n  | 'litersFrom'\n  | 'litersTo'\n  | 'metodoProduttivo'\n  | '_id'\n  | 'needsFollowUp'\n  | 'harvest'\n  | 'abv'\n  | 'priceFrom'\n  | 'priceTo'\n  | 'typeAd'\n  | 'activeNegotiations'\n  | 'datePosted'\n> & {\n    wine?: Maybe<\n      { __typename?: 'Wine' } & Pick<Wine, 'denominazioneZona' | 'regione'>\n    >;\n    postedBy: { __typename?: 'User' } & Pick<\n      User,\n      '_id' | 'firstName' | 'lastName' | 'hideContact'\n    >;\n    address: { __typename?: 'Address' } & Pick<\n      Address,\n      'regione' | 'provincia'\n    >;\n  };\n\ntype AdDetails_AdGrape_Fragment = { __typename?: 'AdGrape' } & Pick<\n  AdGrape,\n  | '_id'\n  | 'needsFollowUp'\n  | 'harvest'\n  | 'abv'\n  | 'priceFrom'\n  | 'priceTo'\n  | 'typeAd'\n  | 'activeNegotiations'\n  | 'datePosted'\n> & {\n    postedBy: { __typename?: 'User' } & Pick<\n      User,\n      '_id' | 'firstName' | 'lastName' | 'hideContact'\n    >;\n    address: { __typename?: 'Address' } & Pick<\n      Address,\n      'regione' | 'provincia'\n    >;\n  };\n\nexport type AdDetailsFragment =\n  | AdDetails_AdWine_Fragment\n  | AdDetails_AdGrape_Fragment;\n\nexport type NegotiationDetailsFragment = { __typename?: 'Negotiation' } & Pick<\n  Negotiation,\n  '_id' | 'type' | 'dateCreated' | 'isConcluded'\n> & {\n    createdBy: { __typename?: 'User' } & Pick<\n      User,\n      '_id' | 'firstName' | 'lastName' | 'hideContact'\n    >;\n    ad:\n      | ({ __typename?: 'AdWine' } & Pick<AdWine, 'wineName' | '_id'> & {\n            postedBy: { __typename?: 'User' } & Pick<\n              User,\n              '_id' | 'firstName' | 'lastName'\n            >;\n          })\n      | ({ __typename?: 'AdGrape' } & Pick<AdGrape, '_id'> & {\n            postedBy: { __typename?: 'User' } & Pick<\n              User,\n              '_id' | 'firstName' | 'lastName'\n            >;\n          });\n    forUserAd: { __typename?: 'User' } & Pick<\n      User,\n      '_id' | 'firstName' | 'lastName' | 'hideContact'\n    >;\n    messages?: Maybe<Array<{ __typename?: 'Message' } & Pick<Message, '_id'>>>;\n  };\n\nexport type MessageDetailsFragment = { __typename?: 'Message' } & Pick<\n  Message,\n  '_id' | 'content' | 'dateSent'\n> & {\n    sentBy: { __typename?: 'User' } & Pick<\n      User,\n      '_id' | 'firstName' | 'lastName'\n    >;\n    sentTo: { __typename?: 'User' } & Pick<\n      User,\n      '_id' | 'firstName' | 'lastName'\n    >;\n    negotiation: { __typename?: 'Negotiation' } & Pick<Negotiation, '_id'> & {\n        ad:\n          | ({ __typename?: 'AdWine' } & Pick<\n              AdWine,\n              'wineName' | 'litersFrom' | 'litersTo'\n            > & {\n                wine?: Maybe<\n                  { __typename?: 'Wine' } & Pick<Wine, 'denominazioneZona'>\n                >;\n              })\n          | { __typename?: 'AdGrape' };\n      };\n  };\n\nexport type ReviewDetailsFragment = { __typename?: 'Review' } & Pick<\n  Review,\n  '_id' | 'rating' | 'dateCreated' | 'content' | 'type'\n> & {\n    createdBy: { __typename?: 'User' } & Pick<\n      User,\n      '_id' | 'firstName' | 'lastName'\n    >;\n    negotiation: { __typename?: 'Negotiation' } & Pick<Negotiation, '_id'> & {\n        ad:\n          | ({ __typename?: 'AdWine' } & Pick<AdWine, 'wineName' | '_id'>)\n          | ({ __typename?: 'AdGrape' } & Pick<AdGrape, '_id'>);\n      };\n    forUser: { __typename?: 'User' } & Pick<\n      User,\n      '_id' | 'firstName' | 'lastName'\n    >;\n  };\n\nexport type MeQueryVariables = Exact<{\n  offset?: Maybe<Scalars['Int']>;\n  orderBy?: Maybe<QueryOrderBy>;\n  limit?: Maybe<Scalars['Int']>;\n}>;\n\nexport type MeQuery = { __typename?: 'Query' } & {\n  me?: Maybe<\n    { __typename?: 'User' } & Pick<\n      User,\n      '_id' | 'firstName' | 'lastName' | 'email'\n    > & {\n        address: { __typename?: 'Address' } & Pick<\n          Address,\n          'regione' | 'provincia' | 'comune' | 'via' | 'CAP'\n        >;\n        ads?: Maybe<\n          { __typename?: 'AdsResult' } & Pick<AdsResult, 'pageCount'> & {\n              ads?: Maybe<\n                Array<\n                  Maybe<\n                    | ({ __typename?: 'AdWine' } & Pick<\n                        AdWine,\n                        | 'wineName'\n                        | 'litersFrom'\n                        | 'litersTo'\n                        | 'metodoProduttivo'\n                        | '_id'\n                        | 'needsFollowUp'\n                        | 'harvest'\n                        | 'abv'\n                        | 'priceFrom'\n                        | 'priceTo'\n                        | 'typeAd'\n                        | 'activeNegotiations'\n                        | 'datePosted'\n                      > & {\n                          wine?: Maybe<\n                            { __typename?: 'Wine' } & Pick<\n                              Wine,\n                              'denominazioneZona' | 'regione'\n                            >\n                          >;\n                          postedBy: { __typename?: 'User' } & Pick<\n                            User,\n                            '_id' | 'firstName' | 'lastName' | 'hideContact'\n                          >;\n                          address: { __typename?: 'Address' } & Pick<\n                            Address,\n                            'regione' | 'provincia' | 'comune'\n                          >;\n                        })\n                    | ({ __typename?: 'AdGrape' } & Pick<\n                        AdGrape,\n                        | '_id'\n                        | 'needsFollowUp'\n                        | 'harvest'\n                        | 'abv'\n                        | 'priceFrom'\n                        | 'priceTo'\n                        | 'typeAd'\n                        | 'activeNegotiations'\n                        | 'datePosted'\n                      > & {\n                          postedBy: { __typename?: 'User' } & Pick<\n                            User,\n                            '_id' | 'firstName' | 'lastName' | 'hideContact'\n                          >;\n                          address: { __typename?: 'Address' } & Pick<\n                            Address,\n                            'regione' | 'provincia' | 'comune'\n                          >;\n                        })\n                  >\n                >\n              >;\n            }\n        >;\n        savedAds?: Maybe<\n          Array<\n            | ({ __typename?: 'AdWine' } & Pick<\n                AdWine,\n                | 'wineName'\n                | 'litersFrom'\n                | 'litersTo'\n                | 'metodoProduttivo'\n                | '_id'\n                | 'needsFollowUp'\n                | 'harvest'\n                | 'abv'\n                | 'priceFrom'\n                | 'priceTo'\n                | 'typeAd'\n                | 'activeNegotiations'\n                | 'datePosted'\n              > & {\n                  wine?: Maybe<\n                    { __typename?: 'Wine' } & Pick<\n                      Wine,\n                      'denominazioneZona' | 'regione'\n                    >\n                  >;\n                  postedBy: { __typename?: 'User' } & Pick<\n                    User,\n                    '_id' | 'firstName' | 'lastName' | 'hideContact'\n                  >;\n                  address: { __typename?: 'Address' } & Pick<\n                    Address,\n                    'regione' | 'provincia' | 'comune'\n                  >;\n                })\n            | ({ __typename?: 'AdGrape' } & Pick<\n                AdGrape,\n                | '_id'\n                | 'needsFollowUp'\n                | 'harvest'\n                | 'abv'\n                | 'priceFrom'\n                | 'priceTo'\n                | 'typeAd'\n                | 'activeNegotiations'\n                | 'datePosted'\n              > & {\n                  postedBy: { __typename?: 'User' } & Pick<\n                    User,\n                    '_id' | 'firstName' | 'lastName' | 'hideContact'\n                  >;\n                  address: { __typename?: 'Address' } & Pick<\n                    Address,\n                    'regione' | 'provincia' | 'comune'\n                  >;\n                })\n          >\n        >;\n        negotiations?: Maybe<\n          { __typename?: 'NegotiationResult' } & Pick<\n            NegotiationResult,\n            'pageCount'\n          > & {\n              negotiations?: Maybe<\n                Array<\n                  Maybe<\n                    { __typename?: 'Negotiation' } & Pick<\n                      Negotiation,\n                      '_id' | 'isConcluded'\n                    > & {\n                        ad:\n                          | ({ __typename?: 'AdWine' } & Pick<\n                              AdWine,\n                              'wineName' | '_id'\n                            >)\n                          | ({ __typename?: 'AdGrape' } & Pick<AdGrape, '_id'>);\n                        forUserAd: { __typename?: 'User' } & Pick<\n                          User,\n                          '_id' | 'email'\n                        >;\n                      }\n                  >\n                >\n              >;\n            }\n        >;\n      }\n  >;\n};\n\nexport type IsUserLoggedInQueryVariables = Exact<{ [key: string]: never }>;\n\nexport type IsUserLoggedInQuery = { __typename?: 'Query' } & Pick<\n  Query,\n  'isLoggedIn'\n>;\n\nexport type NotificationQueryVariables = Exact<{ [key: string]: never }>;\n\nexport type NotificationQuery = { __typename?: 'Query' } & {\n  notification?: Maybe<\n    { __typename?: 'Notification' } & Pick<Notification, 'type' | 'message'>\n  >;\n};\n\nexport type WineSearchedQueryVariables = Exact<{ [key: string]: never }>;\n\nexport type WineSearchedQuery = { __typename?: 'Query' } & {\n  searchedWine?: Maybe<\n    { __typename?: 'WineSearched' } & Pick<\n      WineSearched,\n      | 'typeAd'\n      | 'typeProduct'\n      | 'wineName'\n      | 'harvest'\n      | 'abv'\n      | 'price'\n      | 'liters'\n      | 'isPost'\n    >\n  >;\n};\n\nexport type AdsWineQueryVariables = Exact<{\n  typeAd: TypeAd;\n  typeProduct: TypeProduct;\n  wineName?: Maybe<Scalars['String']>;\n  offset?: Maybe<Scalars['Int']>;\n  orderBy?: Maybe<QueryOrderBy>;\n  limit?: Maybe<Scalars['Int']>;\n}>;\n\nexport type AdsWineQuery = { __typename?: 'Query' } & {\n  ads?: Maybe<\n    { __typename?: 'AdsResult' } & Pick<AdsResult, 'pageCount'> & {\n        ads?: Maybe<\n          Array<\n            Maybe<\n              | ({ __typename?: 'AdWine' } & Pick<\n                  AdWine,\n                  | 'wineName'\n                  | 'litersFrom'\n                  | 'litersTo'\n                  | 'metodoProduttivo'\n                  | '_id'\n                  | 'needsFollowUp'\n                  | 'harvest'\n                  | 'abv'\n                  | 'priceFrom'\n                  | 'priceTo'\n                  | 'typeAd'\n                  | 'activeNegotiations'\n                  | 'datePosted'\n                > & {\n                    wine?: Maybe<\n                      { __typename?: 'Wine' } & Pick<\n                        Wine,\n                        'denominazioneZona' | 'regione'\n                      >\n                    >;\n                    postedBy: { __typename?: 'User' } & Pick<\n                      User,\n                      '_id' | 'firstName' | 'lastName' | 'hideContact'\n                    >;\n                    address: { __typename?: 'Address' } & Pick<\n                      Address,\n                      'regione' | 'provincia' | 'comune'\n                    >;\n                  })\n              | ({ __typename?: 'AdGrape' } & Pick<\n                  AdGrape,\n                  | '_id'\n                  | 'needsFollowUp'\n                  | 'harvest'\n                  | 'abv'\n                  | 'priceFrom'\n                  | 'priceTo'\n                  | 'typeAd'\n                  | 'activeNegotiations'\n                  | 'datePosted'\n                > & {\n                    postedBy: { __typename?: 'User' } & Pick<\n                      User,\n                      '_id' | 'firstName' | 'lastName' | 'hideContact'\n                    >;\n                    address: { __typename?: 'Address' } & Pick<\n                      Address,\n                      'regione' | 'provincia' | 'comune'\n                    >;\n                  })\n            >\n          >\n        >;\n      }\n  >;\n};\n\nexport type AdQueryVariables = Exact<{\n  id: Scalars['ID'];\n}>;\n\nexport type AdQuery = { __typename?: 'Query' } & {\n  ad?: Maybe<\n    | ({ __typename?: 'AdWine' } & Pick<\n        AdWine,\n        | 'wineName'\n        | 'litersFrom'\n        | 'litersTo'\n        | 'metodoProduttivo'\n        | '_id'\n        | 'needsFollowUp'\n        | 'harvest'\n        | 'abv'\n        | 'priceFrom'\n        | 'priceTo'\n        | 'typeAd'\n        | 'activeNegotiations'\n        | 'datePosted'\n      > & {\n          wine?: Maybe<\n            { __typename?: 'Wine' } & Pick<\n              Wine,\n              'denominazioneZona' | 'regione'\n            >\n          >;\n          postedBy: { __typename?: 'User' } & Pick<\n            User,\n            | '_id'\n            | 'firstName'\n            | 'lastName'\n            | 'hideContact'\n            | 'email'\n            | 'phoneNumber'\n          >;\n          address: { __typename?: 'Address' } & Pick<\n            Address,\n            'regione' | 'provincia' | 'comune'\n          >;\n        })\n    | ({ __typename?: 'AdGrape' } & Pick<\n        AdGrape,\n        | '_id'\n        | 'needsFollowUp'\n        | 'harvest'\n        | 'abv'\n        | 'priceFrom'\n        | 'priceTo'\n        | 'typeAd'\n        | 'activeNegotiations'\n        | 'datePosted'\n      > & {\n          postedBy: { __typename?: 'User' } & Pick<\n            User,\n            | '_id'\n            | 'firstName'\n            | 'lastName'\n            | 'hideContact'\n            | 'email'\n            | 'phoneNumber'\n          >;\n          address: { __typename?: 'Address' } & Pick<\n            Address,\n            'regione' | 'provincia' | 'comune'\n          >;\n        })\n  >;\n};\n\nexport type WinesQueryVariables = Exact<{ [key: string]: never }>;\n\nexport type WinesQuery = { __typename?: 'Query' } & {\n  wines?: Maybe<\n    Array<\n      { __typename?: 'Wine' } & Pick<\n        Wine,\n        | '_id'\n        | 'denominazioneVino'\n        | 'espressioneComunitaria'\n        | 'denominazioneZona'\n        | 'regione'\n      >\n    >\n  >;\n};\n\nexport type NegotiationsQueryVariables = Exact<{\n  offset?: Maybe<Scalars['Int']>;\n  orderBy?: Maybe<QueryOrderBy>;\n  limit?: Maybe<Scalars['Int']>;\n}>;\n\nexport type NegotiationsQuery = { __typename?: 'Query' } & {\n  negotiations?: Maybe<\n    { __typename?: 'NegotiationResult' } & Pick<\n      NegotiationResult,\n      'pageCount'\n    > & {\n        negotiations?: Maybe<\n          Array<\n            Maybe<{ __typename?: 'Negotiation' } & NegotiationDetailsFragment>\n          >\n        >;\n      }\n  >;\n};\n\nexport type NegotiationQueryVariables = Exact<{\n  id: Scalars['ID'];\n}>;\n\nexport type NegotiationQuery = { __typename?: 'Query' } & {\n  negotiation?: Maybe<\n    { __typename?: 'Negotiation' } & {\n      ad:\n        | ({ __typename?: 'AdWine' } & {\n            wine?: Maybe<\n              { __typename?: 'Wine' } & Pick<Wine, 'denominazioneZona'>\n            >;\n            postedBy: { __typename?: 'User' } & Pick<\n              User,\n              'hideContact' | 'phoneNumber' | 'email'\n            >;\n          })\n        | ({ __typename?: 'AdGrape' } & {\n            postedBy: { __typename?: 'User' } & Pick<\n              User,\n              'hideContact' | 'phoneNumber' | 'email'\n            >;\n          });\n    } & NegotiationDetailsFragment\n  >;\n};\n\nexport type MessagesQueryVariables = Exact<{ [key: string]: never }>;\n\nexport type MessagesQuery = { __typename?: 'Query' } & {\n  messages?: Maybe<Array<{ __typename?: 'Message' } & MessageDetailsFragment>>;\n};\n\nexport type MessagesNegotiationQueryVariables = Exact<{\n  id: Scalars['ID'];\n}>;\n\nexport type MessagesNegotiationQuery = { __typename?: 'Query' } & {\n  messagesForNegotiation?: Maybe<\n    Array<{ __typename?: 'Message' } & MessageDetailsFragment>\n  >;\n};\n\nexport type ReviewsQueryVariables = Exact<{\n  offset?: Maybe<Scalars['Int']>;\n  orderBy?: Maybe<QueryOrderBy>;\n  limit?: Maybe<Scalars['Int']>;\n}>;\n\nexport type ReviewsQuery = { __typename?: 'Query' } & {\n  reviews?: Maybe<\n    { __typename?: 'ReviewResult' } & {\n      reviews?: Maybe<\n        Array<Maybe<{ __typename?: 'Review' } & ReviewDetailsFragment>>\n      >;\n    }\n  >;\n};\n\nexport type ReviewQueryVariables = Exact<{\n  id: Scalars['ID'];\n}>;\n\nexport type ReviewQuery = { __typename?: 'Query' } & {\n  review?: Maybe<{ __typename?: 'Review' } & ReviewDetailsFragment>;\n};\n\nexport type NegotiationsForAdQueryVariables = Exact<{\n  ad: Scalars['ID'];\n}>;\n\nexport type NegotiationsForAdQuery = { __typename?: 'Query' } & {\n  negotiationsForAd?: Maybe<\n    Array<\n      { __typename?: 'Negotiation' } & Pick<\n        Negotiation,\n        '_id' | 'isConcluded' | 'dateCreated'\n      > & {\n          createdBy: { __typename?: 'User' } & Pick<\n            User,\n            '_id' | 'firstName' | 'lastName'\n          >;\n        }\n    >\n  >;\n};\n\nexport type AdPostedFollowUpSubscriptionVariables = Exact<{\n  [key: string]: never;\n}>;\n\nexport type AdPostedFollowUpSubscription = { __typename?: 'Subscription' } & {\n  adPostedFollowUp:\n    | ({ __typename?: 'AdWine' } & Pick<\n        AdWine,\n        | 'wineName'\n        | 'litersFrom'\n        | 'litersTo'\n        | 'metodoProduttivo'\n        | '_id'\n        | 'needsFollowUp'\n        | 'harvest'\n        | 'abv'\n        | 'priceFrom'\n        | 'priceTo'\n        | 'typeAd'\n        | 'activeNegotiations'\n        | 'datePosted'\n      > & {\n          wine?: Maybe<\n            { __typename?: 'Wine' } & Pick<\n              Wine,\n              'denominazioneZona' | 'regione'\n            >\n          >;\n          postedBy: { __typename?: 'User' } & Pick<\n            User,\n            '_id' | 'firstName' | 'lastName' | 'hideContact'\n          >;\n          address: { __typename?: 'Address' } & Pick<\n            Address,\n            'regione' | 'provincia'\n          >;\n        })\n    | ({ __typename?: 'AdGrape' } & Pick<\n        AdGrape,\n        | '_id'\n        | 'needsFollowUp'\n        | 'harvest'\n        | 'abv'\n        | 'priceFrom'\n        | 'priceTo'\n        | 'typeAd'\n        | 'activeNegotiations'\n        | 'datePosted'\n      > & {\n          postedBy: { __typename?: 'User' } & Pick<\n            User,\n            '_id' | 'firstName' | 'lastName' | 'hideContact'\n          >;\n          address: { __typename?: 'Address' } & Pick<\n            Address,\n            'regione' | 'provincia'\n          >;\n        });\n};\n\nexport type AdRemovedSubscriptionVariables = Exact<{ [key: string]: never }>;\n\nexport type AdRemovedSubscription = { __typename?: 'Subscription' } & {\n  adRemoved:\n    | ({ __typename?: 'AdWine' } & Pick<AdWine, '_id'>)\n    | ({ __typename?: 'AdGrape' } & Pick<AdGrape, '_id'>);\n};\n\nexport type MessageSentSubscriptionVariables = Exact<{ [key: string]: never }>;\n\nexport type MessageSentSubscription = { __typename?: 'Subscription' } & {\n  messageSent: { __typename?: 'Message' } & MessageDetailsFragment;\n};\n\nexport type NegotiationCreatedSubscriptionVariables = Exact<{\n  [key: string]: never;\n}>;\n\nexport type NegotiationCreatedSubscription = { __typename?: 'Subscription' } & {\n  negotiationCreated: {\n    __typename?: 'Negotiation';\n  } & NegotiationDetailsFragment;\n};\n\nexport type NegotiationClosedSubscriptionVariables = Exact<{\n  [key: string]: never;\n}>;\n\nexport type NegotiationClosedSubscription = { __typename?: 'Subscription' } & {\n  negotiationClosed:\n    | ({ __typename?: 'AdWine' } & Pick<\n        AdWine,\n        | 'wineName'\n        | 'litersFrom'\n        | 'litersTo'\n        | 'metodoProduttivo'\n        | '_id'\n        | 'needsFollowUp'\n        | 'harvest'\n        | 'abv'\n        | 'priceFrom'\n        | 'priceTo'\n        | 'typeAd'\n        | 'activeNegotiations'\n        | 'datePosted'\n      > & {\n          wine?: Maybe<\n            { __typename?: 'Wine' } & Pick<\n              Wine,\n              'denominazioneZona' | 'regione'\n            >\n          >;\n          postedBy: { __typename?: 'User' } & Pick<\n            User,\n            '_id' | 'firstName' | 'lastName' | 'hideContact'\n          >;\n          address: { __typename?: 'Address' } & Pick<\n            Address,\n            'regione' | 'provincia'\n          >;\n        })\n    | ({ __typename?: 'AdGrape' } & Pick<\n        AdGrape,\n        | '_id'\n        | 'needsFollowUp'\n        | 'harvest'\n        | 'abv'\n        | 'priceFrom'\n        | 'priceTo'\n        | 'typeAd'\n        | 'activeNegotiations'\n        | 'datePosted'\n      > & {\n          postedBy: { __typename?: 'User' } & Pick<\n            User,\n            '_id' | 'firstName' | 'lastName' | 'hideContact'\n          >;\n          address: { __typename?: 'Address' } & Pick<\n            Address,\n            'regione' | 'provincia'\n          >;\n        });\n};\n\nexport type ReviewCreatedSubscriptionVariables = Exact<{\n  [key: string]: never;\n}>;\n\nexport type ReviewCreatedSubscription = { __typename?: 'Subscription' } & {\n  reviewCreated: { __typename?: 'Review' } & ReviewDetailsFragment;\n};\n\nexport const AdDetailsFragmentDoc = gql`\n  fragment AdDetails on Ad {\n    _id\n    postedBy {\n      _id\n      firstName\n      lastName\n      hideContact\n    }\n    needsFollowUp\n    harvest\n    abv\n    priceFrom\n    priceTo\n    ... on AdWine {\n      wineName\n      litersFrom\n      litersTo\n      metodoProduttivo\n      wine {\n        denominazioneZona\n        regione\n      }\n    }\n    typeAd\n    address {\n      regione\n      provincia\n    }\n    activeNegotiations\n    datePosted\n  }\n`;\nexport const NegotiationDetailsFragmentDoc = gql`\n  fragment NegotiationDetails on Negotiation {\n    _id\n    createdBy {\n      _id\n      firstName\n      lastName\n      hideContact\n    }\n    ad {\n      _id\n      postedBy {\n        _id\n        firstName\n        lastName\n      }\n      ... on AdWine {\n        wineName\n      }\n    }\n    forUserAd {\n      _id\n      firstName\n      lastName\n      hideContact\n    }\n    type\n    messages {\n      _id\n    }\n    dateCreated\n    isConcluded\n  }\n`;\nexport const MessageDetailsFragmentDoc = gql`\n  fragment MessageDetails on Message {\n    _id\n    content\n    sentBy {\n      _id\n      firstName\n      lastName\n    }\n    sentTo {\n      _id\n      firstName\n      lastName\n    }\n    negotiation {\n      _id\n      ad {\n        ... on AdWine {\n          wineName\n          litersFrom\n          litersTo\n          wine {\n            denominazioneZona\n          }\n        }\n      }\n    }\n    dateSent\n  }\n`;\nexport const ReviewDetailsFragmentDoc = gql`\n  fragment ReviewDetails on Review {\n    _id\n    createdBy {\n      _id\n      firstName\n      lastName\n    }\n    negotiation {\n      _id\n      ad {\n        _id\n        ... on AdWine {\n          wineName\n        }\n      }\n    }\n    forUser {\n      _id\n      firstName\n      lastName\n    }\n    rating\n    dateCreated\n    content\n    type\n  }\n`;\nexport const LoginDocument = gql`\n  mutation login($email: String!, $password: String!) {\n    login(email: $email, password: $password) {\n      response {\n        token\n        user {\n          _id\n          firstName\n        }\n      }\n      errors {\n        name\n        text\n      }\n    }\n  }\n`;\nexport type LoginMutationFn = Apollo.MutationFunction<\n  LoginMutation,\n  LoginMutationVariables\n>;\n\n/**\n * __useLoginMutation__\n *\n * To run a mutation, you first call `useLoginMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useLoginMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [loginMutation, { data, loading, error }] = useLoginMutation({\n *   variables: {\n *      email: // value for 'email'\n *      password: // value for 'password'\n *   },\n * });\n */\nexport function useLoginMutation(\n  baseOptions?: Apollo.MutationHookOptions<\n    LoginMutation,\n    LoginMutationVariables\n  >\n) {\n  return Apollo.useMutation<LoginMutation, LoginMutationVariables>(\n    LoginDocument,\n    baseOptions\n  );\n}\nexport type LoginMutationHookResult = ReturnType<typeof useLoginMutation>;\nexport type LoginMutationResult = Apollo.MutationResult<LoginMutation>;\nexport type LoginMutationOptions = Apollo.BaseMutationOptions<\n  LoginMutation,\n  LoginMutationVariables\n>;\nexport const CreateUserDocument = gql`\n  mutation CreateUser($userInput: UserInput!) {\n    createUser(user: $userInput) {\n      response {\n        token\n        user {\n          _id\n          firstName\n        }\n      }\n      errors {\n        name\n        text\n      }\n    }\n  }\n`;\nexport type CreateUserMutationFn = Apollo.MutationFunction<\n  CreateUserMutation,\n  CreateUserMutationVariables\n>;\n\n/**\n * __useCreateUserMutation__\n *\n * To run a mutation, you first call `useCreateUserMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useCreateUserMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [createUserMutation, { data, loading, error }] = useCreateUserMutation({\n *   variables: {\n *      userInput: // value for 'userInput'\n *   },\n * });\n */\nexport function useCreateUserMutation(\n  baseOptions?: Apollo.MutationHookOptions<\n    CreateUserMutation,\n    CreateUserMutationVariables\n  >\n) {\n  return Apollo.useMutation<CreateUserMutation, CreateUserMutationVariables>(\n    CreateUserDocument,\n    baseOptions\n  );\n}\nexport type CreateUserMutationHookResult = ReturnType<\n  typeof useCreateUserMutation\n>;\nexport type CreateUserMutationResult = Apollo.MutationResult<CreateUserMutation>;\nexport type CreateUserMutationOptions = Apollo.BaseMutationOptions<\n  CreateUserMutation,\n  CreateUserMutationVariables\n>;\nexport const UpdateUserDocument = gql`\n  mutation UpdateUser($user: UserInputUpdate!) {\n    updateUser(user: $user) {\n      response {\n        _id\n        firstName\n      }\n      errors {\n        name\n        text\n      }\n    }\n  }\n`;\nexport type UpdateUserMutationFn = Apollo.MutationFunction<\n  UpdateUserMutation,\n  UpdateUserMutationVariables\n>;\n\n/**\n * __useUpdateUserMutation__\n *\n * To run a mutation, you first call `useUpdateUserMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useUpdateUserMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [updateUserMutation, { data, loading, error }] = useUpdateUserMutation({\n *   variables: {\n *      user: // value for 'user'\n *   },\n * });\n */\nexport function useUpdateUserMutation(\n  baseOptions?: Apollo.MutationHookOptions<\n    UpdateUserMutation,\n    UpdateUserMutationVariables\n  >\n) {\n  return Apollo.useMutation<UpdateUserMutation, UpdateUserMutationVariables>(\n    UpdateUserDocument,\n    baseOptions\n  );\n}\nexport type UpdateUserMutationHookResult = ReturnType<\n  typeof useUpdateUserMutation\n>;\nexport type UpdateUserMutationResult = Apollo.MutationResult<UpdateUserMutation>;\nexport type UpdateUserMutationOptions = Apollo.BaseMutationOptions<\n  UpdateUserMutation,\n  UpdateUserMutationVariables\n>;\nexport const DeleteUserDocument = gql`\n  mutation DeleteUser($id: ID!) {\n    deleteUser(id: $id) {\n      response {\n        _id\n        firstName\n      }\n      errors {\n        name\n        text\n      }\n    }\n  }\n`;\nexport type DeleteUserMutationFn = Apollo.MutationFunction<\n  DeleteUserMutation,\n  DeleteUserMutationVariables\n>;\n\n/**\n * __useDeleteUserMutation__\n *\n * To run a mutation, you first call `useDeleteUserMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useDeleteUserMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [deleteUserMutation, { data, loading, error }] = useDeleteUserMutation({\n *   variables: {\n *      id: // value for 'id'\n *   },\n * });\n */\nexport function useDeleteUserMutation(\n  baseOptions?: Apollo.MutationHookOptions<\n    DeleteUserMutation,\n    DeleteUserMutationVariables\n  >\n) {\n  return Apollo.useMutation<DeleteUserMutation, DeleteUserMutationVariables>(\n    DeleteUserDocument,\n    baseOptions\n  );\n}\nexport type DeleteUserMutationHookResult = ReturnType<\n  typeof useDeleteUserMutation\n>;\nexport type DeleteUserMutationResult = Apollo.MutationResult<DeleteUserMutation>;\nexport type DeleteUserMutationOptions = Apollo.BaseMutationOptions<\n  DeleteUserMutation,\n  DeleteUserMutationVariables\n>;\nexport const CreateAdWineDocument = gql`\n  mutation CreateAdWine($input: AdInput!) {\n    createAd(input: $input) {\n      response {\n        _id\n        postedBy {\n          _id\n          firstName\n          lastName\n          hideContact\n        }\n        needsFollowUp\n        harvest\n        abv\n        priceFrom\n        priceTo\n        ... on AdWine {\n          wineName\n          litersFrom\n          litersTo\n          metodoProduttivo\n          wine {\n            denominazioneZona\n            regione\n          }\n        }\n        typeAd\n        address {\n          regione\n          provincia\n          comune\n        }\n        activeNegotiations\n        datePosted\n      }\n      errors {\n        name\n        text\n      }\n    }\n  }\n`;\nexport type CreateAdWineMutationFn = Apollo.MutationFunction<\n  CreateAdWineMutation,\n  CreateAdWineMutationVariables\n>;\n\n/**\n * __useCreateAdWineMutation__\n *\n * To run a mutation, you first call `useCreateAdWineMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useCreateAdWineMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [createAdWineMutation, { data, loading, error }] = useCreateAdWineMutation({\n *   variables: {\n *      input: // value for 'input'\n *   },\n * });\n */\nexport function useCreateAdWineMutation(\n  baseOptions?: Apollo.MutationHookOptions<\n    CreateAdWineMutation,\n    CreateAdWineMutationVariables\n  >\n) {\n  return Apollo.useMutation<\n    CreateAdWineMutation,\n    CreateAdWineMutationVariables\n  >(CreateAdWineDocument, baseOptions);\n}\nexport type CreateAdWineMutationHookResult = ReturnType<\n  typeof useCreateAdWineMutation\n>;\nexport type CreateAdWineMutationResult = Apollo.MutationResult<CreateAdWineMutation>;\nexport type CreateAdWineMutationOptions = Apollo.BaseMutationOptions<\n  CreateAdWineMutation,\n  CreateAdWineMutationVariables\n>;\nexport const UpdateAdWineDocument = gql`\n  mutation UpdateAdWine($input: AdInputUpdate!) {\n    updateAd(input: $input) {\n      response {\n        _id\n        postedBy {\n          _id\n          firstName\n          lastName\n          hideContact\n        }\n        needsFollowUp\n        harvest\n        abv\n        priceFrom\n        priceTo\n        ... on AdWine {\n          wineName\n          litersFrom\n          litersTo\n          metodoProduttivo\n          wine {\n            denominazioneZona\n            regione\n          }\n        }\n        typeAd\n        address {\n          regione\n          provincia\n          comune\n        }\n        activeNegotiations\n        datePosted\n      }\n      errors {\n        name\n        text\n      }\n    }\n  }\n`;\nexport type UpdateAdWineMutationFn = Apollo.MutationFunction<\n  UpdateAdWineMutation,\n  UpdateAdWineMutationVariables\n>;\n\n/**\n * __useUpdateAdWineMutation__\n *\n * To run a mutation, you first call `useUpdateAdWineMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useUpdateAdWineMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [updateAdWineMutation, { data, loading, error }] = useUpdateAdWineMutation({\n *   variables: {\n *      input: // value for 'input'\n *   },\n * });\n */\nexport function useUpdateAdWineMutation(\n  baseOptions?: Apollo.MutationHookOptions<\n    UpdateAdWineMutation,\n    UpdateAdWineMutationVariables\n  >\n) {\n  return Apollo.useMutation<\n    UpdateAdWineMutation,\n    UpdateAdWineMutationVariables\n  >(UpdateAdWineDocument, baseOptions);\n}\nexport type UpdateAdWineMutationHookResult = ReturnType<\n  typeof useUpdateAdWineMutation\n>;\nexport type UpdateAdWineMutationResult = Apollo.MutationResult<UpdateAdWineMutation>;\nexport type UpdateAdWineMutationOptions = Apollo.BaseMutationOptions<\n  UpdateAdWineMutation,\n  UpdateAdWineMutationVariables\n>;\nexport const SaveAdDocument = gql`\n  mutation SaveAd($id: ID!) {\n    saveAd(id: $id) {\n      response {\n        _id\n        harvest\n        abv\n        priceFrom\n        priceTo\n        ... on AdWine {\n          wineName\n          litersFrom\n          litersTo\n          wine {\n            denominazioneZona\n          }\n        }\n        datePosted\n      }\n      errors {\n        name\n        text\n      }\n    }\n  }\n`;\nexport type SaveAdMutationFn = Apollo.MutationFunction<\n  SaveAdMutation,\n  SaveAdMutationVariables\n>;\n\n/**\n * __useSaveAdMutation__\n *\n * To run a mutation, you first call `useSaveAdMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useSaveAdMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [saveAdMutation, { data, loading, error }] = useSaveAdMutation({\n *   variables: {\n *      id: // value for 'id'\n *   },\n * });\n */\nexport function useSaveAdMutation(\n  baseOptions?: Apollo.MutationHookOptions<\n    SaveAdMutation,\n    SaveAdMutationVariables\n  >\n) {\n  return Apollo.useMutation<SaveAdMutation, SaveAdMutationVariables>(\n    SaveAdDocument,\n    baseOptions\n  );\n}\nexport type SaveAdMutationHookResult = ReturnType<typeof useSaveAdMutation>;\nexport type SaveAdMutationResult = Apollo.MutationResult<SaveAdMutation>;\nexport type SaveAdMutationOptions = Apollo.BaseMutationOptions<\n  SaveAdMutation,\n  SaveAdMutationVariables\n>;\nexport const DeleteAdDocument = gql`\n  mutation DeleteAd($id: ID!) {\n    deleteAd(id: $id) {\n      response {\n        _id\n      }\n      errors {\n        name\n        text\n      }\n    }\n  }\n`;\nexport type DeleteAdMutationFn = Apollo.MutationFunction<\n  DeleteAdMutation,\n  DeleteAdMutationVariables\n>;\n\n/**\n * __useDeleteAdMutation__\n *\n * To run a mutation, you first call `useDeleteAdMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useDeleteAdMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [deleteAdMutation, { data, loading, error }] = useDeleteAdMutation({\n *   variables: {\n *      id: // value for 'id'\n *   },\n * });\n */\nexport function useDeleteAdMutation(\n  baseOptions?: Apollo.MutationHookOptions<\n    DeleteAdMutation,\n    DeleteAdMutationVariables\n  >\n) {\n  return Apollo.useMutation<DeleteAdMutation, DeleteAdMutationVariables>(\n    DeleteAdDocument,\n    baseOptions\n  );\n}\nexport type DeleteAdMutationHookResult = ReturnType<typeof useDeleteAdMutation>;\nexport type DeleteAdMutationResult = Apollo.MutationResult<DeleteAdMutation>;\nexport type DeleteAdMutationOptions = Apollo.BaseMutationOptions<\n  DeleteAdMutation,\n  DeleteAdMutationVariables\n>;\nexport const CreateNegotiationDocument = gql`\n  mutation CreateNegotiation($negotiation: NegotiationInput!) {\n    createNegotiation(negotiation: $negotiation) {\n      response {\n        ...NegotiationDetails\n      }\n      errors {\n        name\n        text\n      }\n    }\n  }\n  ${NegotiationDetailsFragmentDoc}\n`;\nexport type CreateNegotiationMutationFn = Apollo.MutationFunction<\n  CreateNegotiationMutation,\n  CreateNegotiationMutationVariables\n>;\n\n/**\n * __useCreateNegotiationMutation__\n *\n * To run a mutation, you first call `useCreateNegotiationMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useCreateNegotiationMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [createNegotiationMutation, { data, loading, error }] = useCreateNegotiationMutation({\n *   variables: {\n *      negotiation: // value for 'negotiation'\n *   },\n * });\n */\nexport function useCreateNegotiationMutation(\n  baseOptions?: Apollo.MutationHookOptions<\n    CreateNegotiationMutation,\n    CreateNegotiationMutationVariables\n  >\n) {\n  return Apollo.useMutation<\n    CreateNegotiationMutation,\n    CreateNegotiationMutationVariables\n  >(CreateNegotiationDocument, baseOptions);\n}\nexport type CreateNegotiationMutationHookResult = ReturnType<\n  typeof useCreateNegotiationMutation\n>;\nexport type CreateNegotiationMutationResult = Apollo.MutationResult<CreateNegotiationMutation>;\nexport type CreateNegotiationMutationOptions = Apollo.BaseMutationOptions<\n  CreateNegotiationMutation,\n  CreateNegotiationMutationVariables\n>;\nexport const UpdateNegotiationDocument = gql`\n  mutation UpdateNegotiation($negotiation: NegotiationInputUpdate!) {\n    updateNegotiation(negotiation: $negotiation) {\n      response {\n        ...NegotiationDetails\n      }\n      errors {\n        name\n        text\n      }\n    }\n  }\n  ${NegotiationDetailsFragmentDoc}\n`;\nexport type UpdateNegotiationMutationFn = Apollo.MutationFunction<\n  UpdateNegotiationMutation,\n  UpdateNegotiationMutationVariables\n>;\n\n/**\n * __useUpdateNegotiationMutation__\n *\n * To run a mutation, you first call `useUpdateNegotiationMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useUpdateNegotiationMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [updateNegotiationMutation, { data, loading, error }] = useUpdateNegotiationMutation({\n *   variables: {\n *      negotiation: // value for 'negotiation'\n *   },\n * });\n */\nexport function useUpdateNegotiationMutation(\n  baseOptions?: Apollo.MutationHookOptions<\n    UpdateNegotiationMutation,\n    UpdateNegotiationMutationVariables\n  >\n) {\n  return Apollo.useMutation<\n    UpdateNegotiationMutation,\n    UpdateNegotiationMutationVariables\n  >(UpdateNegotiationDocument, baseOptions);\n}\nexport type UpdateNegotiationMutationHookResult = ReturnType<\n  typeof useUpdateNegotiationMutation\n>;\nexport type UpdateNegotiationMutationResult = Apollo.MutationResult<UpdateNegotiationMutation>;\nexport type UpdateNegotiationMutationOptions = Apollo.BaseMutationOptions<\n  UpdateNegotiationMutation,\n  UpdateNegotiationMutationVariables\n>;\nexport const DeleteNegotiationDocument = gql`\n  mutation DeleteNegotiation($id: ID!) {\n    deleteNegotiation(id: $id) {\n      response {\n        _id\n      }\n      errors {\n        name\n        text\n      }\n    }\n  }\n`;\nexport type DeleteNegotiationMutationFn = Apollo.MutationFunction<\n  DeleteNegotiationMutation,\n  DeleteNegotiationMutationVariables\n>;\n\n/**\n * __useDeleteNegotiationMutation__\n *\n * To run a mutation, you first call `useDeleteNegotiationMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useDeleteNegotiationMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [deleteNegotiationMutation, { data, loading, error }] = useDeleteNegotiationMutation({\n *   variables: {\n *      id: // value for 'id'\n *   },\n * });\n */\nexport function useDeleteNegotiationMutation(\n  baseOptions?: Apollo.MutationHookOptions<\n    DeleteNegotiationMutation,\n    DeleteNegotiationMutationVariables\n  >\n) {\n  return Apollo.useMutation<\n    DeleteNegotiationMutation,\n    DeleteNegotiationMutationVariables\n  >(DeleteNegotiationDocument, baseOptions);\n}\nexport type DeleteNegotiationMutationHookResult = ReturnType<\n  typeof useDeleteNegotiationMutation\n>;\nexport type DeleteNegotiationMutationResult = Apollo.MutationResult<DeleteNegotiationMutation>;\nexport type DeleteNegotiationMutationOptions = Apollo.BaseMutationOptions<\n  DeleteNegotiationMutation,\n  DeleteNegotiationMutationVariables\n>;\nexport const CreateMessageDocument = gql`\n  mutation CreateMessage($message: MessageInput!) {\n    createMessage(message: $message) {\n      response {\n        ...MessageDetails\n      }\n      errors {\n        name\n        text\n      }\n    }\n  }\n  ${MessageDetailsFragmentDoc}\n`;\nexport type CreateMessageMutationFn = Apollo.MutationFunction<\n  CreateMessageMutation,\n  CreateMessageMutationVariables\n>;\n\n/**\n * __useCreateMessageMutation__\n *\n * To run a mutation, you first call `useCreateMessageMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useCreateMessageMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [createMessageMutation, { data, loading, error }] = useCreateMessageMutation({\n *   variables: {\n *      message: // value for 'message'\n *   },\n * });\n */\nexport function useCreateMessageMutation(\n  baseOptions?: Apollo.MutationHookOptions<\n    CreateMessageMutation,\n    CreateMessageMutationVariables\n  >\n) {\n  return Apollo.useMutation<\n    CreateMessageMutation,\n    CreateMessageMutationVariables\n  >(CreateMessageDocument, baseOptions);\n}\nexport type CreateMessageMutationHookResult = ReturnType<\n  typeof useCreateMessageMutation\n>;\nexport type CreateMessageMutationResult = Apollo.MutationResult<CreateMessageMutation>;\nexport type CreateMessageMutationOptions = Apollo.BaseMutationOptions<\n  CreateMessageMutation,\n  CreateMessageMutationVariables\n>;\nexport const CreateReviewDocument = gql`\n  mutation CreateReview($review: ReviewInput!) {\n    createReview(review: $review) {\n      response {\n        ...ReviewDetails\n      }\n      errors {\n        name\n        text\n      }\n    }\n  }\n  ${ReviewDetailsFragmentDoc}\n`;\nexport type CreateReviewMutationFn = Apollo.MutationFunction<\n  CreateReviewMutation,\n  CreateReviewMutationVariables\n>;\n\n/**\n * __useCreateReviewMutation__\n *\n * To run a mutation, you first call `useCreateReviewMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useCreateReviewMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [createReviewMutation, { data, loading, error }] = useCreateReviewMutation({\n *   variables: {\n *      review: // value for 'review'\n *   },\n * });\n */\nexport function useCreateReviewMutation(\n  baseOptions?: Apollo.MutationHookOptions<\n    CreateReviewMutation,\n    CreateReviewMutationVariables\n  >\n) {\n  return Apollo.useMutation<\n    CreateReviewMutation,\n    CreateReviewMutationVariables\n  >(CreateReviewDocument, baseOptions);\n}\nexport type CreateReviewMutationHookResult = ReturnType<\n  typeof useCreateReviewMutation\n>;\nexport type CreateReviewMutationResult = Apollo.MutationResult<CreateReviewMutation>;\nexport type CreateReviewMutationOptions = Apollo.BaseMutationOptions<\n  CreateReviewMutation,\n  CreateReviewMutationVariables\n>;\nexport const MeDocument = gql`\n  query me($offset: Int, $orderBy: QueryOrderBy, $limit: Int) {\n    me {\n      _id\n      firstName\n      lastName\n      address {\n        regione\n        provincia\n        comune\n        via\n        CAP\n      }\n      email\n      ads(offset: $offset, orderBy: $orderBy, limit: $limit) {\n        ads {\n          _id\n          postedBy {\n            _id\n            firstName\n            lastName\n            hideContact\n          }\n          needsFollowUp\n          harvest\n          abv\n          priceFrom\n          priceTo\n          ... on AdWine {\n            wineName\n            litersFrom\n            litersTo\n            metodoProduttivo\n            wine {\n              denominazioneZona\n              regione\n            }\n          }\n          typeAd\n          address {\n            regione\n            provincia\n            comune\n          }\n          activeNegotiations\n          datePosted\n        }\n        pageCount\n      }\n      savedAds {\n        _id\n        postedBy {\n          _id\n          firstName\n          lastName\n          hideContact\n        }\n        needsFollowUp\n        harvest\n        abv\n        priceFrom\n        priceTo\n        ... on AdWine {\n          wineName\n          litersFrom\n          litersTo\n          metodoProduttivo\n          wine {\n            denominazioneZona\n            regione\n          }\n        }\n        typeAd\n        address {\n          regione\n          provincia\n          comune\n        }\n        activeNegotiations\n        datePosted\n      }\n      negotiations(offset: $offset, orderBy: $orderBy, limit: $limit) {\n        negotiations {\n          _id\n          ad {\n            _id\n            ... on AdWine {\n              wineName\n            }\n          }\n          forUserAd {\n            _id\n            email\n          }\n          isConcluded\n        }\n        pageCount\n      }\n    }\n  }\n`;\n\n/**\n * __useMeQuery__\n *\n * To run a query within a React component, call `useMeQuery` and pass it any options that fit your needs.\n * When your component renders, `useMeQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useMeQuery({\n *   variables: {\n *      offset: // value for 'offset'\n *      orderBy: // value for 'orderBy'\n *      limit: // value for 'limit'\n *   },\n * });\n */\nexport function useMeQuery(\n  baseOptions?: Apollo.QueryHookOptions<MeQuery, MeQueryVariables>\n) {\n  return Apollo.useQuery<MeQuery, MeQueryVariables>(MeDocument, baseOptions);\n}\nexport function useMeLazyQuery(\n  baseOptions?: Apollo.LazyQueryHookOptions<MeQuery, MeQueryVariables>\n) {\n  return Apollo.useLazyQuery<MeQuery, MeQueryVariables>(\n    MeDocument,\n    baseOptions\n  );\n}\nexport type MeQueryHookResult = ReturnType<typeof useMeQuery>;\nexport type MeLazyQueryHookResult = ReturnType<typeof useMeLazyQuery>;\nexport type MeQueryResult = Apollo.QueryResult<MeQuery, MeQueryVariables>;\nexport const IsUserLoggedInDocument = gql`\n  query IsUserLoggedIn {\n    isLoggedIn @client\n  }\n`;\n\n/**\n * __useIsUserLoggedInQuery__\n *\n * To run a query within a React component, call `useIsUserLoggedInQuery` and pass it any options that fit your needs.\n * When your component renders, `useIsUserLoggedInQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useIsUserLoggedInQuery({\n *   variables: {\n *   },\n * });\n */\nexport function useIsUserLoggedInQuery(\n  baseOptions?: Apollo.QueryHookOptions<\n    IsUserLoggedInQuery,\n    IsUserLoggedInQueryVariables\n  >\n) {\n  return Apollo.useQuery<IsUserLoggedInQuery, IsUserLoggedInQueryVariables>(\n    IsUserLoggedInDocument,\n    baseOptions\n  );\n}\nexport function useIsUserLoggedInLazyQuery(\n  baseOptions?: Apollo.LazyQueryHookOptions<\n    IsUserLoggedInQuery,\n    IsUserLoggedInQueryVariables\n  >\n) {\n  return Apollo.useLazyQuery<IsUserLoggedInQuery, IsUserLoggedInQueryVariables>(\n    IsUserLoggedInDocument,\n    baseOptions\n  );\n}\nexport type IsUserLoggedInQueryHookResult = ReturnType<\n  typeof useIsUserLoggedInQuery\n>;\nexport type IsUserLoggedInLazyQueryHookResult = ReturnType<\n  typeof useIsUserLoggedInLazyQuery\n>;\nexport type IsUserLoggedInQueryResult = Apollo.QueryResult<\n  IsUserLoggedInQuery,\n  IsUserLoggedInQueryVariables\n>;\nexport const NotificationDocument = gql`\n  query Notification {\n    notification @client {\n      type @client\n      message @client\n    }\n  }\n`;\n\n/**\n * __useNotificationQuery__\n *\n * To run a query within a React component, call `useNotificationQuery` and pass it any options that fit your needs.\n * When your component renders, `useNotificationQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useNotificationQuery({\n *   variables: {\n *   },\n * });\n */\nexport function useNotificationQuery(\n  baseOptions?: Apollo.QueryHookOptions<\n    NotificationQuery,\n    NotificationQueryVariables\n  >\n) {\n  return Apollo.useQuery<NotificationQuery, NotificationQueryVariables>(\n    NotificationDocument,\n    baseOptions\n  );\n}\nexport function useNotificationLazyQuery(\n  baseOptions?: Apollo.LazyQueryHookOptions<\n    NotificationQuery,\n    NotificationQueryVariables\n  >\n) {\n  return Apollo.useLazyQuery<NotificationQuery, NotificationQueryVariables>(\n    NotificationDocument,\n    baseOptions\n  );\n}\nexport type NotificationQueryHookResult = ReturnType<\n  typeof useNotificationQuery\n>;\nexport type NotificationLazyQueryHookResult = ReturnType<\n  typeof useNotificationLazyQuery\n>;\nexport type NotificationQueryResult = Apollo.QueryResult<\n  NotificationQuery,\n  NotificationQueryVariables\n>;\nexport const WineSearchedDocument = gql`\n  query WineSearched {\n    searchedWine @client {\n      typeAd @client\n      typeProduct @client\n      wineName @client\n      harvest @client\n      abv @client\n      price @client\n      liters @client\n      isPost @client\n    }\n  }\n`;\n\n/**\n * __useWineSearchedQuery__\n *\n * To run a query within a React component, call `useWineSearchedQuery` and pass it any options that fit your needs.\n * When your component renders, `useWineSearchedQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useWineSearchedQuery({\n *   variables: {\n *   },\n * });\n */\nexport function useWineSearchedQuery(\n  baseOptions?: Apollo.QueryHookOptions<\n    WineSearchedQuery,\n    WineSearchedQueryVariables\n  >\n) {\n  return Apollo.useQuery<WineSearchedQuery, WineSearchedQueryVariables>(\n    WineSearchedDocument,\n    baseOptions\n  );\n}\nexport function useWineSearchedLazyQuery(\n  baseOptions?: Apollo.LazyQueryHookOptions<\n    WineSearchedQuery,\n    WineSearchedQueryVariables\n  >\n) {\n  return Apollo.useLazyQuery<WineSearchedQuery, WineSearchedQueryVariables>(\n    WineSearchedDocument,\n    baseOptions\n  );\n}\nexport type WineSearchedQueryHookResult = ReturnType<\n  typeof useWineSearchedQuery\n>;\nexport type WineSearchedLazyQueryHookResult = ReturnType<\n  typeof useWineSearchedLazyQuery\n>;\nexport type WineSearchedQueryResult = Apollo.QueryResult<\n  WineSearchedQuery,\n  WineSearchedQueryVariables\n>;\nexport const AdsWineDocument = gql`\n  query AdsWine(\n    $typeAd: TypeAd!\n    $typeProduct: TypeProduct!\n    $wineName: String\n    $offset: Int\n    $orderBy: QueryOrderBy\n    $limit: Int\n  ) {\n    ads(\n      typeAd: $typeAd\n      typeProduct: $typeProduct\n      wineName: $wineName\n      offset: $offset\n      orderBy: $orderBy\n      limit: $limit\n    ) {\n      ads {\n        _id\n        postedBy {\n          _id\n          firstName\n          lastName\n          hideContact\n        }\n        needsFollowUp\n        harvest\n        abv\n        priceFrom\n        priceTo\n        ... on AdWine {\n          wineName\n          litersFrom\n          litersTo\n          metodoProduttivo\n          wine {\n            denominazioneZona\n            regione\n          }\n        }\n        typeAd\n        address {\n          regione\n          provincia\n          comune\n        }\n        activeNegotiations\n        datePosted\n      }\n      pageCount\n    }\n  }\n`;\n\n/**\n * __useAdsWineQuery__\n *\n * To run a query within a React component, call `useAdsWineQuery` and pass it any options that fit your needs.\n * When your component renders, `useAdsWineQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useAdsWineQuery({\n *   variables: {\n *      typeAd: // value for 'typeAd'\n *      typeProduct: // value for 'typeProduct'\n *      wineName: // value for 'wineName'\n *      offset: // value for 'offset'\n *      orderBy: // value for 'orderBy'\n *      limit: // value for 'limit'\n *   },\n * });\n */\nexport function useAdsWineQuery(\n  baseOptions: Apollo.QueryHookOptions<AdsWineQuery, AdsWineQueryVariables>\n) {\n  return Apollo.useQuery<AdsWineQuery, AdsWineQueryVariables>(\n    AdsWineDocument,\n    baseOptions\n  );\n}\nexport function useAdsWineLazyQuery(\n  baseOptions?: Apollo.LazyQueryHookOptions<AdsWineQuery, AdsWineQueryVariables>\n) {\n  return Apollo.useLazyQuery<AdsWineQuery, AdsWineQueryVariables>(\n    AdsWineDocument,\n    baseOptions\n  );\n}\nexport type AdsWineQueryHookResult = ReturnType<typeof useAdsWineQuery>;\nexport type AdsWineLazyQueryHookResult = ReturnType<typeof useAdsWineLazyQuery>;\nexport type AdsWineQueryResult = Apollo.QueryResult<\n  AdsWineQuery,\n  AdsWineQueryVariables\n>;\nexport const AdDocument = gql`\n  query Ad($id: ID!) {\n    ad(id: $id) {\n      _id\n      postedBy {\n        _id\n        firstName\n        lastName\n        hideContact\n        email\n        phoneNumber\n      }\n      needsFollowUp\n      harvest\n      abv\n      priceFrom\n      priceTo\n      ... on AdWine {\n        wineName\n        litersFrom\n        litersTo\n        metodoProduttivo\n        wine {\n          denominazioneZona\n          regione\n        }\n      }\n      typeAd\n      address {\n        regione\n        provincia\n        comune\n      }\n      activeNegotiations\n      datePosted\n    }\n  }\n`;\n\n/**\n * __useAdQuery__\n *\n * To run a query within a React component, call `useAdQuery` and pass it any options that fit your needs.\n * When your component renders, `useAdQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useAdQuery({\n *   variables: {\n *      id: // value for 'id'\n *   },\n * });\n */\nexport function useAdQuery(\n  baseOptions: Apollo.QueryHookOptions<AdQuery, AdQueryVariables>\n) {\n  return Apollo.useQuery<AdQuery, AdQueryVariables>(AdDocument, baseOptions);\n}\nexport function useAdLazyQuery(\n  baseOptions?: Apollo.LazyQueryHookOptions<AdQuery, AdQueryVariables>\n) {\n  return Apollo.useLazyQuery<AdQuery, AdQueryVariables>(\n    AdDocument,\n    baseOptions\n  );\n}\nexport type AdQueryHookResult = ReturnType<typeof useAdQuery>;\nexport type AdLazyQueryHookResult = ReturnType<typeof useAdLazyQuery>;\nexport type AdQueryResult = Apollo.QueryResult<AdQuery, AdQueryVariables>;\nexport const WinesDocument = gql`\n  query Wines {\n    wines {\n      _id\n      denominazioneVino\n      espressioneComunitaria\n      denominazioneZona\n      regione\n    }\n  }\n`;\n\n/**\n * __useWinesQuery__\n *\n * To run a query within a React component, call `useWinesQuery` and pass it any options that fit your needs.\n * When your component renders, `useWinesQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useWinesQuery({\n *   variables: {\n *   },\n * });\n */\nexport function useWinesQuery(\n  baseOptions?: Apollo.QueryHookOptions<WinesQuery, WinesQueryVariables>\n) {\n  return Apollo.useQuery<WinesQuery, WinesQueryVariables>(\n    WinesDocument,\n    baseOptions\n  );\n}\nexport function useWinesLazyQuery(\n  baseOptions?: Apollo.LazyQueryHookOptions<WinesQuery, WinesQueryVariables>\n) {\n  return Apollo.useLazyQuery<WinesQuery, WinesQueryVariables>(\n    WinesDocument,\n    baseOptions\n  );\n}\nexport type WinesQueryHookResult = ReturnType<typeof useWinesQuery>;\nexport type WinesLazyQueryHookResult = ReturnType<typeof useWinesLazyQuery>;\nexport type WinesQueryResult = Apollo.QueryResult<\n  WinesQuery,\n  WinesQueryVariables\n>;\nexport const NegotiationsDocument = gql`\n  query Negotiations($offset: Int, $orderBy: QueryOrderBy, $limit: Int) {\n    negotiations(offset: $offset, orderBy: $orderBy, limit: $limit) {\n      negotiations {\n        ...NegotiationDetails\n      }\n      pageCount\n    }\n  }\n  ${NegotiationDetailsFragmentDoc}\n`;\n\n/**\n * __useNegotiationsQuery__\n *\n * To run a query within a React component, call `useNegotiationsQuery` and pass it any options that fit your needs.\n * When your component renders, `useNegotiationsQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useNegotiationsQuery({\n *   variables: {\n *      offset: // value for 'offset'\n *      orderBy: // value for 'orderBy'\n *      limit: // value for 'limit'\n *   },\n * });\n */\nexport function useNegotiationsQuery(\n  baseOptions?: Apollo.QueryHookOptions<\n    NegotiationsQuery,\n    NegotiationsQueryVariables\n  >\n) {\n  return Apollo.useQuery<NegotiationsQuery, NegotiationsQueryVariables>(\n    NegotiationsDocument,\n    baseOptions\n  );\n}\nexport function useNegotiationsLazyQuery(\n  baseOptions?: Apollo.LazyQueryHookOptions<\n    NegotiationsQuery,\n    NegotiationsQueryVariables\n  >\n) {\n  return Apollo.useLazyQuery<NegotiationsQuery, NegotiationsQueryVariables>(\n    NegotiationsDocument,\n    baseOptions\n  );\n}\nexport type NegotiationsQueryHookResult = ReturnType<\n  typeof useNegotiationsQuery\n>;\nexport type NegotiationsLazyQueryHookResult = ReturnType<\n  typeof useNegotiationsLazyQuery\n>;\nexport type NegotiationsQueryResult = Apollo.QueryResult<\n  NegotiationsQuery,\n  NegotiationsQueryVariables\n>;\nexport const NegotiationDocument = gql`\n  query Negotiation($id: ID!) {\n    negotiation(id: $id) {\n      ...NegotiationDetails\n      ad {\n        ... on AdWine {\n          wine {\n            denominazioneZona\n          }\n        }\n        postedBy {\n          hideContact\n          phoneNumber\n          email\n        }\n      }\n    }\n  }\n  ${NegotiationDetailsFragmentDoc}\n`;\n\n/**\n * __useNegotiationQuery__\n *\n * To run a query within a React component, call `useNegotiationQuery` and pass it any options that fit your needs.\n * When your component renders, `useNegotiationQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useNegotiationQuery({\n *   variables: {\n *      id: // value for 'id'\n *   },\n * });\n */\nexport function useNegotiationQuery(\n  baseOptions: Apollo.QueryHookOptions<\n    NegotiationQuery,\n    NegotiationQueryVariables\n  >\n) {\n  return Apollo.useQuery<NegotiationQuery, NegotiationQueryVariables>(\n    NegotiationDocument,\n    baseOptions\n  );\n}\nexport function useNegotiationLazyQuery(\n  baseOptions?: Apollo.LazyQueryHookOptions<\n    NegotiationQuery,\n    NegotiationQueryVariables\n  >\n) {\n  return Apollo.useLazyQuery<NegotiationQuery, NegotiationQueryVariables>(\n    NegotiationDocument,\n    baseOptions\n  );\n}\nexport type NegotiationQueryHookResult = ReturnType<typeof useNegotiationQuery>;\nexport type NegotiationLazyQueryHookResult = ReturnType<\n  typeof useNegotiationLazyQuery\n>;\nexport type NegotiationQueryResult = Apollo.QueryResult<\n  NegotiationQuery,\n  NegotiationQueryVariables\n>;\nexport const MessagesDocument = gql`\n  query Messages {\n    messages {\n      ...MessageDetails\n    }\n  }\n  ${MessageDetailsFragmentDoc}\n`;\n\n/**\n * __useMessagesQuery__\n *\n * To run a query within a React component, call `useMessagesQuery` and pass it any options that fit your needs.\n * When your component renders, `useMessagesQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useMessagesQuery({\n *   variables: {\n *   },\n * });\n */\nexport function useMessagesQuery(\n  baseOptions?: Apollo.QueryHookOptions<MessagesQuery, MessagesQueryVariables>\n) {\n  return Apollo.useQuery<MessagesQuery, MessagesQueryVariables>(\n    MessagesDocument,\n    baseOptions\n  );\n}\nexport function useMessagesLazyQuery(\n  baseOptions?: Apollo.LazyQueryHookOptions<\n    MessagesQuery,\n    MessagesQueryVariables\n  >\n) {\n  return Apollo.useLazyQuery<MessagesQuery, MessagesQueryVariables>(\n    MessagesDocument,\n    baseOptions\n  );\n}\nexport type MessagesQueryHookResult = ReturnType<typeof useMessagesQuery>;\nexport type MessagesLazyQueryHookResult = ReturnType<\n  typeof useMessagesLazyQuery\n>;\nexport type MessagesQueryResult = Apollo.QueryResult<\n  MessagesQuery,\n  MessagesQueryVariables\n>;\nexport const MessagesNegotiationDocument = gql`\n  query MessagesNegotiation($id: ID!) {\n    messagesForNegotiation(negotiation: $id) {\n      ...MessageDetails\n    }\n  }\n  ${MessageDetailsFragmentDoc}\n`;\n\n/**\n * __useMessagesNegotiationQuery__\n *\n * To run a query within a React component, call `useMessagesNegotiationQuery` and pass it any options that fit your needs.\n * When your component renders, `useMessagesNegotiationQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useMessagesNegotiationQuery({\n *   variables: {\n *      id: // value for 'id'\n *   },\n * });\n */\nexport function useMessagesNegotiationQuery(\n  baseOptions: Apollo.QueryHookOptions<\n    MessagesNegotiationQuery,\n    MessagesNegotiationQueryVariables\n  >\n) {\n  return Apollo.useQuery<\n    MessagesNegotiationQuery,\n    MessagesNegotiationQueryVariables\n  >(MessagesNegotiationDocument, baseOptions);\n}\nexport function useMessagesNegotiationLazyQuery(\n  baseOptions?: Apollo.LazyQueryHookOptions<\n    MessagesNegotiationQuery,\n    MessagesNegotiationQueryVariables\n  >\n) {\n  return Apollo.useLazyQuery<\n    MessagesNegotiationQuery,\n    MessagesNegotiationQueryVariables\n  >(MessagesNegotiationDocument, baseOptions);\n}\nexport type MessagesNegotiationQueryHookResult = ReturnType<\n  typeof useMessagesNegotiationQuery\n>;\nexport type MessagesNegotiationLazyQueryHookResult = ReturnType<\n  typeof useMessagesNegotiationLazyQuery\n>;\nexport type MessagesNegotiationQueryResult = Apollo.QueryResult<\n  MessagesNegotiationQuery,\n  MessagesNegotiationQueryVariables\n>;\nexport const ReviewsDocument = gql`\n  query Reviews($offset: Int, $orderBy: QueryOrderBy, $limit: Int) {\n    reviews(offset: $offset, orderBy: $orderBy, limit: $limit) {\n      reviews {\n        ...ReviewDetails\n      }\n    }\n  }\n  ${ReviewDetailsFragmentDoc}\n`;\n\n/**\n * __useReviewsQuery__\n *\n * To run a query within a React component, call `useReviewsQuery` and pass it any options that fit your needs.\n * When your component renders, `useReviewsQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useReviewsQuery({\n *   variables: {\n *      offset: // value for 'offset'\n *      orderBy: // value for 'orderBy'\n *      limit: // value for 'limit'\n *   },\n * });\n */\nexport function useReviewsQuery(\n  baseOptions?: Apollo.QueryHookOptions<ReviewsQuery, ReviewsQueryVariables>\n) {\n  return Apollo.useQuery<ReviewsQuery, ReviewsQueryVariables>(\n    ReviewsDocument,\n    baseOptions\n  );\n}\nexport function useReviewsLazyQuery(\n  baseOptions?: Apollo.LazyQueryHookOptions<ReviewsQuery, ReviewsQueryVariables>\n) {\n  return Apollo.useLazyQuery<ReviewsQuery, ReviewsQueryVariables>(\n    ReviewsDocument,\n    baseOptions\n  );\n}\nexport type ReviewsQueryHookResult = ReturnType<typeof useReviewsQuery>;\nexport type ReviewsLazyQueryHookResult = ReturnType<typeof useReviewsLazyQuery>;\nexport type ReviewsQueryResult = Apollo.QueryResult<\n  ReviewsQuery,\n  ReviewsQueryVariables\n>;\nexport const ReviewDocument = gql`\n  query Review($id: ID!) {\n    review(id: $id) {\n      ...ReviewDetails\n    }\n  }\n  ${ReviewDetailsFragmentDoc}\n`;\n\n/**\n * __useReviewQuery__\n *\n * To run a query within a React component, call `useReviewQuery` and pass it any options that fit your needs.\n * When your component renders, `useReviewQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useReviewQuery({\n *   variables: {\n *      id: // value for 'id'\n *   },\n * });\n */\nexport function useReviewQuery(\n  baseOptions: Apollo.QueryHookOptions<ReviewQuery, ReviewQueryVariables>\n) {\n  return Apollo.useQuery<ReviewQuery, ReviewQueryVariables>(\n    ReviewDocument,\n    baseOptions\n  );\n}\nexport function useReviewLazyQuery(\n  baseOptions?: Apollo.LazyQueryHookOptions<ReviewQuery, ReviewQueryVariables>\n) {\n  return Apollo.useLazyQuery<ReviewQuery, ReviewQueryVariables>(\n    ReviewDocument,\n    baseOptions\n  );\n}\nexport type ReviewQueryHookResult = ReturnType<typeof useReviewQuery>;\nexport type ReviewLazyQueryHookResult = ReturnType<typeof useReviewLazyQuery>;\nexport type ReviewQueryResult = Apollo.QueryResult<\n  ReviewQuery,\n  ReviewQueryVariables\n>;\nexport const NegotiationsForAdDocument = gql`\n  query NegotiationsForAd($ad: ID!) {\n    negotiationsForAd(ad: $ad) {\n      _id\n      isConcluded\n      createdBy {\n        _id\n        firstName\n        lastName\n      }\n      dateCreated\n    }\n  }\n`;\n\n/**\n * __useNegotiationsForAdQuery__\n *\n * To run a query within a React component, call `useNegotiationsForAdQuery` and pass it any options that fit your needs.\n * When your component renders, `useNegotiationsForAdQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useNegotiationsForAdQuery({\n *   variables: {\n *      ad: // value for 'ad'\n *   },\n * });\n */\nexport function useNegotiationsForAdQuery(\n  baseOptions: Apollo.QueryHookOptions<\n    NegotiationsForAdQuery,\n    NegotiationsForAdQueryVariables\n  >\n) {\n  return Apollo.useQuery<\n    NegotiationsForAdQuery,\n    NegotiationsForAdQueryVariables\n  >(NegotiationsForAdDocument, baseOptions);\n}\nexport function useNegotiationsForAdLazyQuery(\n  baseOptions?: Apollo.LazyQueryHookOptions<\n    NegotiationsForAdQuery,\n    NegotiationsForAdQueryVariables\n  >\n) {\n  return Apollo.useLazyQuery<\n    NegotiationsForAdQuery,\n    NegotiationsForAdQueryVariables\n  >(NegotiationsForAdDocument, baseOptions);\n}\nexport type NegotiationsForAdQueryHookResult = ReturnType<\n  typeof useNegotiationsForAdQuery\n>;\nexport type NegotiationsForAdLazyQueryHookResult = ReturnType<\n  typeof useNegotiationsForAdLazyQuery\n>;\nexport type NegotiationsForAdQueryResult = Apollo.QueryResult<\n  NegotiationsForAdQuery,\n  NegotiationsForAdQueryVariables\n>;\nexport const AdPostedFollowUpDocument = gql`\n  subscription AdPostedFollowUp {\n    adPostedFollowUp {\n      _id\n      postedBy {\n        _id\n        firstName\n        lastName\n        hideContact\n      }\n      needsFollowUp\n      harvest\n      abv\n      priceFrom\n      priceTo\n      ... on AdWine {\n        wineName\n        litersFrom\n        litersTo\n        metodoProduttivo\n        wine {\n          denominazioneZona\n          regione\n        }\n      }\n      typeAd\n      address {\n        regione\n        provincia\n      }\n      activeNegotiations\n      datePosted\n    }\n  }\n`;\n\n/**\n * __useAdPostedFollowUpSubscription__\n *\n * To run a query within a React component, call `useAdPostedFollowUpSubscription` and pass it any options that fit your needs.\n * When your component renders, `useAdPostedFollowUpSubscription` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the subscription, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useAdPostedFollowUpSubscription({\n *   variables: {\n *   },\n * });\n */\nexport function useAdPostedFollowUpSubscription(\n  baseOptions?: Apollo.SubscriptionHookOptions<\n    AdPostedFollowUpSubscription,\n    AdPostedFollowUpSubscriptionVariables\n  >\n) {\n  return Apollo.useSubscription<\n    AdPostedFollowUpSubscription,\n    AdPostedFollowUpSubscriptionVariables\n  >(AdPostedFollowUpDocument, baseOptions);\n}\nexport type AdPostedFollowUpSubscriptionHookResult = ReturnType<\n  typeof useAdPostedFollowUpSubscription\n>;\nexport type AdPostedFollowUpSubscriptionResult = Apollo.SubscriptionResult<AdPostedFollowUpSubscription>;\nexport const AdRemovedDocument = gql`\n  subscription AdRemoved {\n    adRemoved {\n      _id\n    }\n  }\n`;\n\n/**\n * __useAdRemovedSubscription__\n *\n * To run a query within a React component, call `useAdRemovedSubscription` and pass it any options that fit your needs.\n * When your component renders, `useAdRemovedSubscription` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the subscription, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useAdRemovedSubscription({\n *   variables: {\n *   },\n * });\n */\nexport function useAdRemovedSubscription(\n  baseOptions?: Apollo.SubscriptionHookOptions<\n    AdRemovedSubscription,\n    AdRemovedSubscriptionVariables\n  >\n) {\n  return Apollo.useSubscription<\n    AdRemovedSubscription,\n    AdRemovedSubscriptionVariables\n  >(AdRemovedDocument, baseOptions);\n}\nexport type AdRemovedSubscriptionHookResult = ReturnType<\n  typeof useAdRemovedSubscription\n>;\nexport type AdRemovedSubscriptionResult = Apollo.SubscriptionResult<AdRemovedSubscription>;\nexport const MessageSentDocument = gql`\n  subscription MessageSent {\n    messageSent {\n      ...MessageDetails\n    }\n  }\n  ${MessageDetailsFragmentDoc}\n`;\n\n/**\n * __useMessageSentSubscription__\n *\n * To run a query within a React component, call `useMessageSentSubscription` and pass it any options that fit your needs.\n * When your component renders, `useMessageSentSubscription` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the subscription, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useMessageSentSubscription({\n *   variables: {\n *   },\n * });\n */\nexport function useMessageSentSubscription(\n  baseOptions?: Apollo.SubscriptionHookOptions<\n    MessageSentSubscription,\n    MessageSentSubscriptionVariables\n  >\n) {\n  return Apollo.useSubscription<\n    MessageSentSubscription,\n    MessageSentSubscriptionVariables\n  >(MessageSentDocument, baseOptions);\n}\nexport type MessageSentSubscriptionHookResult = ReturnType<\n  typeof useMessageSentSubscription\n>;\nexport type MessageSentSubscriptionResult = Apollo.SubscriptionResult<MessageSentSubscription>;\nexport const NegotiationCreatedDocument = gql`\n  subscription NegotiationCreated {\n    negotiationCreated {\n      ...NegotiationDetails\n    }\n  }\n  ${NegotiationDetailsFragmentDoc}\n`;\n\n/**\n * __useNegotiationCreatedSubscription__\n *\n * To run a query within a React component, call `useNegotiationCreatedSubscription` and pass it any options that fit your needs.\n * When your component renders, `useNegotiationCreatedSubscription` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the subscription, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useNegotiationCreatedSubscription({\n *   variables: {\n *   },\n * });\n */\nexport function useNegotiationCreatedSubscription(\n  baseOptions?: Apollo.SubscriptionHookOptions<\n    NegotiationCreatedSubscription,\n    NegotiationCreatedSubscriptionVariables\n  >\n) {\n  return Apollo.useSubscription<\n    NegotiationCreatedSubscription,\n    NegotiationCreatedSubscriptionVariables\n  >(NegotiationCreatedDocument, baseOptions);\n}\nexport type NegotiationCreatedSubscriptionHookResult = ReturnType<\n  typeof useNegotiationCreatedSubscription\n>;\nexport type NegotiationCreatedSubscriptionResult = Apollo.SubscriptionResult<NegotiationCreatedSubscription>;\nexport const NegotiationClosedDocument = gql`\n  subscription NegotiationClosed {\n    negotiationClosed {\n      _id\n      postedBy {\n        _id\n        firstName\n        lastName\n        hideContact\n      }\n      needsFollowUp\n      harvest\n      abv\n      priceFrom\n      priceTo\n      ... on AdWine {\n        wineName\n        litersFrom\n        litersTo\n        metodoProduttivo\n        wine {\n          denominazioneZona\n          regione\n        }\n      }\n      typeAd\n      address {\n        regione\n        provincia\n      }\n      activeNegotiations\n      datePosted\n    }\n  }\n`;\n\n/**\n * __useNegotiationClosedSubscription__\n *\n * To run a query within a React component, call `useNegotiationClosedSubscription` and pass it any options that fit your needs.\n * When your component renders, `useNegotiationClosedSubscription` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the subscription, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useNegotiationClosedSubscription({\n *   variables: {\n *   },\n * });\n */\nexport function useNegotiationClosedSubscription(\n  baseOptions?: Apollo.SubscriptionHookOptions<\n    NegotiationClosedSubscription,\n    NegotiationClosedSubscriptionVariables\n  >\n) {\n  return Apollo.useSubscription<\n    NegotiationClosedSubscription,\n    NegotiationClosedSubscriptionVariables\n  >(NegotiationClosedDocument, baseOptions);\n}\nexport type NegotiationClosedSubscriptionHookResult = ReturnType<\n  typeof useNegotiationClosedSubscription\n>;\nexport type NegotiationClosedSubscriptionResult = Apollo.SubscriptionResult<NegotiationClosedSubscription>;\nexport const ReviewCreatedDocument = gql`\n  subscription ReviewCreated {\n    reviewCreated {\n      ...ReviewDetails\n    }\n  }\n  ${ReviewDetailsFragmentDoc}\n`;\n\n/**\n * __useReviewCreatedSubscription__\n *\n * To run a query within a React component, call `useReviewCreatedSubscription` and pass it any options that fit your needs.\n * When your component renders, `useReviewCreatedSubscription` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the subscription, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useReviewCreatedSubscription({\n *   variables: {\n *   },\n * });\n */\nexport function useReviewCreatedSubscription(\n  baseOptions?: Apollo.SubscriptionHookOptions<\n    ReviewCreatedSubscription,\n    ReviewCreatedSubscriptionVariables\n  >\n) {\n  return Apollo.useSubscription<\n    ReviewCreatedSubscription,\n    ReviewCreatedSubscriptionVariables\n  >(ReviewCreatedDocument, baseOptions);\n}\nexport type ReviewCreatedSubscriptionHookResult = ReturnType<\n  typeof useReviewCreatedSubscription\n>;\nexport type ReviewCreatedSubscriptionResult = Apollo.SubscriptionResult<ReviewCreatedSubscription>;\n","/Users/giovanni/programming/wine-app-frontend/src/pages/index.tsx",[],"/Users/giovanni/programming/wine-app-frontend/src/pages/Ads.tsx",[],"/Users/giovanni/programming/wine-app-frontend/src/pages/Profile.tsx",[],[],"/Users/giovanni/programming/wine-app-frontend/src/pages/Ad.tsx",[],"/Users/giovanni/programming/wine-app-frontend/src/pages/Signup.tsx",[],"/Users/giovanni/programming/wine-app-frontend/src/components/PageContainer.tsx",[],[],"/Users/giovanni/programming/wine-app-frontend/src/components/Notification.tsx",[],"/Users/giovanni/programming/wine-app-frontend/src/components/UserForm/index.tsx",[],"/Users/giovanni/programming/wine-app-frontend/src/components/UserForm/data.ts",[],"/Users/giovanni/programming/wine-app-frontend/src/utils/pivaValidator.ts",[],"/Users/giovanni/programming/wine-app-frontend/src/utils/passwordValidator.ts",[],"/Users/giovanni/programming/wine-app-frontend/src/utils/phoneNumberValidator.ts",[],"/Users/giovanni/programming/wine-app-frontend/src/utils/formHelper.ts",[],"/Users/giovanni/programming/wine-app-frontend/src/pages/Home.tsx",[],"/Users/giovanni/programming/wine-app-frontend/src/components/WineForms/Search/WineFormQuery.tsx",[],"/Users/giovanni/programming/wine-app-frontend/src/components/Navigation/LogoutButton.tsx",[],"/Users/giovanni/programming/wine-app-frontend/src/components/Navigation/index.tsx",[],"/Users/giovanni/programming/wine-app-frontend/src/components/Navigation/AppBar.tsx",[],"/Users/giovanni/programming/wine-app-frontend/src/components/Navigation/Drawer.tsx",[],"/Users/giovanni/programming/wine-app-frontend/src/components/LoginModal/LoginForm.tsx",[],"/Users/giovanni/programming/wine-app-frontend/src/components/FormFields/PasswordField.tsx",[],"/Users/giovanni/programming/wine-app-frontend/src/components/FormFields/TextField.tsx",[],"/Users/giovanni/programming/wine-app-frontend/src/components/LoginModal/index.tsx",[],"/Users/giovanni/programming/wine-app-frontend/src/components/FormFields/SliderField.tsx",[],"/Users/giovanni/programming/wine-app-frontend/src/components/FormFields/ComboboxField.tsx",[],"/Users/giovanni/programming/wine-app-frontend/src/components/FormFields/ComboboxProvince.tsx",[],"/Users/giovanni/programming/wine-app-frontend/src/components/FormFields/ComboboxComuni.tsx",[],"/Users/giovanni/programming/wine-app-frontend/src/components/FormFields/ComboboxFieldWines.tsx",[],"/Users/giovanni/programming/wine-app-frontend/src/components/FormFields/TextFieldAdornment.tsx",[],"/Users/giovanni/programming/wine-app-frontend/src/components/WineForms/Post/WineFormMutation.tsx",[],"/Users/giovanni/programming/wine-app-frontend/src/components/FormFields/SelectField.tsx",[],"/Users/giovanni/programming/wine-app-frontend/src/components/AddressForm/index.tsx",[],"/Users/giovanni/programming/wine-app-frontend/src/components/CardWine.tsx",[],"/Users/giovanni/programming/wine-app-frontend/src/pages/BuySell.tsx",[],"/Users/giovanni/programming/wine-app-frontend/src/components/CardWineDetail.tsx",[],"/Users/giovanni/programming/wine-app-frontend/src/utils/multiFilter.ts",["268","269"],"export interface IFilters {\n  [key: string]: (value: any) => boolean;\n}\n\ninterface IArray {\n  [key: string]: any;\n}\n\n// function taken from https://gist.github.com/jherax/f11d669ba286f21b7a2dcff69621eb72\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nexport function multiFilter(\n  array: Array<IArray>,\n  filters: IFilters\n): Array<IArray> {\n  const filterKeys = Object.keys(filters);\n  return array.filter((item) => {\n    // validates all filter criteria\n    return filterKeys.every((key) => {\n      // ignores non-function predicates\n      if (typeof filters[key] !== 'function') return true;\n      return filters[key](item[key]);\n    });\n  });\n}\n","/Users/giovanni/programming/wine-app-frontend/src/components/BackButton.tsx",[],"/Users/giovanni/programming/wine-app-frontend/src/components/Filter.tsx",[],"/Users/giovanni/programming/wine-app-frontend/src/components/Snackbar.tsx",[],"/Users/giovanni/programming/wine-app-frontend/src/pages/MyAds.tsx",[],"/Users/giovanni/programming/wine-app-frontend/src/components/FavoriteButton.tsx",[],"/Users/giovanni/programming/wine-app-frontend/src/components/NegotiationModal/index.tsx",[],"/Users/giovanni/programming/wine-app-frontend/src/utils/updateCache.ts",["270"],"/* eslint-disable @typescript-eslint/no-unsafe-assignment */\n/* eslint-disable @typescript-eslint/ban-types */\nimport { ApolloCache, ApolloClient } from '@apollo/client';\nimport _ from 'lodash';\nimport {\n  Ad,\n  AdDocument,\n  // Ad,\n  // AdDocument,\n  MeDocument,\n  Negotiation,\n  NegotiationsDocument,\n} from '../generated/graphql';\nimport { ICachedMe } from '../pages/BuySell';\n\nexport interface ICachedDataNegotiations {\n  negotiations: {\n    negotiations: Negotiation[];\n    pageCount: number;\n  };\n}\n\n// eslint-disable-next-line @typescript-eslint/explicit-module-boundary-types\nexport const updateCacheNegotiations = (\n  client: ApolloClient<object> | ApolloCache<any>,\n  negotiation: Negotiation\n) => {\n  // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment\n  // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n  // @ts-ignore\n  const adLocal: { ad: Ad } = _.cloneDeep(\n    // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n    //@ts-ignore\n    client.readQuery({\n      query: AdDocument,\n      variables: { id: negotiation.ad._id },\n    })\n  );\n  if (adLocal) {\n    adLocal.ad.activeNegotiations =\n      (adLocal.ad.activeNegotiations as number) + 1;\n    // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n    //@ts-ignore\n    client.writeQuery({\n      query: AdDocument,\n      variables: { id: negotiation.ad._id },\n      data: adLocal,\n    });\n  }\n  const cachedDataMeLocal: ICachedMe | null = _.cloneDeep(\n    // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n    //@ts-ignore\n    client.readQuery({\n      query: MeDocument,\n    })\n  );\n  const cachedDataNegotiationsLocal: ICachedDataNegotiations | null = _.cloneDeep(\n    // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n    //@ts-ignore\n    client.readQuery({\n      query: NegotiationsDocument,\n    })\n  );\n  cachedDataMeLocal?.me.negotiations?.negotiations?.push(negotiation);\n  if (cachedDataMeLocal?.me.negotiations) {\n    cachedDataMeLocal.me.negotiations.pageCount =\n      (cachedDataMeLocal.me.negotiations.pageCount as number) + 1;\n  }\n  // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n  //@ts-ignore\n  client.writeQuery({\n    query: MeDocument,\n    data: cachedDataMeLocal,\n  });\n\n  if (!cachedDataNegotiationsLocal) return;\n  cachedDataNegotiationsLocal.negotiations.negotiations.push(negotiation);\n  cachedDataNegotiationsLocal.negotiations.pageCount += 1;\n\n  // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n  //@ts-ignore\n  client.writeQuery({\n    query: NegotiationsDocument,\n    data: cachedDataNegotiationsLocal,\n  });\n};\n","/Users/giovanni/programming/wine-app-frontend/src/pages/Negotiations.tsx",[],"/Users/giovanni/programming/wine-app-frontend/src/components/CardNegotiation.tsx",[],"/Users/giovanni/programming/wine-app-frontend/src/pages/Negotiation.tsx",[],"/Users/giovanni/programming/wine-app-frontend/src/components/OpenNegotiations.tsx",[],{"ruleId":"271","severity":1,"message":"272","line":15,"column":42,"nodeType":"273","messageId":"274","endLine":15,"endColumn":45,"suggestions":"275"},{"ruleId":"271","severity":1,"message":"272","line":47,"column":42,"nodeType":"273","messageId":"274","endLine":47,"endColumn":45,"suggestions":"276"},{"ruleId":"271","severity":1,"message":"272","line":71,"column":42,"nodeType":"273","messageId":"274","endLine":71,"endColumn":45,"suggestions":"277"},{"ruleId":"271","severity":1,"message":"272","line":18,"column":9,"nodeType":"273","messageId":"274","endLine":18,"endColumn":12,"suggestions":"278"},{"ruleId":"279","severity":1,"message":"280","line":2156,"column":8,"nodeType":"281","messageId":"282","endLine":2161,"endColumn":2},{"ruleId":"279","severity":1,"message":"280","line":2212,"column":8,"nodeType":"281","messageId":"282","endLine":2217,"endColumn":2},{"ruleId":"279","severity":1,"message":"280","line":2267,"column":8,"nodeType":"281","messageId":"282","endLine":2272,"endColumn":2},{"ruleId":"279","severity":1,"message":"280","line":2322,"column":8,"nodeType":"281","messageId":"282","endLine":2327,"endColumn":2},{"ruleId":"279","severity":1,"message":"280","line":2405,"column":8,"nodeType":"281","messageId":"282","endLine":2410,"endColumn":2},{"ruleId":"279","severity":1,"message":"280","line":2488,"column":8,"nodeType":"281","messageId":"282","endLine":2493,"endColumn":2},{"ruleId":"279","severity":1,"message":"280","line":2555,"column":8,"nodeType":"281","messageId":"282","endLine":2560,"endColumn":2},{"ruleId":"279","severity":1,"message":"280","line":2607,"column":8,"nodeType":"281","messageId":"282","endLine":2612,"endColumn":2},{"ruleId":"279","severity":1,"message":"280","line":2660,"column":8,"nodeType":"281","messageId":"282","endLine":2665,"endColumn":2},{"ruleId":"279","severity":1,"message":"280","line":2715,"column":8,"nodeType":"281","messageId":"282","endLine":2720,"endColumn":2},{"ruleId":"279","severity":1,"message":"280","line":2769,"column":8,"nodeType":"281","messageId":"282","endLine":2774,"endColumn":2},{"ruleId":"279","severity":1,"message":"280","line":2824,"column":8,"nodeType":"281","messageId":"282","endLine":2829,"endColumn":2},{"ruleId":"279","severity":1,"message":"280","line":2879,"column":8,"nodeType":"281","messageId":"282","endLine":2884,"endColumn":2},{"ruleId":"279","severity":1,"message":"280","line":3018,"column":8,"nodeType":"281","messageId":"282","endLine":3020,"endColumn":2},{"ruleId":"279","severity":1,"message":"280","line":3023,"column":8,"nodeType":"281","messageId":"282","endLine":3025,"endColumn":2},{"ruleId":"279","severity":1,"message":"280","line":3055,"column":8,"nodeType":"281","messageId":"282","endLine":3060,"endColumn":2},{"ruleId":"279","severity":1,"message":"280","line":3066,"column":8,"nodeType":"281","messageId":"282","endLine":3071,"endColumn":2},{"ruleId":"279","severity":1,"message":"280","line":3111,"column":8,"nodeType":"281","messageId":"282","endLine":3116,"endColumn":2},{"ruleId":"279","severity":1,"message":"280","line":3122,"column":8,"nodeType":"281","messageId":"282","endLine":3127,"endColumn":2},{"ruleId":"279","severity":1,"message":"280","line":3173,"column":8,"nodeType":"281","messageId":"282","endLine":3178,"endColumn":2},{"ruleId":"279","severity":1,"message":"280","line":3184,"column":8,"nodeType":"281","messageId":"282","endLine":3189,"endColumn":2},{"ruleId":"279","severity":1,"message":"280","line":3280,"column":8,"nodeType":"281","messageId":"282","endLine":3282,"endColumn":2},{"ruleId":"279","severity":1,"message":"280","line":3288,"column":8,"nodeType":"281","messageId":"282","endLine":3290,"endColumn":2},{"ruleId":"279","severity":1,"message":"280","line":3357,"column":8,"nodeType":"281","messageId":"282","endLine":3359,"endColumn":2},{"ruleId":"279","severity":1,"message":"280","line":3362,"column":8,"nodeType":"281","messageId":"282","endLine":3364,"endColumn":2},{"ruleId":"279","severity":1,"message":"280","line":3400,"column":8,"nodeType":"281","messageId":"282","endLine":3402,"endColumn":2},{"ruleId":"279","severity":1,"message":"280","line":3408,"column":8,"nodeType":"281","messageId":"282","endLine":3410,"endColumn":2},{"ruleId":"279","severity":1,"message":"280","line":3452,"column":8,"nodeType":"281","messageId":"282","endLine":3457,"endColumn":2},{"ruleId":"279","severity":1,"message":"280","line":3463,"column":8,"nodeType":"281","messageId":"282","endLine":3468,"endColumn":2},{"ruleId":"279","severity":1,"message":"280","line":3521,"column":8,"nodeType":"281","messageId":"282","endLine":3526,"endColumn":2},{"ruleId":"279","severity":1,"message":"280","line":3532,"column":8,"nodeType":"281","messageId":"282","endLine":3537,"endColumn":2},{"ruleId":"279","severity":1,"message":"280","line":3575,"column":8,"nodeType":"281","messageId":"282","endLine":3577,"endColumn":2},{"ruleId":"279","severity":1,"message":"280","line":3583,"column":8,"nodeType":"281","messageId":"282","endLine":3588,"endColumn":2},{"ruleId":"279","severity":1,"message":"280","line":3627,"column":8,"nodeType":"281","messageId":"282","endLine":3632,"endColumn":2},{"ruleId":"279","severity":1,"message":"280","line":3638,"column":8,"nodeType":"281","messageId":"282","endLine":3643,"endColumn":2},{"ruleId":"279","severity":1,"message":"280","line":3688,"column":8,"nodeType":"281","messageId":"282","endLine":3690,"endColumn":2},{"ruleId":"279","severity":1,"message":"280","line":3696,"column":8,"nodeType":"281","messageId":"282","endLine":3698,"endColumn":2},{"ruleId":"279","severity":1,"message":"280","line":3735,"column":8,"nodeType":"281","messageId":"282","endLine":3737,"endColumn":2},{"ruleId":"279","severity":1,"message":"280","line":3743,"column":8,"nodeType":"281","messageId":"282","endLine":3745,"endColumn":2},{"ruleId":"279","severity":1,"message":"280","line":3788,"column":8,"nodeType":"281","messageId":"282","endLine":3793,"endColumn":2},{"ruleId":"279","severity":1,"message":"280","line":3799,"column":8,"nodeType":"281","messageId":"282","endLine":3804,"endColumn":2},{"ruleId":"279","severity":1,"message":"280","line":3871,"column":8,"nodeType":"281","messageId":"282","endLine":3876,"endColumn":2},{"ruleId":"279","severity":1,"message":"280","line":3909,"column":8,"nodeType":"281","messageId":"282","endLine":3914,"endColumn":2},{"ruleId":"279","severity":1,"message":"280","line":3948,"column":8,"nodeType":"281","messageId":"282","endLine":3953,"endColumn":2},{"ruleId":"279","severity":1,"message":"280","line":3987,"column":8,"nodeType":"281","messageId":"282","endLine":3992,"endColumn":2},{"ruleId":"279","severity":1,"message":"280","line":4053,"column":8,"nodeType":"281","messageId":"282","endLine":4058,"endColumn":2},{"ruleId":"279","severity":1,"message":"280","line":4092,"column":8,"nodeType":"281","messageId":"282","endLine":4097,"endColumn":2},{"ruleId":"271","severity":1,"message":"272","line":2,"column":26,"nodeType":"273","messageId":"274","endLine":2,"endColumn":29,"suggestions":"283"},{"ruleId":"271","severity":1,"message":"272","line":6,"column":18,"nodeType":"273","messageId":"274","endLine":6,"endColumn":21,"suggestions":"284"},{"ruleId":"271","severity":1,"message":"272","line":25,"column":46,"nodeType":"273","messageId":"274","endLine":25,"endColumn":49,"suggestions":"285"},"@typescript-eslint/no-explicit-any","Unexpected any. Specify a different type.","TSAnyKeyword","unexpectedAny",["286","287"],["288","289"],["290","291"],["292","293"],"@typescript-eslint/explicit-module-boundary-types","Missing return type on function.","FunctionDeclaration","missingReturnType",["294","295"],["296","297"],["298","299"],{"messageId":"300","fix":"301","desc":"302"},{"messageId":"303","fix":"304","desc":"305"},{"messageId":"300","fix":"306","desc":"302"},{"messageId":"303","fix":"307","desc":"305"},{"messageId":"300","fix":"308","desc":"302"},{"messageId":"303","fix":"309","desc":"305"},{"messageId":"300","fix":"310","desc":"302"},{"messageId":"303","fix":"311","desc":"305"},{"messageId":"300","fix":"312","desc":"302"},{"messageId":"303","fix":"313","desc":"305"},{"messageId":"300","fix":"314","desc":"302"},{"messageId":"303","fix":"315","desc":"305"},{"messageId":"300","fix":"316","desc":"302"},{"messageId":"303","fix":"317","desc":"305"},"suggestUnknown",{"range":"318","text":"319"},"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct.","suggestNever",{"range":"318","text":"320"},"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of.",{"range":"321","text":"319"},{"range":"321","text":"320"},{"range":"322","text":"319"},{"range":"322","text":"320"},{"range":"323","text":"319"},{"range":"323","text":"320"},{"range":"324","text":"319"},{"range":"324","text":"320"},{"range":"325","text":"319"},{"range":"325","text":"320"},{"range":"326","text":"319"},{"range":"326","text":"320"},[613,616],"unknown","never",[1910,1913],[2952,2955],[586,589],[53,56],[109,112],[670,673]]