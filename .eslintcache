[{"/Users/giovanni/programming/wine-app-frontend/src/index.tsx":"1","/Users/giovanni/programming/wine-app-frontend/src/reportWebVitals.ts":"2","/Users/giovanni/programming/wine-app-frontend/src/cache.ts":"3","/Users/giovanni/programming/wine-app-frontend/src/App.tsx":"4","/Users/giovanni/programming/wine-app-frontend/src/generated/graphql.tsx":"5","/Users/giovanni/programming/wine-app-frontend/src/pages/index.tsx":"6","/Users/giovanni/programming/wine-app-frontend/src/pages/Ads.tsx":"7","/Users/giovanni/programming/wine-app-frontend/src/pages/Profile.tsx":"8","/Users/giovanni/programming/wine-app-frontend/src/pages/Ad.tsx":"9","/Users/giovanni/programming/wine-app-frontend/src/pages/Signup.tsx":"10","/Users/giovanni/programming/wine-app-frontend/src/components/Notification.tsx":"11","/Users/giovanni/programming/wine-app-frontend/src/components/UserForm/index.tsx":"12","/Users/giovanni/programming/wine-app-frontend/src/utils/pivaValidator.ts":"13","/Users/giovanni/programming/wine-app-frontend/src/utils/passwordValidator.ts":"14","/Users/giovanni/programming/wine-app-frontend/src/utils/phoneNumberValidator.ts":"15","/Users/giovanni/programming/wine-app-frontend/src/utils/formHelper.ts":"16","/Users/giovanni/programming/wine-app-frontend/src/pages/Home.tsx":"17","/Users/giovanni/programming/wine-app-frontend/src/components/Navigation/index.tsx":"18","/Users/giovanni/programming/wine-app-frontend/src/components/Navigation/AppBar.tsx":"19","/Users/giovanni/programming/wine-app-frontend/src/components/Navigation/Drawer.tsx":"20","/Users/giovanni/programming/wine-app-frontend/src/components/LoginModal/LoginForm.tsx":"21","/Users/giovanni/programming/wine-app-frontend/src/components/FormFields/PasswordField.tsx":"22","/Users/giovanni/programming/wine-app-frontend/src/components/FormFields/TextField.tsx":"23","/Users/giovanni/programming/wine-app-frontend/src/components/LoginModal/index.tsx":"24","/Users/giovanni/programming/wine-app-frontend/src/components/FormFields/SliderField.tsx":"25","/Users/giovanni/programming/wine-app-frontend/src/components/FormFields/ComboboxField.tsx":"26","/Users/giovanni/programming/wine-app-frontend/src/components/FormFields/ComboboxComuni.tsx":"27","/Users/giovanni/programming/wine-app-frontend/src/components/FormFields/ComboboxFieldWines.tsx":"28","/Users/giovanni/programming/wine-app-frontend/src/components/FormFields/TextFieldAdornment.tsx":"29","/Users/giovanni/programming/wine-app-frontend/src/components/WineForms/Post/WineFormMutation.tsx":"30","/Users/giovanni/programming/wine-app-frontend/src/components/FormFields/SelectField.tsx":"31","/Users/giovanni/programming/wine-app-frontend/src/components/AddressForm/index.tsx":"32","/Users/giovanni/programming/wine-app-frontend/src/pages/BuySell.tsx":"33","/Users/giovanni/programming/wine-app-frontend/src/utils/multiFilter.ts":"34","/Users/giovanni/programming/wine-app-frontend/src/components/BackButton.tsx":"35","/Users/giovanni/programming/wine-app-frontend/src/components/Snackbar.tsx":"36","/Users/giovanni/programming/wine-app-frontend/src/pages/MyAds.tsx":"37","/Users/giovanni/programming/wine-app-frontend/src/utils/updateCache.ts":"38","/Users/giovanni/programming/wine-app-frontend/src/pages/Negotiations.tsx":"39","/Users/giovanni/programming/wine-app-frontend/src/pages/Negotiation.tsx":"40","/Users/giovanni/programming/wine-app-frontend/src/components/OpenNegotiations.tsx":"41","/Users/giovanni/programming/wine-app-frontend/src/pages/Messages.tsx":"42","/Users/giovanni/programming/wine-app-frontend/src/components/Chat/index.tsx":"43","/Users/giovanni/programming/wine-app-frontend/src/pages/Message.tsx":"44","/Users/giovanni/programming/wine-app-frontend/src/components/Chat/MessageChat.tsx":"45","/Users/giovanni/programming/wine-app-frontend/src/components/FilterAds/Order.tsx":"46","/Users/giovanni/programming/wine-app-frontend/src/components/FilterAds/index.tsx":"47","/Users/giovanni/programming/wine-app-frontend/src/utils/useIntersectionHook.tsx":"48","/Users/giovanni/programming/wine-app-frontend/src/containers/CloseNegotiationButton.tsx":"49","/Users/giovanni/programming/wine-app-frontend/src/pages/SavedAds.tsx":"50","/Users/giovanni/programming/wine-app-frontend/src/utils/styleHook.tsx":"51","/Users/giovanni/programming/wine-app-frontend/src/containers/CreateReview.tsx":"52","/Users/giovanni/programming/wine-app-frontend/src/pages/Reviews.tsx":"53","/Users/giovanni/programming/wine-app-frontend/src/components/Loading.tsx":"54","/Users/giovanni/programming/wine-app-frontend/src/components/ReviewModal/index.tsx":"55","/Users/giovanni/programming/wine-app-frontend/src/containers/InfiniteScrollFetch.tsx":"56","/Users/giovanni/programming/wine-app-frontend/src/containers/StyledBox.tsx":"57","/Users/giovanni/programming/wine-app-frontend/src/components/Cards/CardNegotiation.tsx":"58","/Users/giovanni/programming/wine-app-frontend/src/components/Cards/CardReview.tsx":"59","/Users/giovanni/programming/wine-app-frontend/src/components/Cards/CardWine.tsx":"60","/Users/giovanni/programming/wine-app-frontend/src/components/Cards/CardWineDetail.tsx":"61","/Users/giovanni/programming/wine-app-frontend/src/containers/FavoriteButton.tsx":"62","/Users/giovanni/programming/wine-app-frontend/src/components/SwipableTabsNotification/index.tsx":"63","/Users/giovanni/programming/wine-app-frontend/src/components/SwipableTabsNotification/NotificationListEl.tsx":"64","/Users/giovanni/programming/wine-app-frontend/src/components/SwipableTabsNotification/MessageListEl.tsx":"65","/Users/giovanni/programming/wine-app-frontend/src/components/NotificationModal/index.tsx":"66","/Users/giovanni/programming/wine-app-frontend/src/components/NegotiationModals/OpenNegotiationModal.tsx":"67","/Users/giovanni/programming/wine-app-frontend/src/components/NegotiationModals/CloseNegotiationModal.tsx":"68","/Users/giovanni/programming/wine-app-frontend/src/containers/CancelNegotiationButton.tsx":"69","/Users/giovanni/programming/wine-app-frontend/src/utils/wineList.ts":"70"},{"size":2564,"mtime":1618731905214,"results":"71","hashOfConfig":"72"},{"size":531,"mtime":1612412796133,"results":"73","hashOfConfig":"72"},{"size":5769,"mtime":1622434653517,"results":"74","hashOfConfig":"72"},{"size":855,"mtime":1622364029317,"results":"75","hashOfConfig":"72"},{"size":116689,"mtime":1622447088868,"results":"76","hashOfConfig":"72"},{"size":2251,"mtime":1622446777311,"results":"77","hashOfConfig":"72"},{"size":6034,"mtime":1621582191335,"results":"78","hashOfConfig":"72"},{"size":825,"mtime":1608955028589,"results":"79","hashOfConfig":"80"},{"size":3625,"mtime":1621582191323,"results":"81","hashOfConfig":"72"},{"size":1842,"mtime":1622449906192,"results":"82","hashOfConfig":"72"},{"size":1151,"mtime":1621323262798,"results":"83","hashOfConfig":"72"},{"size":8725,"mtime":1622449652417,"results":"84","hashOfConfig":"72"},{"size":429,"mtime":1611032464869,"results":"85","hashOfConfig":"72"},{"size":506,"mtime":1610946072446,"results":"86","hashOfConfig":"72"},{"size":236,"mtime":1610947451436,"results":"87","hashOfConfig":"72"},{"size":137468,"mtime":1622449225385,"results":"88","hashOfConfig":"72"},{"size":3068,"mtime":1617862917385,"results":"89","hashOfConfig":"72"},{"size":4224,"mtime":1619766423983,"results":"90","hashOfConfig":"72"},{"size":4503,"mtime":1621318061405,"results":"91","hashOfConfig":"72"},{"size":4873,"mtime":1621582191427,"results":"92","hashOfConfig":"72"},{"size":3987,"mtime":1620797748340,"results":"93","hashOfConfig":"72"},{"size":1902,"mtime":1614133826727,"results":"94","hashOfConfig":"72"},{"size":1407,"mtime":1621665441150,"results":"95","hashOfConfig":"72"},{"size":905,"mtime":1617433993770,"results":"96","hashOfConfig":"72"},{"size":869,"mtime":1621665541346,"results":"97","hashOfConfig":"72"},{"size":1461,"mtime":1621665473870,"results":"98","hashOfConfig":"72"},{"size":6164,"mtime":1622446777311,"results":"99","hashOfConfig":"72"},{"size":4431,"mtime":1622447214012,"results":"100","hashOfConfig":"72"},{"size":1491,"mtime":1621664904938,"results":"101","hashOfConfig":"72"},{"size":9795,"mtime":1622446777311,"results":"102","hashOfConfig":"72"},{"size":1406,"mtime":1621665421036,"results":"103","hashOfConfig":"72"},{"size":750,"mtime":1622447300165,"results":"104","hashOfConfig":"72"},{"size":4376,"mtime":1622447324029,"results":"105","hashOfConfig":"72"},{"size":665,"mtime":1615502445800,"results":"106","hashOfConfig":"72"},{"size":1419,"mtime":1618282553671,"results":"107","hashOfConfig":"72"},{"size":1111,"mtime":1618732776226,"results":"108","hashOfConfig":"80"},{"size":4731,"mtime":1622447460045,"results":"109","hashOfConfig":"72"},{"size":10772,"mtime":1622434653921,"results":"110","hashOfConfig":"72"},{"size":4778,"mtime":1622422599154,"results":"111","hashOfConfig":"72"},{"size":2710,"mtime":1621489604490,"results":"112","hashOfConfig":"72"},{"size":3324,"mtime":1621489604504,"results":"113","hashOfConfig":"72"},{"size":1867,"mtime":1621237959406,"results":"114","hashOfConfig":"72"},{"size":4150,"mtime":1621662949449,"results":"115","hashOfConfig":"72"},{"size":3921,"mtime":1621582191398,"results":"116","hashOfConfig":"72"},{"size":1309,"mtime":1618651574362,"results":"117","hashOfConfig":"72"},{"size":1371,"mtime":1619055041038,"results":"118","hashOfConfig":"72"},{"size":3460,"mtime":1620375470633,"results":"119","hashOfConfig":"72"},{"size":927,"mtime":1618471771321,"results":"120","hashOfConfig":"72"},{"size":1320,"mtime":1621494088431,"results":"121","hashOfConfig":"72"},{"size":1217,"mtime":1618820693162,"results":"122","hashOfConfig":"72"},{"size":3923,"mtime":1621665235486,"results":"123","hashOfConfig":"72"},{"size":1307,"mtime":1618303937066,"results":"124","hashOfConfig":"72"},{"size":3438,"mtime":1621582191323,"results":"125","hashOfConfig":"72"},{"size":597,"mtime":1618283610575,"results":"126","hashOfConfig":"72"},{"size":4130,"mtime":1621666846873,"results":"127","hashOfConfig":"72"},{"size":2156,"mtime":1619146504339,"results":"128","hashOfConfig":"72"},{"size":830,"mtime":1618728843853,"results":"129","hashOfConfig":"72"},{"size":3528,"mtime":1622422048552,"results":"130","hashOfConfig":"72"},{"size":1695,"mtime":1619146977765,"results":"131","hashOfConfig":"72"},{"size":3415,"mtime":1622421520908,"results":"132","hashOfConfig":"72"},{"size":3002,"mtime":1622447375373,"results":"133","hashOfConfig":"72"},{"size":1529,"mtime":1621668420235,"results":"134","hashOfConfig":"72"},{"size":4375,"mtime":1622434653921,"results":"135","hashOfConfig":"72"},{"size":950,"mtime":1621076389870,"results":"136","hashOfConfig":"72"},{"size":2092,"mtime":1621076258721,"results":"137","hashOfConfig":"72"},{"size":1083,"mtime":1621489604649,"results":"138","hashOfConfig":"72"},{"size":992,"mtime":1621326521237,"results":"139","hashOfConfig":"72"},{"size":1637,"mtime":1621666865928,"results":"140","hashOfConfig":"72"},{"size":1440,"mtime":1621499814052,"results":"141","hashOfConfig":"72"},{"size":170802,"mtime":1622444874545,"results":"142","hashOfConfig":"72"},{"filePath":"143","messages":"144","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"145"},"e339r8",{"filePath":"146","messages":"147","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"145"},{"filePath":"148","messages":"149","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"145"},{"filePath":"150","messages":"151","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"145"},{"filePath":"152","messages":"153","errorCount":0,"warningCount":58,"fixableErrorCount":0,"fixableWarningCount":0,"source":"154","usedDeprecatedRules":"145"},{"filePath":"155","messages":"156","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"145"},{"filePath":"157","messages":"158","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"159","usedDeprecatedRules":"145"},{"filePath":"160","messages":"161","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"162"},"1hdo000",{"filePath":"163","messages":"164","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"145"},{"filePath":"165","messages":"166","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"145"},{"filePath":"167","messages":"168","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"169","usedDeprecatedRules":"145"},{"filePath":"170","messages":"171","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"145"},{"filePath":"172","messages":"173","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"145"},{"filePath":"174","messages":"175","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"145"},{"filePath":"176","messages":"177","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"145"},{"filePath":"178","messages":"179","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"145"},{"filePath":"180","messages":"181","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"145"},{"filePath":"182","messages":"183","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"184","usedDeprecatedRules":"145"},{"filePath":"185","messages":"186","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"145"},{"filePath":"187","messages":"188","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"145"},{"filePath":"189","messages":"190","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"191"},{"filePath":"192","messages":"193","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"145"},{"filePath":"194","messages":"195","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"145"},{"filePath":"196","messages":"197","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"145"},{"filePath":"198","messages":"199","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"145"},{"filePath":"200","messages":"201","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"202"},{"filePath":"203","messages":"204","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"145"},{"filePath":"205","messages":"206","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"207","usedDeprecatedRules":"145"},{"filePath":"208","messages":"209","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"145"},{"filePath":"210","messages":"211","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"145"},{"filePath":"212","messages":"213","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"145"},{"filePath":"214","messages":"215","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"202"},{"filePath":"216","messages":"217","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"145"},{"filePath":"218","messages":"219","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"220","usedDeprecatedRules":"145"},{"filePath":"221","messages":"222","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"145"},{"filePath":"223","messages":"224","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"225"},{"filePath":"226","messages":"227","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"228","usedDeprecatedRules":"145"},{"filePath":"229","messages":"230","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"231","usedDeprecatedRules":"145"},{"filePath":"232","messages":"233","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"234","usedDeprecatedRules":"145"},{"filePath":"235","messages":"236","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"145"},{"filePath":"237","messages":"238","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"145"},{"filePath":"239","messages":"240","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"145"},{"filePath":"241","messages":"242","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"243","usedDeprecatedRules":"145"},{"filePath":"244","messages":"245","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"246","usedDeprecatedRules":"145"},{"filePath":"247","messages":"248","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"145"},{"filePath":"249","messages":"250","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"145"},{"filePath":"251","messages":"252","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"253","usedDeprecatedRules":"145"},{"filePath":"254","messages":"255","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"256","usedDeprecatedRules":"145"},{"filePath":"257","messages":"258","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"145"},{"filePath":"259","messages":"260","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"145"},{"filePath":"261","messages":"262","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"145"},{"filePath":"263","messages":"264","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"145"},{"filePath":"265","messages":"266","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"267","usedDeprecatedRules":"145"},{"filePath":"268","messages":"269","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"145"},{"filePath":"270","messages":"271","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"145"},{"filePath":"272","messages":"273","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"274","usedDeprecatedRules":"145"},{"filePath":"275","messages":"276","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"145"},{"filePath":"277","messages":"278","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"145"},{"filePath":"279","messages":"280","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"145"},{"filePath":"281","messages":"282","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"145"},{"filePath":"283","messages":"284","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"145"},{"filePath":"285","messages":"286","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"287","usedDeprecatedRules":"145"},{"filePath":"288","messages":"289","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"145"},{"filePath":"290","messages":"291","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"145"},{"filePath":"292","messages":"293","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"145"},{"filePath":"294","messages":"295","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"145"},{"filePath":"296","messages":"297","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"145"},{"filePath":"298","messages":"299","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"145"},{"filePath":"300","messages":"301","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"145"},{"filePath":"302","messages":"303","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"145"},"/Users/giovanni/programming/wine-app-frontend/src/index.tsx",[],[],"/Users/giovanni/programming/wine-app-frontend/src/reportWebVitals.ts",[],"/Users/giovanni/programming/wine-app-frontend/src/cache.ts",[],"/Users/giovanni/programming/wine-app-frontend/src/App.tsx",[],"/Users/giovanni/programming/wine-app-frontend/src/generated/graphql.tsx",["304","305","306","307","308","309","310","311","312","313","314","315","316","317","318","319","320","321","322","323","324","325","326","327","328","329","330","331","332","333","334","335","336","337","338","339","340","341","342","343","344","345","346","347","348","349","350","351","352","353","354","355","356","357","358","359","360","361"],"import { gql } from '@apollo/client';\nimport * as Apollo from '@apollo/client';\nexport type Maybe<T> = T | null;\nexport type Exact<T extends { [key: string]: unknown }> = {\n  [K in keyof T]: T[K];\n};\nexport type MakeOptional<T, K extends keyof T> = Omit<T, K> &\n  { [SubKey in K]?: Maybe<T[SubKey]> };\nexport type MakeMaybe<T, K extends keyof T> = Omit<T, K> &\n  { [SubKey in K]: Maybe<T[SubKey]> };\n/** All built-in and custom scalars, mapped to their actual values */\nexport type Scalars = {\n  ID: string;\n  String: string;\n  Boolean: boolean;\n  Int: number;\n  Float: number;\n  Date: any;\n};\n\nexport type Address = {\n  __typename?: 'Address';\n  via?: Maybe<Scalars['String']>;\n  CAP?: Maybe<Scalars['String']>;\n  comune: Scalars['String'];\n};\n\nexport type AddressInput = {\n  via?: Maybe<Scalars['String']>;\n  CAP?: Maybe<Scalars['String']>;\n  comune: Scalars['String'];\n};\n\nexport type AdInput = {\n  typeAd: TypeAd;\n  typeProduct: TypeProduct;\n  content?: Maybe<Scalars['String']>;\n  harvest: Scalars['Int'];\n  abv: Scalars['Float'];\n  wine?: Maybe<Scalars['ID']>;\n  wineName?: Maybe<Scalars['String']>;\n  vineyard?: Maybe<Scalars['ID']>;\n  vineyardName?: Maybe<Scalars['String']>;\n  sottoZona?: Maybe<Scalars['String']>;\n  menzione?: Maybe<Menzione>;\n  metodoProduttivo?: Maybe<MetodoProduttivo>;\n  priceFrom: Scalars['Float'];\n  priceTo: Scalars['Float'];\n  litersFrom?: Maybe<Scalars['Int']>;\n  litersTo?: Maybe<Scalars['Int']>;\n  kgFrom?: Maybe<Scalars['Int']>;\n  kgTo?: Maybe<Scalars['Int']>;\n  needsFollowUp?: Maybe<Scalars['Boolean']>;\n};\n\nexport type AdInputUpdate = {\n  _id: Scalars['ID'];\n  wine?: Maybe<Scalars['ID']>;\n  wineName?: Maybe<Scalars['String']>;\n  vineyard?: Maybe<Scalars['ID']>;\n  vineyardName?: Maybe<Scalars['String']>;\n  sottoZona?: Maybe<Scalars['String']>;\n  menzione?: Maybe<Menzione>;\n  metodoProduttivo?: Maybe<MetodoProduttivo>;\n  harvest?: Maybe<Scalars['Int']>;\n  abv?: Maybe<Scalars['Float']>;\n  priceFrom?: Maybe<Scalars['Float']>;\n  priceTo?: Maybe<Scalars['Float']>;\n  litersFrom?: Maybe<Scalars['Int']>;\n  litersTo?: Maybe<Scalars['Int']>;\n  content?: Maybe<Scalars['String']>;\n  address?: Maybe<AddressInput>;\n  isActive?: Maybe<Scalars['Boolean']>;\n  needsFollowUp?: Maybe<Scalars['Boolean']>;\n};\n\nexport type Ad = {\n  _id: Scalars['ID'];\n  postedBy: User;\n  harvest: Scalars['Int'];\n  abv: Scalars['Float'];\n  priceFrom: Scalars['Float'];\n  priceTo: Scalars['Float'];\n  content?: Maybe<Scalars['String']>;\n  negotiations?: Maybe<Array<Negotiation>>;\n  activeNegotiations?: Maybe<Scalars['Int']>;\n  savedTimes?: Maybe<Scalars['Int']>;\n  /** viewedBy: [User] */\n  numberViews?: Maybe<Scalars['Int']>;\n  typeAd: TypeAd;\n  typeProduct: TypeProduct;\n  isActive: Scalars['Boolean'];\n  datePosted?: Maybe<Scalars['String']>;\n  needsFollowUp?: Maybe<Scalars['Boolean']>;\n};\n\nexport type AdDatePostedArgs = {\n  format?: Maybe<Scalars['String']>;\n};\n\nexport type AdWine = Ad & {\n  __typename?: 'AdWine';\n  _id: Scalars['ID'];\n  postedBy: User;\n  wineName: Scalars['String'];\n  wine?: Maybe<Wine>;\n  sottoZona?: Maybe<Scalars['String']>;\n  menzione?: Maybe<Menzione>;\n  metodoProduttivo?: Maybe<MetodoProduttivo>;\n  harvest: Scalars['Int'];\n  abv: Scalars['Float'];\n  priceFrom: Scalars['Float'];\n  priceTo: Scalars['Float'];\n  litersFrom?: Maybe<Scalars['Int']>;\n  litersTo?: Maybe<Scalars['Int']>;\n  content?: Maybe<Scalars['String']>;\n  negotiations?: Maybe<Array<Negotiation>>;\n  activeNegotiations?: Maybe<Scalars['Int']>;\n  savedTimes?: Maybe<Scalars['Int']>;\n  /** viewedBy: [User] */\n  numberViews?: Maybe<Scalars['Int']>;\n  typeAd: TypeAd;\n  typeProduct: TypeProduct;\n  isActive: Scalars['Boolean'];\n  datePosted?: Maybe<Scalars['String']>;\n  needsFollowUp?: Maybe<Scalars['Boolean']>;\n};\n\nexport type AdWineDatePostedArgs = {\n  format?: Maybe<Scalars['String']>;\n};\n\nexport type AdGrape = Ad & {\n  __typename?: 'AdGrape';\n  _id: Scalars['ID'];\n  postedBy: User;\n  vineyardName: Scalars['String'];\n  vineyard?: Maybe<Vineyard>;\n  harvest: Scalars['Int'];\n  abv: Scalars['Float'];\n  priceFrom: Scalars['Float'];\n  priceTo: Scalars['Float'];\n  kgFrom: Scalars['Int'];\n  kgTo: Scalars['Int'];\n  content?: Maybe<Scalars['String']>;\n  negotiations?: Maybe<Array<Negotiation>>;\n  activeNegotiations?: Maybe<Scalars['Int']>;\n  savedTimes?: Maybe<Scalars['Int']>;\n  /** viewedBy: [User] */\n  numberViews?: Maybe<Scalars['Int']>;\n  typeAd: TypeAd;\n  typeProduct: TypeProduct;\n  isActive: Scalars['Boolean'];\n  datePosted?: Maybe<Scalars['String']>;\n  needsFollowUp?: Maybe<Scalars['Boolean']>;\n};\n\nexport type AdGrapeDatePostedArgs = {\n  format?: Maybe<Scalars['String']>;\n};\n\nexport type AdsResult = {\n  __typename?: 'AdsResult';\n  ads?: Maybe<Array<Maybe<Ad>>>;\n  pageCount?: Maybe<Scalars['Int']>;\n};\n\nexport type AdPayload = {\n  __typename?: 'AdPayload';\n  response?: Maybe<Ad>;\n  errors?: Maybe<Array<Maybe<Errors>>>;\n};\n\nexport type Query = {\n  __typename?: 'Query';\n  ad?: Maybe<Ad>;\n  ads?: Maybe<AdsResult>;\n  adsForUser?: Maybe<AdsResult>;\n  isLoggedIn: Scalars['Boolean'];\n  me?: Maybe<User>;\n  message?: Maybe<Message>;\n  messages?: Maybe<Array<Message>>;\n  messagesForNegotiation?: Maybe<MessageResult>;\n  messagesToUser?: Maybe<Array<Message>>;\n  myInfo?: Maybe<User>;\n  negotiation?: Maybe<Negotiation>;\n  negotiations?: Maybe<NegotiationResult>;\n  negotiationsForAd?: Maybe<Array<Negotiation>>;\n  negotiationsWithUser?: Maybe<Array<Negotiation>>;\n  notification?: Maybe<Notification>;\n  review?: Maybe<Review>;\n  reviews?: Maybe<ReviewResult>;\n  searchedWine?: Maybe<WineSearched>;\n  user?: Maybe<User>;\n  users?: Maybe<Array<User>>;\n  vineyard?: Maybe<Vineyard>;\n  vineyards?: Maybe<Array<Vineyard>>;\n  wine?: Maybe<Wine>;\n  wines?: Maybe<Array<Wine>>;\n};\n\nexport type QueryAdArgs = {\n  id: Scalars['ID'];\n};\n\nexport type QueryAdsArgs = {\n  typeAd: TypeAd;\n  typeProduct: TypeProduct;\n  wineName?: Maybe<Scalars['String']>;\n  vineyardName?: Maybe<Scalars['String']>;\n  offset?: Maybe<Scalars['Int']>;\n  orderBy?: Maybe<QueryOrderBy>;\n  limit?: Maybe<Scalars['Int']>;\n};\n\nexport type QueryAdsForUserArgs = {\n  offset?: Maybe<Scalars['Int']>;\n  orderBy?: Maybe<QueryOrderBy>;\n  limit?: Maybe<Scalars['Int']>;\n  isActive?: Maybe<Scalars['Boolean']>;\n  user: Scalars['ID'];\n};\n\nexport type QueryMessageArgs = {\n  id: Scalars['ID'];\n};\n\nexport type QueryMessagesForNegotiationArgs = {\n  negotiation: Scalars['ID'];\n  offset?: Maybe<Scalars['Int']>;\n  limit?: Maybe<Scalars['Int']>;\n};\n\nexport type QueryMessagesToUserArgs = {\n  sentTo: Scalars['ID'];\n};\n\nexport type QueryNegotiationArgs = {\n  id: Scalars['ID'];\n};\n\nexport type QueryNegotiationsArgs = {\n  offset?: Maybe<Scalars['Int']>;\n  orderBy?: Maybe<QueryOrderBy>;\n  limit?: Maybe<Scalars['Int']>;\n  isConcluded?: Maybe<Scalars['Boolean']>;\n};\n\nexport type QueryNegotiationsForAdArgs = {\n  ad: Scalars['ID'];\n};\n\nexport type QueryNegotiationsWithUserArgs = {\n  forUserAd: Scalars['ID'];\n};\n\nexport type QueryReviewArgs = {\n  id: Scalars['ID'];\n};\n\nexport type QueryReviewsArgs = {\n  offset?: Maybe<Scalars['Int']>;\n  orderBy?: Maybe<QueryOrderBy>;\n  limit?: Maybe<Scalars['Int']>;\n};\n\nexport type QueryUserArgs = {\n  id: Scalars['ID'];\n};\n\nexport type QueryVineyardArgs = {\n  id: Scalars['ID'];\n};\n\nexport type QueryWineArgs = {\n  id: Scalars['ID'];\n};\n\nexport type Mutation = {\n  __typename?: 'Mutation';\n  createAd?: Maybe<AdPayload>;\n  updateAd?: Maybe<AdPayload>;\n  deleteAd?: Maybe<AdPayload>;\n  saveAd?: Maybe<AdPayload>;\n  createMessage?: Maybe<MessagePayload>;\n  createNegotiation?: Maybe<NegotiationPayload>;\n  updateNegotiation?: Maybe<NegotiationPayload>;\n  deleteNegotiation?: Maybe<NegotiationPayload>;\n  createReview?: Maybe<ReviewPayload>;\n  updateReview?: Maybe<ReviewPayload>;\n  deleteReview?: Maybe<ReviewPayload>;\n  createUser?: Maybe<AuthUserPayload>;\n  updateUser?: Maybe<UserPayload>;\n  deleteUser?: Maybe<UserPayload>;\n  login?: Maybe<AuthUserPayload>;\n  createWine?: Maybe<WinePayload>;\n  updateWine?: Maybe<WinePayload>;\n  deleteWine?: Maybe<WinePayload>;\n  createVineyard?: Maybe<VineyardPayload>;\n  updateVineyard?: Maybe<VineyardPayload>;\n  deleteVineyard?: Maybe<VineyardPayload>;\n};\n\nexport type MutationCreateAdArgs = {\n  input: AdInput;\n};\n\nexport type MutationUpdateAdArgs = {\n  input: AdInputUpdate;\n};\n\nexport type MutationDeleteAdArgs = {\n  id: Scalars['ID'];\n};\n\nexport type MutationSaveAdArgs = {\n  id: Scalars['ID'];\n};\n\nexport type MutationCreateMessageArgs = {\n  message: MessageInput;\n};\n\nexport type MutationCreateNegotiationArgs = {\n  negotiation: NegotiationInput;\n};\n\nexport type MutationUpdateNegotiationArgs = {\n  negotiation: NegotiationInputUpdate;\n};\n\nexport type MutationDeleteNegotiationArgs = {\n  id: Scalars['ID'];\n};\n\nexport type MutationCreateReviewArgs = {\n  review: ReviewInput;\n};\n\nexport type MutationUpdateReviewArgs = {\n  review: ReviewInputUpdate;\n};\n\nexport type MutationDeleteReviewArgs = {\n  id: Scalars['ID'];\n};\n\nexport type MutationCreateUserArgs = {\n  user: UserInput;\n};\n\nexport type MutationUpdateUserArgs = {\n  user: UserInputUpdate;\n};\n\nexport type MutationDeleteUserArgs = {\n  id: Scalars['ID'];\n};\n\nexport type MutationLoginArgs = {\n  email: Scalars['String'];\n  password: Scalars['String'];\n};\n\nexport type MutationCreateWineArgs = {\n  wine: WineInput;\n};\n\nexport type MutationUpdateWineArgs = {\n  wine: WineInputUpdate;\n};\n\nexport type MutationDeleteWineArgs = {\n  id: Scalars['ID'];\n};\n\nexport type MutationCreateVineyardArgs = {\n  vineyard: VineyardInput;\n};\n\nexport type MutationUpdateVineyardArgs = {\n  vineyard: VineyardInputUpdate;\n};\n\nexport type MutationDeleteVineyardArgs = {\n  id: Scalars['ID'];\n};\n\nexport type Subscription = {\n  __typename?: 'Subscription';\n  adPostedFollowUp: Ad;\n  adRemoved: Ad;\n  messageSent: Message;\n  negotiationCreated: Negotiation;\n  negotiationClosed: Ad;\n  reviewCreated: Review;\n};\n\nexport type MessageInput = {\n  content: Scalars['String'];\n  sentTo: Scalars['ID'];\n  negotiation: Scalars['ID'];\n};\n\nexport type Message = {\n  __typename?: 'Message';\n  _id: Scalars['ID'];\n  content: Scalars['String'];\n  sentBy: User;\n  sentTo: User;\n  negotiation: Negotiation;\n  dateSent?: Maybe<Scalars['String']>;\n  isViewed: Scalars['Boolean'];\n};\n\nexport type MessageDateSentArgs = {\n  format?: Maybe<Scalars['String']>;\n};\n\nexport type MessagePayload = {\n  __typename?: 'MessagePayload';\n  response?: Maybe<Message>;\n  errors?: Maybe<Array<Maybe<Errors>>>;\n};\n\nexport type MessageResult = {\n  __typename?: 'MessageResult';\n  messages?: Maybe<Array<Maybe<Message>>>;\n  pageCount?: Maybe<Scalars['Int']>;\n};\n\nexport type NegotiationInput = {\n  ad: Scalars['ID'];\n  forUserAd: Scalars['ID'];\n  type: TypeAd;\n};\n\nexport type NegotiationInputUpdate = {\n  _id: Scalars['ID'];\n  isConcluded?: Maybe<Scalars['Boolean']>;\n};\n\nexport type Negotiation = {\n  __typename?: 'Negotiation';\n  _id: Scalars['ID'];\n  createdBy: User;\n  ad: Ad;\n  forUserAd: User;\n  messages?: Maybe<Array<Message>>;\n  isConcluded: Scalars['Boolean'];\n  dateCreated?: Maybe<Scalars['String']>;\n  dateConcluded?: Maybe<Scalars['String']>;\n  review?: Maybe<Array<Maybe<Review>>>;\n  type: TypeAd;\n};\n\nexport type NegotiationDateCreatedArgs = {\n  format?: Maybe<Scalars['String']>;\n};\n\nexport type NegotiationDateConcludedArgs = {\n  format?: Maybe<Scalars['String']>;\n};\n\nexport type NegotiationResult = {\n  __typename?: 'NegotiationResult';\n  negotiations?: Maybe<Array<Maybe<Negotiation>>>;\n  pageCount?: Maybe<Scalars['Int']>;\n};\n\nexport type NegotiationPayload = {\n  __typename?: 'NegotiationPayload';\n  response?: Maybe<Negotiation>;\n  errors?: Maybe<Array<Maybe<Errors>>>;\n};\n\nexport type ReviewInput = {\n  negotiation: Scalars['ID'];\n  forUser: Scalars['ID'];\n  rating: Scalars['Float'];\n  content: Scalars['String'];\n  type: TypeAd;\n};\n\nexport type ReviewInputUpdate = {\n  _id: Scalars['ID'];\n  rating?: Maybe<Scalars['Float']>;\n  content?: Maybe<Scalars['String']>;\n};\n\nexport type ReviewResult = {\n  __typename?: 'ReviewResult';\n  reviews?: Maybe<Array<Maybe<Review>>>;\n  pageCount?: Maybe<Scalars['Int']>;\n};\n\nexport type Review = {\n  __typename?: 'Review';\n  _id: Scalars['ID'];\n  createdBy: User;\n  negotiation: Negotiation;\n  forUser: User;\n  rating: Scalars['Float'];\n  dateCreated?: Maybe<Scalars['String']>;\n  content: Scalars['String'];\n  type: TypeAd;\n};\n\nexport type ReviewDateCreatedArgs = {\n  format?: Maybe<Scalars['String']>;\n};\n\nexport type ReviewPayload = {\n  __typename?: 'ReviewPayload';\n  response?: Maybe<Review>;\n  errors?: Maybe<Array<Maybe<Errors>>>;\n};\n\nexport type ProducedWines = {\n  __typename?: 'ProducedWines';\n  wine: Wine;\n  bottlesProduced: Scalars['Int'];\n  metodoProduttivo: MetodoProduttivo;\n};\n\nexport type OwnedVineyards = {\n  __typename?: 'OwnedVineyards';\n  vineyard: Vineyard;\n  tonsProduced: Scalars['Int'];\n  metodoProduttivo: MetodoProduttivo;\n};\n\nexport type ProducedWinesInput = {\n  wine: Scalars['ID'];\n  bottlesProduced?: Maybe<Scalars['Int']>;\n  metodoProduttivo?: Maybe<MetodoProduttivo>;\n};\n\nexport type OwnedVineyardsInput = {\n  vineyard: Scalars['ID'];\n  tonsProduced?: Maybe<Scalars['Int']>;\n  metodoProduttivo?: Maybe<MetodoProduttivo>;\n};\n\nexport type UserInput = {\n  email: Scalars['String'];\n  password: Scalars['String'];\n  firstName: Scalars['String'];\n  lastName: Scalars['String'];\n  pIva: Scalars['String'];\n  phoneNumber: Scalars['String'];\n  address: AddressInput;\n  hideContact: Scalars['Boolean'];\n  producedWines?: Maybe<ProducedWinesInput>;\n  ownedVineyards?: Maybe<OwnedVineyardsInput>;\n};\n\nexport type UserInputUpdate = {\n  _id: Scalars['ID'];\n  email?: Maybe<Scalars['String']>;\n  password?: Maybe<Scalars['String']>;\n  firstName?: Maybe<Scalars['String']>;\n  lastName?: Maybe<Scalars['String']>;\n  pIva?: Maybe<Scalars['String']>;\n  phoneNumber?: Maybe<Scalars['String']>;\n  address?: Maybe<AddressInput>;\n  isVerified?: Maybe<Scalars['Boolean']>;\n  isPremium?: Maybe<Scalars['Boolean']>;\n  hideContact: Scalars['Boolean'];\n  producedWines?: Maybe<ProducedWinesInput>;\n  ownedVineyards?: Maybe<OwnedVineyardsInput>;\n};\n\nexport type Coordinates = {\n  __typename?: 'Coordinates';\n  latitude?: Maybe<Scalars['Float']>;\n  longitude?: Maybe<Scalars['Float']>;\n};\n\nexport type User = {\n  __typename?: 'User';\n  _id: Scalars['ID'];\n  email: Scalars['String'];\n  firstName: Scalars['String'];\n  lastName: Scalars['String'];\n  pIva: Scalars['String'];\n  phoneNumber: Scalars['String'];\n  address: Address;\n  isVerified: Scalars['Boolean'];\n  coordinates?: Maybe<Coordinates>;\n  isPremium?: Maybe<Scalars['Boolean']>;\n  isAdmin: Scalars['Boolean'];\n  hideContact: Scalars['Boolean'];\n  ads?: Maybe<Array<Ad>>;\n  savedAds?: Maybe<Array<Ad>>;\n  messages?: Maybe<Array<Message>>;\n  negotiations?: Maybe<Array<Negotiation>>;\n  reviews?: Maybe<Array<Review>>;\n  adsRemaining?: Maybe<Scalars['Int']>;\n  dateCreated?: Maybe<Scalars['String']>;\n  producedWines?: Maybe<ProducedWines>;\n  ownedVineyards?: Maybe<OwnedVineyards>;\n};\n\nexport type UserDateCreatedArgs = {\n  format?: Maybe<Scalars['String']>;\n};\n\nexport type AuthUser = {\n  __typename?: 'AuthUser';\n  token: Scalars['String'];\n  user: User;\n};\n\nexport type AuthUserPayload = {\n  __typename?: 'AuthUserPayload';\n  response?: Maybe<AuthUser>;\n  errors?: Maybe<Array<Maybe<Errors>>>;\n};\n\nexport type UserPayload = {\n  __typename?: 'UserPayload';\n  response?: Maybe<User>;\n  errors?: Maybe<Array<Maybe<Errors>>>;\n};\n\nexport type WineInput = {\n  denominazioneVino: Scalars['String'];\n  tipoVino?: Maybe<Scalars['String']>;\n  espressioneComunitaria: EspressioneComunitaria;\n  denominazioneZona: DenomZona;\n  vitigni?: Maybe<Array<Maybe<Scalars['String']>>>;\n};\n\nexport type WineInputUpdate = {\n  _id: Scalars['ID'];\n  denominazioneVino?: Maybe<Scalars['String']>;\n  tipoVino?: Maybe<Scalars['String']>;\n  espressioneComunitaria?: Maybe<EspressioneComunitaria>;\n  denominazioneZona?: Maybe<DenomZona>;\n  vitigni?: Maybe<Array<Maybe<Scalars['String']>>>;\n};\n\nexport type Wine = {\n  __typename?: 'Wine';\n  _id: Scalars['ID'];\n  denominazioneVino: Scalars['String'];\n  tipoVino?: Maybe<Scalars['String']>;\n  espressioneComunitaria: EspressioneComunitaria;\n  denominazioneZona: DenomZona;\n  vitigni?: Maybe<Array<Maybe<Scalars['String']>>>;\n};\n\nexport type WinePayload = {\n  __typename?: 'WinePayload';\n  response?: Maybe<Wine>;\n  errors?: Maybe<Array<Maybe<Errors>>>;\n};\n\nexport type Vineyard = {\n  __typename?: 'Vineyard';\n  _id: Scalars['ID'];\n  name: Scalars['String'];\n  colore?: Maybe<Colore>;\n};\n\nexport type VineyardInput = {\n  name: Scalars['String'];\n  colore?: Maybe<Colore>;\n};\n\nexport type VineyardInputUpdate = {\n  _id: Scalars['ID'];\n  name?: Maybe<Scalars['String']>;\n  colore?: Maybe<Colore>;\n};\n\nexport type VineyardPayload = {\n  __typename?: 'VineyardPayload';\n  response?: Maybe<Vineyard>;\n  errors?: Maybe<Array<Maybe<Errors>>>;\n};\n\n// export enum Province {\n//   Ag = 'AG',\n//   Al = 'AL',\n//   An = 'AN',\n//   Ao = 'AO',\n//   Ap = 'AP',\n//   Aq = 'AQ',\n//   Ar = 'AR',\n//   At = 'AT',\n//   Av = 'AV',\n//   Ba = 'BA',\n//   Bg = 'BG',\n//   Bi = 'BI',\n//   Bl = 'BL',\n//   Bn = 'BN',\n//   Bo = 'BO',\n//   Br = 'BR',\n//   Bs = 'BS',\n//   Bt = 'BT',\n//   Bz = 'BZ',\n//   Ca = 'CA',\n//   Cb = 'CB',\n//   Ce = 'CE',\n//   Ch = 'CH',\n//   Cl = 'CL',\n//   Cn = 'CN',\n//   Co = 'CO',\n//   Cr = 'CR',\n//   Cs = 'CS',\n//   Ct = 'CT',\n//   Cz = 'CZ',\n//   En = 'EN',\n//   Fc = 'FC',\n//   Fe = 'FE',\n//   Fg = 'FG',\n//   Fi = 'FI',\n//   Fm = 'FM',\n//   Fr = 'FR',\n//   Ge = 'GE',\n//   Go = 'GO',\n//   Gr = 'GR',\n//   Im = 'IM',\n//   Is = 'IS',\n//   Kr = 'KR',\n//   Lc = 'LC',\n//   Le = 'LE',\n//   Li = 'LI',\n//   Lo = 'LO',\n//   Lt = 'LT',\n//   Lu = 'LU',\n//   Mb = 'MB',\n//   Mc = 'MC',\n//   Me = 'ME',\n//   Mi = 'MI',\n//   Mn = 'MN',\n//   Mo = 'MO',\n//   Ms = 'MS',\n//   Mt = 'MT',\n//   Na = 'NA',\n//   No = 'NO',\n//   Nu = 'NU',\n//   Or = 'OR',\n//   Pa = 'PA',\n//   Pc = 'PC',\n//   Pd = 'PD',\n//   Pe = 'PE',\n//   Pg = 'PG',\n//   Pi = 'PI',\n//   Pn = 'PN',\n//   Po = 'PO',\n//   Pr = 'PR',\n//   Pt = 'PT',\n//   Pu = 'PU',\n//   Pv = 'PV',\n//   Pz = 'PZ',\n//   Ra = 'RA',\n//   Rc = 'RC',\n//   Re = 'RE',\n//   Rg = 'RG',\n//   Ri = 'RI',\n//   Rm = 'RM',\n//   Rn = 'RN',\n//   Ro = 'RO',\n//   Sa = 'SA',\n//   Si = 'SI',\n//   So = 'SO',\n//   Sp = 'SP',\n//   Sr = 'SR',\n//   Ss = 'SS',\n//   Su = 'SU',\n//   Sv = 'SV',\n//   Ta = 'TA',\n//   Te = 'TE',\n//   Tn = 'TN',\n//   To = 'TO',\n//   Tp = 'TP',\n//   Tr = 'TR',\n//   Ts = 'TS',\n//   Tv = 'TV',\n//   Ud = 'UD',\n//   Va = 'VA',\n//   Vb = 'VB',\n//   Vc = 'VC',\n//   Ve = 'VE',\n//   Vi = 'VI',\n//   Vr = 'VR',\n//   Vt = 'VT',\n//   Vv = 'VV'\n// }\n\n// export enum Regioni {\n//   Abruzzo = 'ABRUZZO',\n//   Basilicata = 'BASILICATA',\n//   Calabria = 'CALABRIA',\n//   Campania = 'CAMPANIA',\n//   Emilia = 'EMILIA',\n//   Friuli = 'FRIULI',\n//   Lazio = 'LAZIO',\n//   Liguria = 'LIGURIA',\n//   Lombardia = 'LOMBARDIA',\n//   Marche = 'MARCHE',\n//   Molise = 'MOLISE',\n//   Piemonte = 'PIEMONTE',\n//   Puglia = 'PUGLIA',\n//   Sardegna = 'SARDEGNA',\n//   Sicilia = 'SICILIA',\n//   Toscana = 'TOSCANA',\n//   Trentino = 'TRENTINO',\n//   Umbria = 'UMBRIA',\n//   Valdaosta = 'VALDAOSTA',\n//   Veneto = 'VENETO'\n// }\n\nexport enum TypeAd {\n  Sell = 'SELL',\n  Buy = 'BUY',\n}\n\nexport enum TypeProduct {\n  AdWine = 'AdWine',\n  AdGrape = 'AdGrape',\n}\n\nexport enum Menzione {\n  Classico = 'CLASSICO',\n  Riserva = 'RISERVA',\n  Superiore = 'SUPERIORE',\n  Vigna = 'VIGNA',\n}\n\nexport enum MetodoProduttivo {\n  Convenzionale = 'CONVENZIONALE',\n  Biologico = 'BIOLOGICO',\n  Biodinamico = 'BIODINAMICO',\n  Naturale = 'NATURALE',\n  Vegano = 'VEGANO',\n}\n\nexport enum Colore {\n  Bianca = 'BIANCA',\n  Rossa = 'ROSSA',\n}\n\nexport enum EspressioneComunitaria {\n  Dop = 'DOP',\n  Igp = 'IGP',\n  Nd = 'ND',\n}\n\nexport enum DenomZona {\n  Doc = 'DOC',\n  Docg = 'DOCG',\n  Igt = 'IGT',\n  Varietale = 'VARIETALE',\n  Vino = 'VINO',\n}\n\nexport enum QueryOrderBy {\n  CreatedAtAsc = 'createdAt_ASC',\n  CreatedAtDesc = 'createdAt_DESC',\n  PriceAsc = 'price_ASC',\n  PriceDesc = 'price_DESC',\n}\n\nexport type Errors = {\n  __typename?: 'Errors';\n  name?: Maybe<Scalars['String']>;\n  text?: Maybe<Scalars['String']>;\n};\n\nexport enum AlertStatus {\n  Success = 'success',\n  Warning = 'warning',\n  Info = 'info',\n  Error = 'error',\n}\n\nexport type WineSearched = {\n  __typename?: 'WineSearched';\n  typeAd?: Maybe<TypeAd>;\n  typeProduct?: Maybe<TypeProduct>;\n  wineName?: Maybe<Scalars['String']>;\n  harvest?: Maybe<Scalars['Int']>;\n  abv?: Maybe<Scalars['Float']>;\n  price?: Maybe<Scalars['Float']>;\n  liters?: Maybe<Scalars['Int']>;\n  isPost?: Maybe<Scalars['Boolean']>;\n};\n\nexport type Notification = {\n  __typename?: 'Notification';\n  type?: AlertStatus;\n  message?: Maybe<Scalars['String']>;\n};\n\nexport type LoginMutationVariables = Exact<{\n  email: Scalars['String'];\n  password: Scalars['String'];\n}>;\n\nexport type LoginMutation = { __typename?: 'Mutation' } & {\n  login?: Maybe<\n    { __typename?: 'AuthUserPayload' } & {\n      response?: Maybe<\n        { __typename?: 'AuthUser' } & Pick<AuthUser, 'token'> & {\n            user: { __typename?: 'User' } & Pick<User, '_id' | 'firstName'> & {\n                address: { __typename?: 'Address' } & Pick<Address, 'comune'>;\n              };\n          }\n      >;\n      errors?: Maybe<\n        Array<Maybe<{ __typename?: 'Errors' } & Pick<Errors, 'name' | 'text'>>>\n      >;\n    }\n  >;\n};\n\nexport type CreateUserMutationVariables = Exact<{\n  userInput: UserInput;\n}>;\n\nexport type CreateUserMutation = { __typename?: 'Mutation' } & {\n  createUser?: Maybe<\n    { __typename?: 'AuthUserPayload' } & {\n      response?: Maybe<\n        { __typename?: 'AuthUser' } & Pick<AuthUser, 'token'> & {\n            user: { __typename?: 'User' } & Pick<User, '_id' | 'firstName'>;\n          }\n      >;\n      errors?: Maybe<\n        Array<Maybe<{ __typename?: 'Errors' } & Pick<Errors, 'name' | 'text'>>>\n      >;\n    }\n  >;\n};\n\nexport type UpdateUserMutationVariables = Exact<{\n  user: UserInputUpdate;\n}>;\n\nexport type UpdateUserMutation = { __typename?: 'Mutation' } & {\n  updateUser?: Maybe<\n    { __typename?: 'UserPayload' } & {\n      response?: Maybe<\n        { __typename?: 'User' } & Pick<User, '_id' | 'firstName'>\n      >;\n      errors?: Maybe<\n        Array<Maybe<{ __typename?: 'Errors' } & Pick<Errors, 'name' | 'text'>>>\n      >;\n    }\n  >;\n};\n\nexport type DeleteUserMutationVariables = Exact<{\n  id: Scalars['ID'];\n}>;\n\nexport type DeleteUserMutation = { __typename?: 'Mutation' } & {\n  deleteUser?: Maybe<\n    { __typename?: 'UserPayload' } & {\n      response?: Maybe<\n        { __typename?: 'User' } & Pick<User, '_id' | 'firstName'>\n      >;\n      errors?: Maybe<\n        Array<Maybe<{ __typename?: 'Errors' } & Pick<Errors, 'name' | 'text'>>>\n      >;\n    }\n  >;\n};\n\nexport type CreateAdWineMutationVariables = Exact<{\n  input: AdInput;\n}>;\n\nexport type CreateAdWineMutation = { __typename?: 'Mutation' } & {\n  createAd?: Maybe<\n    { __typename?: 'AdPayload' } & {\n      response?: Maybe<\n        | ({ __typename?: 'AdWine' } & Pick<\n            AdWine,\n            | 'wineName'\n            | 'litersFrom'\n            | 'litersTo'\n            | 'metodoProduttivo'\n            | '_id'\n            | 'harvest'\n            | 'abv'\n            | 'priceFrom'\n            | 'priceTo'\n            | 'typeAd'\n            | 'activeNegotiations'\n            | 'numberViews'\n            | 'datePosted'\n          > & {\n              wine?: Maybe<\n                { __typename?: 'Wine' } & Pick<Wine, 'denominazioneZona'>\n              >;\n              postedBy: { __typename?: 'User' } & Pick<User, '_id'>;\n            })\n        | ({ __typename?: 'AdGrape' } & Pick<\n            AdGrape,\n            | '_id'\n            | 'harvest'\n            | 'abv'\n            | 'priceFrom'\n            | 'priceTo'\n            | 'typeAd'\n            | 'activeNegotiations'\n            | 'numberViews'\n            | 'datePosted'\n          > & { postedBy: { __typename?: 'User' } & Pick<User, '_id'> })\n      >;\n      errors?: Maybe<\n        Array<Maybe<{ __typename?: 'Errors' } & Pick<Errors, 'name' | 'text'>>>\n      >;\n    }\n  >;\n};\n\nexport type UpdateAdWineMutationVariables = Exact<{\n  input: AdInputUpdate;\n}>;\n\nexport type UpdateAdWineMutation = { __typename?: 'Mutation' } & {\n  updateAd?: Maybe<\n    { __typename?: 'AdPayload' } & {\n      response?: Maybe<\n        | ({ __typename?: 'AdWine' } & Pick<AdWine, '_id'>)\n        | ({ __typename?: 'AdGrape' } & Pick<AdGrape, '_id'>)\n      >;\n      errors?: Maybe<\n        Array<Maybe<{ __typename?: 'Errors' } & Pick<Errors, 'name' | 'text'>>>\n      >;\n    }\n  >;\n};\n\nexport type SaveAdMutationVariables = Exact<{\n  id: Scalars['ID'];\n}>;\n\nexport type SaveAdMutation = { __typename?: 'Mutation' } & {\n  saveAd?: Maybe<\n    { __typename?: 'AdPayload' } & {\n      response?: Maybe<\n        | ({ __typename?: 'AdWine' } & Pick<\n            AdWine,\n            | 'wineName'\n            | 'litersFrom'\n            | 'litersTo'\n            | '_id'\n            | 'harvest'\n            | 'abv'\n            | 'priceFrom'\n            | 'priceTo'\n            | 'datePosted'\n          > & {\n              wine?: Maybe<\n                { __typename?: 'Wine' } & Pick<Wine, 'denominazioneZona'>\n              >;\n            })\n        | ({ __typename?: 'AdGrape' } & Pick<\n            AdGrape,\n            '_id' | 'harvest' | 'abv' | 'priceFrom' | 'priceTo' | 'datePosted'\n          >)\n      >;\n      errors?: Maybe<\n        Array<Maybe<{ __typename?: 'Errors' } & Pick<Errors, 'name' | 'text'>>>\n      >;\n    }\n  >;\n};\n\nexport type DeleteAdMutationVariables = Exact<{\n  id: Scalars['ID'];\n}>;\n\nexport type DeleteAdMutation = { __typename?: 'Mutation' } & {\n  deleteAd?: Maybe<\n    { __typename?: 'AdPayload' } & {\n      response?: Maybe<\n        | ({ __typename?: 'AdWine' } & Pick<AdWine, '_id'>)\n        | ({ __typename?: 'AdGrape' } & Pick<AdGrape, '_id'>)\n      >;\n      errors?: Maybe<\n        Array<Maybe<{ __typename?: 'Errors' } & Pick<Errors, 'name' | 'text'>>>\n      >;\n    }\n  >;\n};\n\nexport type CreateNegotiationMutationVariables = Exact<{\n  negotiation: NegotiationInput;\n}>;\n\nexport type CreateNegotiationMutation = { __typename?: 'Mutation' } & {\n  createNegotiation?: Maybe<\n    { __typename?: 'NegotiationPayload' } & {\n      response?: Maybe<\n        { __typename?: 'Negotiation' } & NegotiationDetailsFragment\n      >;\n      errors?: Maybe<\n        Array<Maybe<{ __typename?: 'Errors' } & Pick<Errors, 'name' | 'text'>>>\n      >;\n    }\n  >;\n};\n\nexport type UpdateNegotiationMutationVariables = Exact<{\n  negotiation: NegotiationInputUpdate;\n}>;\n\nexport type UpdateNegotiationMutation = { __typename?: 'Mutation' } & {\n  updateNegotiation?: Maybe<\n    { __typename?: 'NegotiationPayload' } & {\n      response?: Maybe<\n        { __typename?: 'Negotiation' } & NegotiationDetailsFragment\n      >;\n      errors?: Maybe<\n        Array<Maybe<{ __typename?: 'Errors' } & Pick<Errors, 'name' | 'text'>>>\n      >;\n    }\n  >;\n};\n\nexport type DeleteNegotiationMutationVariables = Exact<{\n  id: Scalars['ID'];\n}>;\n\nexport type DeleteNegotiationMutation = { __typename?: 'Mutation' } & {\n  deleteNegotiation?: Maybe<\n    { __typename?: 'NegotiationPayload' } & {\n      response?: Maybe<\n        { __typename?: 'Negotiation' } & Pick<Negotiation, '_id'>\n      >;\n      errors?: Maybe<\n        Array<Maybe<{ __typename?: 'Errors' } & Pick<Errors, 'name' | 'text'>>>\n      >;\n    }\n  >;\n};\n\nexport type CreateMessageMutationVariables = Exact<{\n  message: MessageInput;\n}>;\n\nexport type CreateMessageMutation = { __typename?: 'Mutation' } & {\n  createMessage?: Maybe<\n    { __typename?: 'MessagePayload' } & {\n      response?: Maybe<{ __typename?: 'Message' } & MessageDetailsFragment>;\n      errors?: Maybe<\n        Array<Maybe<{ __typename?: 'Errors' } & Pick<Errors, 'name' | 'text'>>>\n      >;\n    }\n  >;\n};\n\nexport type CreateReviewMutationVariables = Exact<{\n  review: ReviewInput;\n}>;\n\nexport type CreateReviewMutation = { __typename?: 'Mutation' } & {\n  createReview?: Maybe<\n    { __typename?: 'ReviewPayload' } & {\n      response?: Maybe<{ __typename?: 'Review' } & ReviewDetailsFragment>;\n      errors?: Maybe<\n        Array<Maybe<{ __typename?: 'Errors' } & Pick<Errors, 'name' | 'text'>>>\n      >;\n    }\n  >;\n};\n\ntype AdDetails_AdWine_Fragment = { __typename?: 'AdWine' } & Pick<\n  AdWine,\n  | 'wineName'\n  | 'litersFrom'\n  | 'litersTo'\n  | 'metodoProduttivo'\n  | '_id'\n  | 'needsFollowUp'\n  | 'harvest'\n  | 'abv'\n  | 'priceFrom'\n  | 'priceTo'\n  | 'typeAd'\n  | 'activeNegotiations'\n  | 'datePosted'\n> & {\n    postedBy: { __typename?: 'User' } & Pick<\n      User,\n      '_id' | 'firstName' | 'lastName' | 'hideContact'\n    >;\n  };\n\ntype AdDetails_AdGrape_Fragment = { __typename?: 'AdGrape' } & Pick<\n  AdGrape,\n  | '_id'\n  | 'needsFollowUp'\n  | 'harvest'\n  | 'abv'\n  | 'priceFrom'\n  | 'priceTo'\n  | 'typeAd'\n  | 'activeNegotiations'\n  | 'datePosted'\n> & {\n    postedBy: { __typename?: 'User' } & Pick<\n      User,\n      '_id' | 'firstName' | 'lastName' | 'hideContact'\n    >;\n  };\n\nexport type AdDetailsFragment =\n  | AdDetails_AdWine_Fragment\n  | AdDetails_AdGrape_Fragment;\n\nexport type NegotiationDetailsFragment = { __typename?: 'Negotiation' } & Pick<\n  Negotiation,\n  '_id' | 'type' | 'dateCreated' | 'dateConcluded' | 'isConcluded'\n> & {\n    createdBy: { __typename?: 'User' } & Pick<User, '_id' | 'firstName'>;\n    ad:\n      | ({ __typename?: 'AdWine' } & Pick<AdWine, 'wineName' | '_id'> & {\n            postedBy: { __typename?: 'User' } & Pick<\n              User,\n              '_id' | 'firstName' | 'lastName'\n            >;\n          })\n      | ({ __typename?: 'AdGrape' } & Pick<AdGrape, '_id'> & {\n            postedBy: { __typename?: 'User' } & Pick<\n              User,\n              '_id' | 'firstName' | 'lastName'\n            >;\n          });\n    forUserAd: { __typename?: 'User' } & Pick<User, '_id' | 'firstName'>;\n    review?: Maybe<\n      Array<\n        Maybe<\n          { __typename?: 'Review' } & Pick<Review, '_id'> & {\n              createdBy: { __typename?: 'User' } & Pick<User, '_id'>;\n            }\n        >\n      >\n    >;\n  };\n\nexport type MessageDetailsFragment = { __typename?: 'Message' } & Pick<\n  Message,\n  '_id' | 'content' | 'isViewed' | 'dateSent'\n> & {\n    sentBy: { __typename?: 'User' } & Pick<\n      User,\n      '_id' | 'firstName' | 'lastName'\n    >;\n    sentTo: { __typename?: 'User' } & Pick<\n      User,\n      '_id' | 'firstName' | 'lastName'\n    >;\n    negotiation: { __typename?: 'Negotiation' } & Pick<\n      Negotiation,\n      '_id' | 'type' | 'isConcluded'\n    > & {\n        ad:\n          | ({ __typename?: 'AdWine' } & Pick<AdWine, 'wineName' | '_id'>)\n          | ({ __typename?: 'AdGrape' } & Pick<AdGrape, '_id'>);\n      };\n  };\n\nexport type ReviewDetailsFragment = { __typename?: 'Review' } & Pick<\n  Review,\n  '_id' | 'rating' | 'dateCreated' | 'content' | 'type'\n> & {\n    createdBy: { __typename?: 'User' } & Pick<\n      User,\n      '_id' | 'firstName' | 'lastName'\n    >;\n    negotiation: { __typename?: 'Negotiation' } & Pick<Negotiation, '_id'> & {\n        ad:\n          | ({ __typename?: 'AdWine' } & Pick<AdWine, 'wineName' | '_id'>)\n          | ({ __typename?: 'AdGrape' } & Pick<AdGrape, '_id'>);\n      };\n    forUser: { __typename?: 'User' } & Pick<\n      User,\n      '_id' | 'firstName' | 'lastName'\n    >;\n  };\n\nexport type FavoriteQueryVariables = Exact<{ [key: string]: never }>;\n\nexport type FavoriteQuery = { __typename?: 'Query' } & {\n  me?: Maybe<\n    { __typename?: 'User' } & {\n      savedAds?: Maybe<\n        Array<\n          | ({ __typename?: 'AdWine' } & Pick<\n              AdWine,\n              | 'wineName'\n              | 'litersFrom'\n              | 'litersTo'\n              | 'metodoProduttivo'\n              | '_id'\n              | 'harvest'\n              | 'abv'\n              | 'priceFrom'\n              | 'priceTo'\n              | 'typeAd'\n              | 'activeNegotiations'\n              | 'numberViews'\n              | 'datePosted'\n              | 'isActive'\n              | 'savedTimes'\n            > & { postedBy: { __typename?: 'User' } & Pick<User, '_id'> })\n          | ({ __typename?: 'AdGrape' } & Pick<\n              AdGrape,\n              | '_id'\n              | 'harvest'\n              | 'abv'\n              | 'priceFrom'\n              | 'priceTo'\n              | 'typeAd'\n              | 'activeNegotiations'\n              | 'numberViews'\n              | 'datePosted'\n              | 'isActive'\n              | 'savedTimes'\n            > & { postedBy: { __typename?: 'User' } & Pick<User, '_id'> })\n        >\n      >;\n    }\n  >;\n};\n\nexport type LightMeQueryVariables = Exact<{ [key: string]: never }>;\n\nexport type LightMeQuery = { __typename?: 'Query' } & {\n  me?: Maybe<\n    { __typename?: 'User' } & Pick<User, '_id' | 'firstName'> & {\n        address: { __typename?: 'Address' } & Pick<Address, 'comune'>;\n      }\n  >;\n};\n\nexport type MeQueryVariables = Exact<{ [key: string]: never }>;\n\nexport type MeQuery = { __typename?: 'Query' } & {\n  me?: Maybe<\n    { __typename?: 'User' } & Pick<User, '_id' | 'firstName' | 'lastName'> & {\n        address: { __typename?: 'Address' } & Pick<Address, 'comune'>;\n        ads?: Maybe<\n          Array<\n            | ({ __typename?: 'AdWine' } & Pick<\n                AdWine,\n                'wineName' | '_id' | 'isActive' | 'harvest' | 'typeAd'\n              > & { postedBy: { __typename?: 'User' } & Pick<User, '_id'> })\n            | ({ __typename?: 'AdGrape' } & Pick<\n                AdGrape,\n                '_id' | 'isActive' | 'harvest' | 'typeAd'\n              > & { postedBy: { __typename?: 'User' } & Pick<User, '_id'> })\n          >\n        >;\n        savedAds?: Maybe<\n          Array<\n            | ({ __typename?: 'AdWine' } & Pick<AdWine, '_id'>)\n            | ({ __typename?: 'AdGrape' } & Pick<AdGrape, '_id'>)\n          >\n        >;\n        messages?: Maybe<\n          Array<\n            { __typename?: 'Message' } & Pick<Message, '_id' | 'isViewed'> & {\n                sentBy: { __typename?: 'User' } & Pick<User, '_id'>;\n              }\n          >\n        >;\n        negotiations?: Maybe<\n          Array<\n            { __typename?: 'Negotiation' } & Pick<\n              Negotiation,\n              '_id' | 'isConcluded'\n            > & {\n                ad:\n                  | ({ __typename?: 'AdWine' } & Pick<AdWine, '_id'>)\n                  | ({ __typename?: 'AdGrape' } & Pick<AdGrape, '_id'>);\n              }\n          >\n        >;\n        reviews?: Maybe<\n          Array<\n            { __typename?: 'Review' } & Pick<Review, '_id' | 'rating'> & {\n                forUser: { __typename?: 'User' } & Pick<User, '_id'>;\n              }\n          >\n        >;\n      }\n  >;\n};\n\nexport type IsUserLoggedInQueryVariables = Exact<{ [key: string]: never }>;\n\nexport type IsUserLoggedInQuery = { __typename?: 'Query' } & Pick<\n  Query,\n  'isLoggedIn'\n>;\n\nexport type NotificationQueryVariables = Exact<{ [key: string]: never }>;\n\nexport type NotificationQuery = { __typename?: 'Query' } & {\n  notification?: Maybe<\n    { __typename?: 'Notification' } & Pick<Notification, 'type' | 'message'>\n  >;\n};\n\nexport type MyInfoQueryVariables = Exact<{ [key: string]: never }>;\n\nexport type MyInfoQuery = { __typename?: 'Query' } & {\n  myInfo?: Maybe<\n    { __typename?: 'User' } & Pick<User, '_id' | 'firstName' | 'lastName'> & {\n        address: { __typename?: 'Address' } & Pick<Address, 'comune'>;\n        ads?: Maybe<\n          Array<\n            | ({ __typename?: 'AdWine' } & Pick<AdWine, '_id' | 'isActive'> & {\n                  postedBy: { __typename?: 'User' } & Pick<User, '_id'>;\n                })\n            | ({ __typename?: 'AdGrape' } & Pick<\n                AdGrape,\n                '_id' | 'isActive'\n              > & { postedBy: { __typename?: 'User' } & Pick<User, '_id'> })\n          >\n        >;\n        savedAds?: Maybe<\n          Array<\n            | ({ __typename?: 'AdWine' } & Pick<AdWine, '_id'>)\n            | ({ __typename?: 'AdGrape' } & Pick<AdGrape, '_id'>)\n          >\n        >;\n        messages?: Maybe<\n          Array<\n            { __typename?: 'Message' } & Pick<Message, '_id' | 'isViewed'> & {\n                sentBy: { __typename?: 'User' } & Pick<User, '_id'>;\n              }\n          >\n        >;\n        negotiations?: Maybe<\n          Array<\n            { __typename?: 'Negotiation' } & Pick<\n              Negotiation,\n              '_id' | 'isConcluded'\n            > & {\n                ad:\n                  | ({ __typename?: 'AdWine' } & Pick<AdWine, '_id'>)\n                  | ({ __typename?: 'AdGrape' } & Pick<AdGrape, '_id'>);\n              }\n          >\n        >;\n        reviews?: Maybe<\n          Array<{ __typename?: 'Review' } & Pick<Review, '_id' | 'rating'>>\n        >;\n      }\n  >;\n};\n\nexport type WineSearchedQueryVariables = Exact<{ [key: string]: never }>;\n\nexport type WineSearchedQuery = { __typename?: 'Query' } & {\n  searchedWine?: Maybe<\n    { __typename?: 'WineSearched' } & Pick<\n      WineSearched,\n      | 'typeAd'\n      | 'typeProduct'\n      | 'wineName'\n      | 'harvest'\n      | 'abv'\n      | 'price'\n      | 'liters'\n      | 'isPost'\n    >\n  >;\n};\n\nexport type AdsWineQueryVariables = Exact<{\n  typeAd: TypeAd;\n  typeProduct: TypeProduct;\n  wineName?: Maybe<Scalars['String']>;\n  offset?: Maybe<Scalars['Int']>;\n  orderBy?: Maybe<QueryOrderBy>;\n  limit?: Maybe<Scalars['Int']>;\n}>;\n\nexport type AdsWineQuery = { __typename?: 'Query' } & {\n  ads?: Maybe<\n    { __typename?: 'AdsResult' } & Pick<AdsResult, 'pageCount'> & {\n        ads?: Maybe<\n          Array<\n            Maybe<\n              | ({ __typename?: 'AdWine' } & Pick<\n                  AdWine,\n                  | 'wineName'\n                  | 'litersFrom'\n                  | 'litersTo'\n                  | 'metodoProduttivo'\n                  | '_id'\n                  | 'harvest'\n                  | 'abv'\n                  | 'priceFrom'\n                  | 'priceTo'\n                  | 'typeAd'\n                  | 'activeNegotiations'\n                  | 'numberViews'\n                  | 'savedTimes'\n                  | 'isActive'\n                  | 'datePosted'\n                > & {\n                    wine?: Maybe<\n                      { __typename?: 'Wine' } & Pick<Wine, 'denominazioneZona'>\n                    >;\n                    postedBy: { __typename?: 'User' } & Pick<User, '_id'>;\n                  })\n              | ({ __typename?: 'AdGrape' } & Pick<\n                  AdGrape,\n                  | '_id'\n                  | 'harvest'\n                  | 'abv'\n                  | 'priceFrom'\n                  | 'priceTo'\n                  | 'typeAd'\n                  | 'activeNegotiations'\n                  | 'numberViews'\n                  | 'savedTimes'\n                  | 'isActive'\n                  | 'datePosted'\n                > & { postedBy: { __typename?: 'User' } & Pick<User, '_id'> })\n            >\n          >\n        >;\n      }\n  >;\n};\n\nexport type AdQueryVariables = Exact<{\n  id: Scalars['ID'];\n}>;\n\nexport type AdQuery = { __typename?: 'Query' } & {\n  ad?: Maybe<\n    | ({ __typename?: 'AdWine' } & Pick<\n        AdWine,\n        | 'wineName'\n        | 'litersFrom'\n        | 'litersTo'\n        | 'metodoProduttivo'\n        | '_id'\n        | 'needsFollowUp'\n        | 'harvest'\n        | 'abv'\n        | 'priceFrom'\n        | 'priceTo'\n        | 'typeAd'\n        | 'activeNegotiations'\n        | 'numberViews'\n        | 'savedTimes'\n        | 'datePosted'\n        | 'isActive'\n      > & {\n          wine?: Maybe<\n            { __typename?: 'Wine' } & Pick<Wine, 'denominazioneZona'>\n          >;\n          postedBy: { __typename?: 'User' } & Pick<\n            User,\n            | '_id'\n            | 'firstName'\n            | 'lastName'\n            | 'hideContact'\n            | 'email'\n            | 'phoneNumber'\n          >;\n        })\n    | ({ __typename?: 'AdGrape' } & Pick<\n        AdGrape,\n        | '_id'\n        | 'needsFollowUp'\n        | 'harvest'\n        | 'abv'\n        | 'priceFrom'\n        | 'priceTo'\n        | 'typeAd'\n        | 'activeNegotiations'\n        | 'numberViews'\n        | 'savedTimes'\n        | 'datePosted'\n        | 'isActive'\n      > & {\n          postedBy: { __typename?: 'User' } & Pick<\n            User,\n            | '_id'\n            | 'firstName'\n            | 'lastName'\n            | 'hideContact'\n            | 'email'\n            | 'phoneNumber'\n          >;\n        })\n  >;\n  me?: Maybe<\n    { __typename?: 'User' } & Pick<User, '_id'> & {\n        negotiations?: Maybe<\n          Array<\n            { __typename?: 'Negotiation' } & Pick<Negotiation, '_id'> & {\n                ad:\n                  | ({ __typename?: 'AdWine' } & Pick<AdWine, '_id'>)\n                  | ({ __typename?: 'AdGrape' } & Pick<AdGrape, '_id'>);\n              }\n          >\n        >;\n        savedAds?: Maybe<\n          Array<\n            | ({ __typename?: 'AdWine' } & Pick<AdWine, '_id'>)\n            | ({ __typename?: 'AdGrape' } & Pick<AdGrape, '_id'>)\n          >\n        >;\n      }\n  >;\n};\n\nexport type WinesQueryVariables = Exact<{ [key: string]: never }>;\n\nexport type WinesQuery = { __typename?: 'Query' } & {\n  wines?: Maybe<\n    Array<\n      { __typename?: 'Wine' } & Pick<\n        Wine,\n        | '_id'\n        | 'denominazioneVino'\n        | 'espressioneComunitaria'\n        | 'denominazioneZona'\n        | 'tipoVino'\n        | 'vitigni'\n      >\n    >\n  >;\n};\n\nexport type NegotiationsQueryVariables = Exact<{\n  offset?: Maybe<Scalars['Int']>;\n  orderBy?: Maybe<QueryOrderBy>;\n  limit?: Maybe<Scalars['Int']>;\n  isConcluded?: Maybe<Scalars['Boolean']>;\n}>;\n\nexport type NegotiationsQuery = { __typename?: 'Query' } & {\n  negotiations?: Maybe<\n    { __typename?: 'NegotiationResult' } & Pick<\n      NegotiationResult,\n      'pageCount'\n    > & {\n        negotiations?: Maybe<\n          Array<\n            Maybe<{ __typename?: 'Negotiation' } & NegotiationDetailsFragment>\n          >\n        >;\n      }\n  >;\n};\n\nexport type NegotiationQueryVariables = Exact<{\n  id: Scalars['ID'];\n}>;\n\nexport type NegotiationQuery = { __typename?: 'Query' } & {\n  negotiation?: Maybe<\n    { __typename?: 'Negotiation' } & {\n      ad:\n        | ({ __typename?: 'AdWine' } & {\n            wine?: Maybe<\n              { __typename?: 'Wine' } & Pick<Wine, 'denominazioneZona'>\n            >;\n            postedBy: { __typename?: 'User' } & Pick<\n              User,\n              'hideContact' | 'phoneNumber' | 'email'\n            >;\n          })\n        | ({ __typename?: 'AdGrape' } & {\n            postedBy: { __typename?: 'User' } & Pick<\n              User,\n              'hideContact' | 'phoneNumber' | 'email'\n            >;\n          });\n    } & NegotiationDetailsFragment\n  >;\n};\n\nexport type MessagesQueryVariables = Exact<{ [key: string]: never }>;\n\nexport type MessagesQuery = { __typename?: 'Query' } & {\n  messages?: Maybe<Array<{ __typename?: 'Message' } & MessageDetailsFragment>>;\n};\n\nexport type MessagesNegotiationQueryVariables = Exact<{\n  id: Scalars['ID'];\n  offset?: Maybe<Scalars['Int']>;\n  limit?: Maybe<Scalars['Int']>;\n}>;\n\nexport type MessagesNegotiationQuery = { __typename?: 'Query' } & {\n  messagesForNegotiation?: Maybe<\n    { __typename?: 'MessageResult' } & Pick<MessageResult, 'pageCount'> & {\n        messages?: Maybe<\n          Array<Maybe<{ __typename?: 'Message' } & MessageDetailsFragment>>\n        >;\n      }\n  >;\n};\n\nexport type ReviewsQueryVariables = Exact<{\n  offset?: Maybe<Scalars['Int']>;\n  orderBy?: Maybe<QueryOrderBy>;\n  limit?: Maybe<Scalars['Int']>;\n}>;\n\nexport type ReviewsQuery = { __typename?: 'Query' } & {\n  reviews?: Maybe<\n    { __typename?: 'ReviewResult' } & Pick<ReviewResult, 'pageCount'> & {\n        reviews?: Maybe<\n          Array<Maybe<{ __typename?: 'Review' } & ReviewDetailsFragment>>\n        >;\n      }\n  >;\n};\n\nexport type ReviewQueryVariables = Exact<{\n  id: Scalars['ID'];\n}>;\n\nexport type ReviewQuery = { __typename?: 'Query' } & {\n  review?: Maybe<{ __typename?: 'Review' } & ReviewDetailsFragment>;\n};\n\nexport type NegotiationsForAdQueryVariables = Exact<{\n  ad: Scalars['ID'];\n}>;\n\nexport type NegotiationsForAdQuery = { __typename?: 'Query' } & {\n  negotiationsForAd?: Maybe<\n    Array<\n      { __typename?: 'Negotiation' } & Pick<\n        Negotiation,\n        '_id' | 'isConcluded' | 'dateCreated' | 'dateConcluded' | 'type'\n      > & {\n          createdBy: { __typename?: 'User' } & Pick<\n            User,\n            '_id' | 'firstName' | 'lastName'\n          >;\n        }\n    >\n  >;\n};\n\nexport type AdsForUserQueryVariables = Exact<{\n  offset?: Maybe<Scalars['Int']>;\n  orderBy?: Maybe<QueryOrderBy>;\n  limit?: Maybe<Scalars['Int']>;\n  isActive?: Maybe<Scalars['Boolean']>;\n  user: Scalars['ID'];\n}>;\n\nexport type AdsForUserQuery = { __typename?: 'Query' } & {\n  adsForUser?: Maybe<\n    { __typename?: 'AdsResult' } & Pick<AdsResult, 'pageCount'> & {\n        ads?: Maybe<\n          Array<\n            Maybe<\n              | ({ __typename?: 'AdWine' } & Pick<\n                  AdWine,\n                  | 'wineName'\n                  | 'litersFrom'\n                  | 'litersTo'\n                  | 'metodoProduttivo'\n                  | '_id'\n                  | 'needsFollowUp'\n                  | 'harvest'\n                  | 'abv'\n                  | 'priceFrom'\n                  | 'priceTo'\n                  | 'typeAd'\n                  | 'activeNegotiations'\n                  | 'numberViews'\n                  | 'datePosted'\n                  | 'isActive'\n                  | 'savedTimes'\n                > & {\n                    wine?: Maybe<\n                      { __typename?: 'Wine' } & Pick<Wine, 'denominazioneZona'>\n                    >;\n                    postedBy: { __typename?: 'User' } & Pick<\n                      User,\n                      '_id' | 'firstName' | 'lastName' | 'hideContact'\n                    >;\n                  })\n              | ({ __typename?: 'AdGrape' } & Pick<\n                  AdGrape,\n                  | '_id'\n                  | 'needsFollowUp'\n                  | 'harvest'\n                  | 'abv'\n                  | 'priceFrom'\n                  | 'priceTo'\n                  | 'typeAd'\n                  | 'activeNegotiations'\n                  | 'numberViews'\n                  | 'datePosted'\n                  | 'isActive'\n                  | 'savedTimes'\n                > & {\n                    postedBy: { __typename?: 'User' } & Pick<\n                      User,\n                      '_id' | 'firstName' | 'lastName' | 'hideContact'\n                    >;\n                  })\n            >\n          >\n        >;\n      }\n  >;\n};\n\nexport type GetMessageQueryVariables = Exact<{\n  id: Scalars['ID'];\n}>;\n\nexport type GetMessageQuery = { __typename?: 'Query' } & {\n  message?: Maybe<{ __typename?: 'Message' } & MessageDetailsFragment>;\n};\n\nexport type AdPostedFollowUpSubscriptionVariables = Exact<{\n  [key: string]: never;\n}>;\n\nexport type AdPostedFollowUpSubscription = { __typename?: 'Subscription' } & {\n  adPostedFollowUp:\n    | ({ __typename?: 'AdWine' } & Pick<\n        AdWine,\n        | 'wineName'\n        | 'litersFrom'\n        | 'litersTo'\n        | 'metodoProduttivo'\n        | '_id'\n        | 'harvest'\n        | 'abv'\n        | 'priceFrom'\n        | 'priceTo'\n        | 'typeAd'\n        | 'activeNegotiations'\n        | 'numberViews'\n        | 'datePosted'\n      > & { postedBy: { __typename?: 'User' } & Pick<User, '_id'> })\n    | ({ __typename?: 'AdGrape' } & Pick<\n        AdGrape,\n        | '_id'\n        | 'harvest'\n        | 'abv'\n        | 'priceFrom'\n        | 'priceTo'\n        | 'typeAd'\n        | 'activeNegotiations'\n        | 'numberViews'\n        | 'datePosted'\n      > & { postedBy: { __typename?: 'User' } & Pick<User, '_id'> });\n};\n\nexport type AdRemovedSubscriptionVariables = Exact<{ [key: string]: never }>;\n\nexport type AdRemovedSubscription = { __typename?: 'Subscription' } & {\n  adRemoved:\n    | ({ __typename?: 'AdWine' } & Pick<AdWine, '_id'>)\n    | ({ __typename?: 'AdGrape' } & Pick<AdGrape, '_id'>);\n};\n\nexport type MessageSentSubscriptionVariables = Exact<{ [key: string]: never }>;\n\nexport type MessageSentSubscription = { __typename?: 'Subscription' } & {\n  messageSent: { __typename?: 'Message' } & MessageDetailsFragment;\n};\n\nexport type NegotiationCreatedSubscriptionVariables = Exact<{\n  [key: string]: never;\n}>;\n\nexport type NegotiationCreatedSubscription = { __typename?: 'Subscription' } & {\n  negotiationCreated: {\n    __typename?: 'Negotiation';\n  } & NegotiationDetailsFragment;\n};\n\nexport type NegotiationClosedSubscriptionVariables = Exact<{\n  [key: string]: never;\n}>;\n\nexport type NegotiationClosedSubscription = { __typename?: 'Subscription' } & {\n  negotiationClosed:\n    | ({ __typename?: 'AdWine' } & Pick<\n        AdWine,\n        | 'wineName'\n        | 'litersFrom'\n        | 'litersTo'\n        | 'metodoProduttivo'\n        | '_id'\n        | 'harvest'\n        | 'abv'\n        | 'priceFrom'\n        | 'priceTo'\n        | 'typeAd'\n        | 'activeNegotiations'\n        | 'numberViews'\n        | 'datePosted'\n      > & { postedBy: { __typename?: 'User' } & Pick<User, '_id'> })\n    | ({ __typename?: 'AdGrape' } & Pick<\n        AdGrape,\n        | '_id'\n        | 'harvest'\n        | 'abv'\n        | 'priceFrom'\n        | 'priceTo'\n        | 'typeAd'\n        | 'activeNegotiations'\n        | 'numberViews'\n        | 'datePosted'\n      > & { postedBy: { __typename?: 'User' } & Pick<User, '_id'> });\n};\n\nexport type ReviewCreatedSubscriptionVariables = Exact<{\n  [key: string]: never;\n}>;\n\nexport type ReviewCreatedSubscription = { __typename?: 'Subscription' } & {\n  reviewCreated: { __typename?: 'Review' } & ReviewDetailsFragment;\n};\n\nexport type MyAdFragment = { __typename?: 'AdWine' } & Pick<\n  AdWine,\n  'savedTimes'\n>;\n\nexport const AdDetailsFragmentDoc = gql`\n  fragment AdDetails on Ad {\n    _id\n    postedBy {\n      _id\n      firstName\n      lastName\n      hideContact\n    }\n    needsFollowUp\n    harvest\n    abv\n    priceFrom\n    priceTo\n    ... on AdWine {\n      wineName\n      litersFrom\n      litersTo\n      metodoProduttivo\n    }\n    typeAd\n    activeNegotiations\n    datePosted\n  }\n`;\nexport const NegotiationDetailsFragmentDoc = gql`\n  fragment NegotiationDetails on Negotiation {\n    _id\n    createdBy {\n      _id\n      firstName\n    }\n    ad {\n      _id\n      postedBy {\n        _id\n        firstName\n        lastName\n      }\n      ... on AdWine {\n        wineName\n      }\n    }\n    forUserAd {\n      _id\n      firstName\n    }\n    type\n    review {\n      _id\n      createdBy {\n        _id\n      }\n    }\n    dateCreated\n    dateConcluded\n    isConcluded\n  }\n`;\nexport const MessageDetailsFragmentDoc = gql`\n  fragment MessageDetails on Message {\n    _id\n    content\n    isViewed\n    sentBy {\n      _id\n      firstName\n      lastName\n    }\n    sentTo {\n      _id\n      firstName\n      lastName\n    }\n    negotiation {\n      _id\n      ad {\n        _id\n        ... on AdWine {\n          wineName\n        }\n      }\n      type\n      isConcluded\n    }\n    dateSent\n  }\n`;\nexport const ReviewDetailsFragmentDoc = gql`\n  fragment ReviewDetails on Review {\n    _id\n    createdBy {\n      _id\n      firstName\n      lastName\n    }\n    negotiation {\n      _id\n      ad {\n        _id\n        ... on AdWine {\n          wineName\n        }\n      }\n    }\n    forUser {\n      _id\n      firstName\n      lastName\n    }\n    rating\n    dateCreated\n    content\n    type\n  }\n`;\nexport const MyAdFragmentDoc = gql`\n  fragment MyAd on AdWine {\n    savedTimes\n  }\n`;\nexport const LoginDocument = gql`\n  mutation login($email: String!, $password: String!) {\n    login(email: $email, password: $password) {\n      response {\n        token\n        user {\n          _id\n          firstName\n          address {\n            comune\n          }\n        }\n      }\n      errors {\n        name\n        text\n      }\n    }\n  }\n`;\nexport type LoginMutationFn = Apollo.MutationFunction<\n  LoginMutation,\n  LoginMutationVariables\n>;\n\n/**\n * __useLoginMutation__\n *\n * To run a mutation, you first call `useLoginMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useLoginMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [loginMutation, { data, loading, error }] = useLoginMutation({\n *   variables: {\n *      email: // value for 'email'\n *      password: // value for 'password'\n *   },\n * });\n */\nexport function useLoginMutation(\n  baseOptions?: Apollo.MutationHookOptions<\n    LoginMutation,\n    LoginMutationVariables\n  >\n) {\n  return Apollo.useMutation<LoginMutation, LoginMutationVariables>(\n    LoginDocument,\n    baseOptions\n  );\n}\nexport type LoginMutationHookResult = ReturnType<typeof useLoginMutation>;\nexport type LoginMutationResult = Apollo.MutationResult<LoginMutation>;\nexport type LoginMutationOptions = Apollo.BaseMutationOptions<\n  LoginMutation,\n  LoginMutationVariables\n>;\nexport const CreateUserDocument = gql`\n  mutation CreateUser($userInput: UserInput!) {\n    createUser(user: $userInput) {\n      response {\n        token\n        user {\n          _id\n          firstName\n        }\n      }\n      errors {\n        name\n        text\n      }\n    }\n  }\n`;\nexport type CreateUserMutationFn = Apollo.MutationFunction<\n  CreateUserMutation,\n  CreateUserMutationVariables\n>;\n\n/**\n * __useCreateUserMutation__\n *\n * To run a mutation, you first call `useCreateUserMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useCreateUserMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [createUserMutation, { data, loading, error }] = useCreateUserMutation({\n *   variables: {\n *      userInput: // value for 'userInput'\n *   },\n * });\n */\nexport function useCreateUserMutation(\n  baseOptions?: Apollo.MutationHookOptions<\n    CreateUserMutation,\n    CreateUserMutationVariables\n  >\n) {\n  return Apollo.useMutation<CreateUserMutation, CreateUserMutationVariables>(\n    CreateUserDocument,\n    baseOptions\n  );\n}\nexport type CreateUserMutationHookResult = ReturnType<\n  typeof useCreateUserMutation\n>;\nexport type CreateUserMutationResult =\n  Apollo.MutationResult<CreateUserMutation>;\nexport type CreateUserMutationOptions = Apollo.BaseMutationOptions<\n  CreateUserMutation,\n  CreateUserMutationVariables\n>;\nexport const UpdateUserDocument = gql`\n  mutation UpdateUser($user: UserInputUpdate!) {\n    updateUser(user: $user) {\n      response {\n        _id\n        firstName\n      }\n      errors {\n        name\n        text\n      }\n    }\n  }\n`;\nexport type UpdateUserMutationFn = Apollo.MutationFunction<\n  UpdateUserMutation,\n  UpdateUserMutationVariables\n>;\n\n/**\n * __useUpdateUserMutation__\n *\n * To run a mutation, you first call `useUpdateUserMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useUpdateUserMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [updateUserMutation, { data, loading, error }] = useUpdateUserMutation({\n *   variables: {\n *      user: // value for 'user'\n *   },\n * });\n */\nexport function useUpdateUserMutation(\n  baseOptions?: Apollo.MutationHookOptions<\n    UpdateUserMutation,\n    UpdateUserMutationVariables\n  >\n) {\n  return Apollo.useMutation<UpdateUserMutation, UpdateUserMutationVariables>(\n    UpdateUserDocument,\n    baseOptions\n  );\n}\nexport type UpdateUserMutationHookResult = ReturnType<\n  typeof useUpdateUserMutation\n>;\nexport type UpdateUserMutationResult =\n  Apollo.MutationResult<UpdateUserMutation>;\nexport type UpdateUserMutationOptions = Apollo.BaseMutationOptions<\n  UpdateUserMutation,\n  UpdateUserMutationVariables\n>;\nexport const DeleteUserDocument = gql`\n  mutation DeleteUser($id: ID!) {\n    deleteUser(id: $id) {\n      response {\n        _id\n        firstName\n      }\n      errors {\n        name\n        text\n      }\n    }\n  }\n`;\nexport type DeleteUserMutationFn = Apollo.MutationFunction<\n  DeleteUserMutation,\n  DeleteUserMutationVariables\n>;\n\n/**\n * __useDeleteUserMutation__\n *\n * To run a mutation, you first call `useDeleteUserMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useDeleteUserMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [deleteUserMutation, { data, loading, error }] = useDeleteUserMutation({\n *   variables: {\n *      id: // value for 'id'\n *   },\n * });\n */\nexport function useDeleteUserMutation(\n  baseOptions?: Apollo.MutationHookOptions<\n    DeleteUserMutation,\n    DeleteUserMutationVariables\n  >\n) {\n  return Apollo.useMutation<DeleteUserMutation, DeleteUserMutationVariables>(\n    DeleteUserDocument,\n    baseOptions\n  );\n}\nexport type DeleteUserMutationHookResult = ReturnType<\n  typeof useDeleteUserMutation\n>;\nexport type DeleteUserMutationResult =\n  Apollo.MutationResult<DeleteUserMutation>;\nexport type DeleteUserMutationOptions = Apollo.BaseMutationOptions<\n  DeleteUserMutation,\n  DeleteUserMutationVariables\n>;\nexport const CreateAdWineDocument = gql`\n  mutation CreateAdWine($input: AdInput!) {\n    createAd(input: $input) {\n      response {\n        _id\n        postedBy {\n          _id\n        }\n        harvest\n        abv\n        priceFrom\n        priceTo\n        ... on AdWine {\n          wineName\n          litersFrom\n          litersTo\n          metodoProduttivo\n          wine {\n            denominazioneZona\n          }\n        }\n        typeAd\n        activeNegotiations\n        numberViews\n        datePosted\n      }\n      errors {\n        name\n        text\n      }\n    }\n  }\n`;\nexport type CreateAdWineMutationFn = Apollo.MutationFunction<\n  CreateAdWineMutation,\n  CreateAdWineMutationVariables\n>;\n\n/**\n * __useCreateAdWineMutation__\n *\n * To run a mutation, you first call `useCreateAdWineMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useCreateAdWineMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [createAdWineMutation, { data, loading, error }] = useCreateAdWineMutation({\n *   variables: {\n *      input: // value for 'input'\n *   },\n * });\n */\nexport function useCreateAdWineMutation(\n  baseOptions?: Apollo.MutationHookOptions<\n    CreateAdWineMutation,\n    CreateAdWineMutationVariables\n  >\n) {\n  return Apollo.useMutation<\n    CreateAdWineMutation,\n    CreateAdWineMutationVariables\n  >(CreateAdWineDocument, baseOptions);\n}\nexport type CreateAdWineMutationHookResult = ReturnType<\n  typeof useCreateAdWineMutation\n>;\nexport type CreateAdWineMutationResult =\n  Apollo.MutationResult<CreateAdWineMutation>;\nexport type CreateAdWineMutationOptions = Apollo.BaseMutationOptions<\n  CreateAdWineMutation,\n  CreateAdWineMutationVariables\n>;\nexport const UpdateAdWineDocument = gql`\n  mutation UpdateAdWine($input: AdInputUpdate!) {\n    updateAd(input: $input) {\n      response {\n        _id\n      }\n      errors {\n        name\n        text\n      }\n    }\n  }\n`;\nexport type UpdateAdWineMutationFn = Apollo.MutationFunction<\n  UpdateAdWineMutation,\n  UpdateAdWineMutationVariables\n>;\n\n/**\n * __useUpdateAdWineMutation__\n *\n * To run a mutation, you first call `useUpdateAdWineMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useUpdateAdWineMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [updateAdWineMutation, { data, loading, error }] = useUpdateAdWineMutation({\n *   variables: {\n *      input: // value for 'input'\n *   },\n * });\n */\nexport function useUpdateAdWineMutation(\n  baseOptions?: Apollo.MutationHookOptions<\n    UpdateAdWineMutation,\n    UpdateAdWineMutationVariables\n  >\n) {\n  return Apollo.useMutation<\n    UpdateAdWineMutation,\n    UpdateAdWineMutationVariables\n  >(UpdateAdWineDocument, baseOptions);\n}\nexport type UpdateAdWineMutationHookResult = ReturnType<\n  typeof useUpdateAdWineMutation\n>;\nexport type UpdateAdWineMutationResult =\n  Apollo.MutationResult<UpdateAdWineMutation>;\nexport type UpdateAdWineMutationOptions = Apollo.BaseMutationOptions<\n  UpdateAdWineMutation,\n  UpdateAdWineMutationVariables\n>;\nexport const SaveAdDocument = gql`\n  mutation SaveAd($id: ID!) {\n    saveAd(id: $id) {\n      response {\n        _id\n        harvest\n        abv\n        priceFrom\n        priceTo\n        ... on AdWine {\n          wineName\n          litersFrom\n          litersTo\n          wine {\n            denominazioneZona\n          }\n        }\n        datePosted\n      }\n      errors {\n        name\n        text\n      }\n    }\n  }\n`;\nexport type SaveAdMutationFn = Apollo.MutationFunction<\n  SaveAdMutation,\n  SaveAdMutationVariables\n>;\n\n/**\n * __useSaveAdMutation__\n *\n * To run a mutation, you first call `useSaveAdMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useSaveAdMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [saveAdMutation, { data, loading, error }] = useSaveAdMutation({\n *   variables: {\n *      id: // value for 'id'\n *   },\n * });\n */\nexport function useSaveAdMutation(\n  baseOptions?: Apollo.MutationHookOptions<\n    SaveAdMutation,\n    SaveAdMutationVariables\n  >\n) {\n  return Apollo.useMutation<SaveAdMutation, SaveAdMutationVariables>(\n    SaveAdDocument,\n    baseOptions\n  );\n}\nexport type SaveAdMutationHookResult = ReturnType<typeof useSaveAdMutation>;\nexport type SaveAdMutationResult = Apollo.MutationResult<SaveAdMutation>;\nexport type SaveAdMutationOptions = Apollo.BaseMutationOptions<\n  SaveAdMutation,\n  SaveAdMutationVariables\n>;\nexport const DeleteAdDocument = gql`\n  mutation DeleteAd($id: ID!) {\n    deleteAd(id: $id) {\n      response {\n        _id\n      }\n      errors {\n        name\n        text\n      }\n    }\n  }\n`;\nexport type DeleteAdMutationFn = Apollo.MutationFunction<\n  DeleteAdMutation,\n  DeleteAdMutationVariables\n>;\n\n/**\n * __useDeleteAdMutation__\n *\n * To run a mutation, you first call `useDeleteAdMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useDeleteAdMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [deleteAdMutation, { data, loading, error }] = useDeleteAdMutation({\n *   variables: {\n *      id: // value for 'id'\n *   },\n * });\n */\nexport function useDeleteAdMutation(\n  baseOptions?: Apollo.MutationHookOptions<\n    DeleteAdMutation,\n    DeleteAdMutationVariables\n  >\n) {\n  return Apollo.useMutation<DeleteAdMutation, DeleteAdMutationVariables>(\n    DeleteAdDocument,\n    baseOptions\n  );\n}\nexport type DeleteAdMutationHookResult = ReturnType<typeof useDeleteAdMutation>;\nexport type DeleteAdMutationResult = Apollo.MutationResult<DeleteAdMutation>;\nexport type DeleteAdMutationOptions = Apollo.BaseMutationOptions<\n  DeleteAdMutation,\n  DeleteAdMutationVariables\n>;\nexport const CreateNegotiationDocument = gql`\n  mutation CreateNegotiation($negotiation: NegotiationInput!) {\n    createNegotiation(negotiation: $negotiation) {\n      response {\n        ...NegotiationDetails\n      }\n      errors {\n        name\n        text\n      }\n    }\n  }\n  ${NegotiationDetailsFragmentDoc}\n`;\nexport type CreateNegotiationMutationFn = Apollo.MutationFunction<\n  CreateNegotiationMutation,\n  CreateNegotiationMutationVariables\n>;\n\n/**\n * __useCreateNegotiationMutation__\n *\n * To run a mutation, you first call `useCreateNegotiationMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useCreateNegotiationMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [createNegotiationMutation, { data, loading, error }] = useCreateNegotiationMutation({\n *   variables: {\n *      negotiation: // value for 'negotiation'\n *   },\n * });\n */\nexport function useCreateNegotiationMutation(\n  baseOptions?: Apollo.MutationHookOptions<\n    CreateNegotiationMutation,\n    CreateNegotiationMutationVariables\n  >\n) {\n  return Apollo.useMutation<\n    CreateNegotiationMutation,\n    CreateNegotiationMutationVariables\n  >(CreateNegotiationDocument, baseOptions);\n}\nexport type CreateNegotiationMutationHookResult = ReturnType<\n  typeof useCreateNegotiationMutation\n>;\nexport type CreateNegotiationMutationResult =\n  Apollo.MutationResult<CreateNegotiationMutation>;\nexport type CreateNegotiationMutationOptions = Apollo.BaseMutationOptions<\n  CreateNegotiationMutation,\n  CreateNegotiationMutationVariables\n>;\nexport const UpdateNegotiationDocument = gql`\n  mutation UpdateNegotiation($negotiation: NegotiationInputUpdate!) {\n    updateNegotiation(negotiation: $negotiation) {\n      response {\n        ...NegotiationDetails\n      }\n      errors {\n        name\n        text\n      }\n    }\n  }\n  ${NegotiationDetailsFragmentDoc}\n`;\nexport type UpdateNegotiationMutationFn = Apollo.MutationFunction<\n  UpdateNegotiationMutation,\n  UpdateNegotiationMutationVariables\n>;\n\n/**\n * __useUpdateNegotiationMutation__\n *\n * To run a mutation, you first call `useUpdateNegotiationMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useUpdateNegotiationMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [updateNegotiationMutation, { data, loading, error }] = useUpdateNegotiationMutation({\n *   variables: {\n *      negotiation: // value for 'negotiation'\n *   },\n * });\n */\nexport function useUpdateNegotiationMutation(\n  baseOptions?: Apollo.MutationHookOptions<\n    UpdateNegotiationMutation,\n    UpdateNegotiationMutationVariables\n  >\n) {\n  return Apollo.useMutation<\n    UpdateNegotiationMutation,\n    UpdateNegotiationMutationVariables\n  >(UpdateNegotiationDocument, baseOptions);\n}\nexport type UpdateNegotiationMutationHookResult = ReturnType<\n  typeof useUpdateNegotiationMutation\n>;\nexport type UpdateNegotiationMutationResult =\n  Apollo.MutationResult<UpdateNegotiationMutation>;\nexport type UpdateNegotiationMutationOptions = Apollo.BaseMutationOptions<\n  UpdateNegotiationMutation,\n  UpdateNegotiationMutationVariables\n>;\nexport const DeleteNegotiationDocument = gql`\n  mutation DeleteNegotiation($id: ID!) {\n    deleteNegotiation(id: $id) {\n      response {\n        _id\n      }\n      errors {\n        name\n        text\n      }\n    }\n  }\n`;\nexport type DeleteNegotiationMutationFn = Apollo.MutationFunction<\n  DeleteNegotiationMutation,\n  DeleteNegotiationMutationVariables\n>;\n\n/**\n * __useDeleteNegotiationMutation__\n *\n * To run a mutation, you first call `useDeleteNegotiationMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useDeleteNegotiationMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [deleteNegotiationMutation, { data, loading, error }] = useDeleteNegotiationMutation({\n *   variables: {\n *      id: // value for 'id'\n *   },\n * });\n */\nexport function useDeleteNegotiationMutation(\n  baseOptions?: Apollo.MutationHookOptions<\n    DeleteNegotiationMutation,\n    DeleteNegotiationMutationVariables\n  >\n) {\n  return Apollo.useMutation<\n    DeleteNegotiationMutation,\n    DeleteNegotiationMutationVariables\n  >(DeleteNegotiationDocument, baseOptions);\n}\nexport type DeleteNegotiationMutationHookResult = ReturnType<\n  typeof useDeleteNegotiationMutation\n>;\nexport type DeleteNegotiationMutationResult =\n  Apollo.MutationResult<DeleteNegotiationMutation>;\nexport type DeleteNegotiationMutationOptions = Apollo.BaseMutationOptions<\n  DeleteNegotiationMutation,\n  DeleteNegotiationMutationVariables\n>;\nexport const CreateMessageDocument = gql`\n  mutation CreateMessage($message: MessageInput!) {\n    createMessage(message: $message) {\n      response {\n        ...MessageDetails\n      }\n      errors {\n        name\n        text\n      }\n    }\n  }\n  ${MessageDetailsFragmentDoc}\n`;\nexport type CreateMessageMutationFn = Apollo.MutationFunction<\n  CreateMessageMutation,\n  CreateMessageMutationVariables\n>;\n\n/**\n * __useCreateMessageMutation__\n *\n * To run a mutation, you first call `useCreateMessageMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useCreateMessageMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [createMessageMutation, { data, loading, error }] = useCreateMessageMutation({\n *   variables: {\n *      message: // value for 'message'\n *   },\n * });\n */\nexport function useCreateMessageMutation(\n  baseOptions?: Apollo.MutationHookOptions<\n    CreateMessageMutation,\n    CreateMessageMutationVariables\n  >\n) {\n  return Apollo.useMutation<\n    CreateMessageMutation,\n    CreateMessageMutationVariables\n  >(CreateMessageDocument, baseOptions);\n}\nexport type CreateMessageMutationHookResult = ReturnType<\n  typeof useCreateMessageMutation\n>;\nexport type CreateMessageMutationResult =\n  Apollo.MutationResult<CreateMessageMutation>;\nexport type CreateMessageMutationOptions = Apollo.BaseMutationOptions<\n  CreateMessageMutation,\n  CreateMessageMutationVariables\n>;\nexport const CreateReviewDocument = gql`\n  mutation CreateReview($review: ReviewInput!) {\n    createReview(review: $review) {\n      response {\n        ...ReviewDetails\n      }\n      errors {\n        name\n        text\n      }\n    }\n  }\n  ${ReviewDetailsFragmentDoc}\n`;\nexport type CreateReviewMutationFn = Apollo.MutationFunction<\n  CreateReviewMutation,\n  CreateReviewMutationVariables\n>;\n\n/**\n * __useCreateReviewMutation__\n *\n * To run a mutation, you first call `useCreateReviewMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useCreateReviewMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [createReviewMutation, { data, loading, error }] = useCreateReviewMutation({\n *   variables: {\n *      review: // value for 'review'\n *   },\n * });\n */\nexport function useCreateReviewMutation(\n  baseOptions?: Apollo.MutationHookOptions<\n    CreateReviewMutation,\n    CreateReviewMutationVariables\n  >\n) {\n  return Apollo.useMutation<\n    CreateReviewMutation,\n    CreateReviewMutationVariables\n  >(CreateReviewDocument, baseOptions);\n}\nexport type CreateReviewMutationHookResult = ReturnType<\n  typeof useCreateReviewMutation\n>;\nexport type CreateReviewMutationResult =\n  Apollo.MutationResult<CreateReviewMutation>;\nexport type CreateReviewMutationOptions = Apollo.BaseMutationOptions<\n  CreateReviewMutation,\n  CreateReviewMutationVariables\n>;\nexport const FavoriteDocument = gql`\n  query Favorite {\n    me {\n      savedAds {\n        _id\n        postedBy {\n          _id\n        }\n        harvest\n        abv\n        priceFrom\n        priceTo\n        ... on AdWine {\n          wineName\n          litersFrom\n          litersTo\n          metodoProduttivo\n        }\n        typeAd\n        activeNegotiations\n        numberViews\n        datePosted\n        isActive\n        savedTimes\n      }\n    }\n  }\n`;\n\n/**\n * __useFavoriteQuery__\n *\n * To run a query within a React component, call `useFavoriteQuery` and pass it any options that fit your needs.\n * When your component renders, `useFavoriteQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useFavoriteQuery({\n *   variables: {\n *   },\n * });\n */\nexport function useFavoriteQuery(\n  baseOptions?: Apollo.QueryHookOptions<FavoriteQuery, FavoriteQueryVariables>\n) {\n  return Apollo.useQuery<FavoriteQuery, FavoriteQueryVariables>(\n    FavoriteDocument,\n    baseOptions\n  );\n}\nexport function useFavoriteLazyQuery(\n  baseOptions?: Apollo.LazyQueryHookOptions<\n    FavoriteQuery,\n    FavoriteQueryVariables\n  >\n) {\n  return Apollo.useLazyQuery<FavoriteQuery, FavoriteQueryVariables>(\n    FavoriteDocument,\n    baseOptions\n  );\n}\nexport type FavoriteQueryHookResult = ReturnType<typeof useFavoriteQuery>;\nexport type FavoriteLazyQueryHookResult = ReturnType<\n  typeof useFavoriteLazyQuery\n>;\nexport type FavoriteQueryResult = Apollo.QueryResult<\n  FavoriteQuery,\n  FavoriteQueryVariables\n>;\nexport const LightMeDocument = gql`\n  query LightMe {\n    me {\n      _id\n      firstName\n      address {\n        comune\n      }\n    }\n  }\n`;\n\n/**\n * __useLightMeQuery__\n *\n * To run a query within a React component, call `useLightMeQuery` and pass it any options that fit your needs.\n * When your component renders, `useLightMeQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useLightMeQuery({\n *   variables: {\n *   },\n * });\n */\nexport function useLightMeQuery(\n  baseOptions?: Apollo.QueryHookOptions<LightMeQuery, LightMeQueryVariables>\n) {\n  return Apollo.useQuery<LightMeQuery, LightMeQueryVariables>(\n    LightMeDocument,\n    baseOptions\n  );\n}\nexport function useLightMeLazyQuery(\n  baseOptions?: Apollo.LazyQueryHookOptions<LightMeQuery, LightMeQueryVariables>\n) {\n  return Apollo.useLazyQuery<LightMeQuery, LightMeQueryVariables>(\n    LightMeDocument,\n    baseOptions\n  );\n}\nexport type LightMeQueryHookResult = ReturnType<typeof useLightMeQuery>;\nexport type LightMeLazyQueryHookResult = ReturnType<typeof useLightMeLazyQuery>;\nexport type LightMeQueryResult = Apollo.QueryResult<\n  LightMeQuery,\n  LightMeQueryVariables\n>;\nexport const MeDocument = gql`\n  query Me {\n    me {\n      _id\n      firstName\n      lastName\n      address {\n        comune\n      }\n      ads {\n        _id\n        postedBy {\n          _id\n        }\n        isActive\n        harvest\n        typeAd\n        ... on AdWine {\n          wineName\n        }\n      }\n      savedAds {\n        _id\n      }\n      messages {\n        _id\n        isViewed\n        sentBy {\n          _id\n        }\n      }\n      negotiations {\n        _id\n        isConcluded\n        ad {\n          _id\n        }\n      }\n      reviews {\n        _id\n        forUser {\n          _id\n        }\n        rating\n      }\n    }\n  }\n`;\n\n/**\n * __useMeQuery__\n *\n * To run a query within a React component, call `useMeQuery` and pass it any options that fit your needs.\n * When your component renders, `useMeQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useMeQuery({\n *   variables: {\n *   },\n * });\n */\nexport function useMeQuery(\n  baseOptions?: Apollo.QueryHookOptions<MeQuery, MeQueryVariables>\n) {\n  return Apollo.useQuery<MeQuery, MeQueryVariables>(MeDocument, baseOptions);\n}\nexport function useMeLazyQuery(\n  baseOptions?: Apollo.LazyQueryHookOptions<MeQuery, MeQueryVariables>\n) {\n  return Apollo.useLazyQuery<MeQuery, MeQueryVariables>(\n    MeDocument,\n    baseOptions\n  );\n}\nexport type MeQueryHookResult = ReturnType<typeof useMeQuery>;\nexport type MeLazyQueryHookResult = ReturnType<typeof useMeLazyQuery>;\nexport type MeQueryResult = Apollo.QueryResult<MeQuery, MeQueryVariables>;\nexport const IsUserLoggedInDocument = gql`\n  query IsUserLoggedIn {\n    isLoggedIn @client\n  }\n`;\n\n/**\n * __useIsUserLoggedInQuery__\n *\n * To run a query within a React component, call `useIsUserLoggedInQuery` and pass it any options that fit your needs.\n * When your component renders, `useIsUserLoggedInQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useIsUserLoggedInQuery({\n *   variables: {\n *   },\n * });\n */\nexport function useIsUserLoggedInQuery(\n  baseOptions?: Apollo.QueryHookOptions<\n    IsUserLoggedInQuery,\n    IsUserLoggedInQueryVariables\n  >\n) {\n  return Apollo.useQuery<IsUserLoggedInQuery, IsUserLoggedInQueryVariables>(\n    IsUserLoggedInDocument,\n    baseOptions\n  );\n}\nexport function useIsUserLoggedInLazyQuery(\n  baseOptions?: Apollo.LazyQueryHookOptions<\n    IsUserLoggedInQuery,\n    IsUserLoggedInQueryVariables\n  >\n) {\n  return Apollo.useLazyQuery<IsUserLoggedInQuery, IsUserLoggedInQueryVariables>(\n    IsUserLoggedInDocument,\n    baseOptions\n  );\n}\nexport type IsUserLoggedInQueryHookResult = ReturnType<\n  typeof useIsUserLoggedInQuery\n>;\nexport type IsUserLoggedInLazyQueryHookResult = ReturnType<\n  typeof useIsUserLoggedInLazyQuery\n>;\nexport type IsUserLoggedInQueryResult = Apollo.QueryResult<\n  IsUserLoggedInQuery,\n  IsUserLoggedInQueryVariables\n>;\nexport const NotificationDocument = gql`\n  query Notification {\n    notification @client {\n      type @client\n      message @client\n    }\n  }\n`;\n\n/**\n * __useNotificationQuery__\n *\n * To run a query within a React component, call `useNotificationQuery` and pass it any options that fit your needs.\n * When your component renders, `useNotificationQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useNotificationQuery({\n *   variables: {\n *   },\n * });\n */\nexport function useNotificationQuery(\n  baseOptions?: Apollo.QueryHookOptions<\n    NotificationQuery,\n    NotificationQueryVariables\n  >\n) {\n  return Apollo.useQuery<NotificationQuery, NotificationQueryVariables>(\n    NotificationDocument,\n    baseOptions\n  );\n}\nexport function useNotificationLazyQuery(\n  baseOptions?: Apollo.LazyQueryHookOptions<\n    NotificationQuery,\n    NotificationQueryVariables\n  >\n) {\n  return Apollo.useLazyQuery<NotificationQuery, NotificationQueryVariables>(\n    NotificationDocument,\n    baseOptions\n  );\n}\nexport type NotificationQueryHookResult = ReturnType<\n  typeof useNotificationQuery\n>;\nexport type NotificationLazyQueryHookResult = ReturnType<\n  typeof useNotificationLazyQuery\n>;\nexport type NotificationQueryResult = Apollo.QueryResult<\n  NotificationQuery,\n  NotificationQueryVariables\n>;\nexport const MyInfoDocument = gql`\n  query MyInfo {\n    myInfo @client {\n      _id\n      firstName\n      lastName\n      address {\n        comune\n      }\n      ads {\n        _id\n        postedBy {\n          _id\n        }\n        isActive\n      }\n      savedAds {\n        _id\n      }\n      messages {\n        _id\n        isViewed\n        sentBy {\n          _id\n        }\n      }\n      negotiations {\n        _id\n        isConcluded\n        ad {\n          _id\n        }\n      }\n      reviews {\n        _id\n        rating\n      }\n    }\n  }\n`;\n\n/**\n * __useMyInfoQuery__\n *\n * To run a query within a React component, call `useMyInfoQuery` and pass it any options that fit your needs.\n * When your component renders, `useMyInfoQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useMyInfoQuery({\n *   variables: {\n *   },\n * });\n */\nexport function useMyInfoQuery(\n  baseOptions?: Apollo.QueryHookOptions<MyInfoQuery, MyInfoQueryVariables>\n) {\n  return Apollo.useQuery<MyInfoQuery, MyInfoQueryVariables>(\n    MyInfoDocument,\n    baseOptions\n  );\n}\nexport function useMyInfoLazyQuery(\n  baseOptions?: Apollo.LazyQueryHookOptions<MyInfoQuery, MyInfoQueryVariables>\n) {\n  return Apollo.useLazyQuery<MyInfoQuery, MyInfoQueryVariables>(\n    MyInfoDocument,\n    baseOptions\n  );\n}\nexport type MyInfoQueryHookResult = ReturnType<typeof useMyInfoQuery>;\nexport type MyInfoLazyQueryHookResult = ReturnType<typeof useMyInfoLazyQuery>;\nexport type MyInfoQueryResult = Apollo.QueryResult<\n  MyInfoQuery,\n  MyInfoQueryVariables\n>;\nexport const WineSearchedDocument = gql`\n  query WineSearched {\n    searchedWine @client {\n      typeAd @client\n      typeProduct @client\n      wineName @client\n      harvest @client\n      abv @client\n      price @client\n      liters @client\n      isPost @client\n    }\n  }\n`;\n\n/**\n * __useWineSearchedQuery__\n *\n * To run a query within a React component, call `useWineSearchedQuery` and pass it any options that fit your needs.\n * When your component renders, `useWineSearchedQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useWineSearchedQuery({\n *   variables: {\n *   },\n * });\n */\nexport function useWineSearchedQuery(\n  baseOptions?: Apollo.QueryHookOptions<\n    WineSearchedQuery,\n    WineSearchedQueryVariables\n  >\n) {\n  return Apollo.useQuery<WineSearchedQuery, WineSearchedQueryVariables>(\n    WineSearchedDocument,\n    baseOptions\n  );\n}\nexport function useWineSearchedLazyQuery(\n  baseOptions?: Apollo.LazyQueryHookOptions<\n    WineSearchedQuery,\n    WineSearchedQueryVariables\n  >\n) {\n  return Apollo.useLazyQuery<WineSearchedQuery, WineSearchedQueryVariables>(\n    WineSearchedDocument,\n    baseOptions\n  );\n}\nexport type WineSearchedQueryHookResult = ReturnType<\n  typeof useWineSearchedQuery\n>;\nexport type WineSearchedLazyQueryHookResult = ReturnType<\n  typeof useWineSearchedLazyQuery\n>;\nexport type WineSearchedQueryResult = Apollo.QueryResult<\n  WineSearchedQuery,\n  WineSearchedQueryVariables\n>;\nexport const AdsWineDocument = gql`\n  query AdsWine(\n    $typeAd: TypeAd!\n    $typeProduct: TypeProduct!\n    $wineName: String\n    $offset: Int\n    $orderBy: QueryOrderBy\n    $limit: Int\n  ) {\n    ads(\n      typeAd: $typeAd\n      typeProduct: $typeProduct\n      wineName: $wineName\n      offset: $offset\n      orderBy: $orderBy\n      limit: $limit\n    ) {\n      ads {\n        _id\n        postedBy {\n          _id\n        }\n        harvest\n        abv\n        priceFrom\n        priceTo\n        ... on AdWine {\n          wineName\n          litersFrom\n          litersTo\n          metodoProduttivo\n          wine {\n            denominazioneZona\n          }\n        }\n        typeAd\n        activeNegotiations\n        numberViews\n        savedTimes\n        isActive\n        datePosted\n      }\n      pageCount\n    }\n  }\n`;\n\n/**\n * __useAdsWineQuery__\n *\n * To run a query within a React component, call `useAdsWineQuery` and pass it any options that fit your needs.\n * When your component renders, `useAdsWineQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useAdsWineQuery({\n *   variables: {\n *      typeAd: // value for 'typeAd'\n *      typeProduct: // value for 'typeProduct'\n *      wineName: // value for 'wineName'\n *      offset: // value for 'offset'\n *      orderBy: // value for 'orderBy'\n *      limit: // value for 'limit'\n *   },\n * });\n */\nexport function useAdsWineQuery(\n  baseOptions: Apollo.QueryHookOptions<AdsWineQuery, AdsWineQueryVariables>\n) {\n  return Apollo.useQuery<AdsWineQuery, AdsWineQueryVariables>(\n    AdsWineDocument,\n    baseOptions\n  );\n}\nexport function useAdsWineLazyQuery(\n  baseOptions?: Apollo.LazyQueryHookOptions<AdsWineQuery, AdsWineQueryVariables>\n) {\n  return Apollo.useLazyQuery<AdsWineQuery, AdsWineQueryVariables>(\n    AdsWineDocument,\n    baseOptions\n  );\n}\nexport type AdsWineQueryHookResult = ReturnType<typeof useAdsWineQuery>;\nexport type AdsWineLazyQueryHookResult = ReturnType<typeof useAdsWineLazyQuery>;\nexport type AdsWineQueryResult = Apollo.QueryResult<\n  AdsWineQuery,\n  AdsWineQueryVariables\n>;\nexport const AdDocument = gql`\n  query Ad($id: ID!) {\n    ad(id: $id) {\n      _id\n      postedBy {\n        _id\n        firstName\n        lastName\n        hideContact\n        email\n        phoneNumber\n      }\n      needsFollowUp\n      harvest\n      abv\n      priceFrom\n      priceTo\n      ... on AdWine {\n        wineName\n        litersFrom\n        litersTo\n        metodoProduttivo\n        wine {\n          denominazioneZona\n        }\n      }\n      typeAd\n      activeNegotiations\n      numberViews\n      savedTimes\n      datePosted\n      isActive\n    }\n    me {\n      _id\n      negotiations {\n        _id\n        ad {\n          _id\n        }\n      }\n      savedAds {\n        _id\n      }\n    }\n  }\n`;\n\n/**\n * __useAdQuery__\n *\n * To run a query within a React component, call `useAdQuery` and pass it any options that fit your needs.\n * When your component renders, `useAdQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useAdQuery({\n *   variables: {\n *      id: // value for 'id'\n *   },\n * });\n */\nexport function useAdQuery(\n  baseOptions: Apollo.QueryHookOptions<AdQuery, AdQueryVariables>\n) {\n  return Apollo.useQuery<AdQuery, AdQueryVariables>(AdDocument, baseOptions);\n}\nexport function useAdLazyQuery(\n  baseOptions?: Apollo.LazyQueryHookOptions<AdQuery, AdQueryVariables>\n) {\n  return Apollo.useLazyQuery<AdQuery, AdQueryVariables>(\n    AdDocument,\n    baseOptions\n  );\n}\nexport type AdQueryHookResult = ReturnType<typeof useAdQuery>;\nexport type AdLazyQueryHookResult = ReturnType<typeof useAdLazyQuery>;\nexport type AdQueryResult = Apollo.QueryResult<AdQuery, AdQueryVariables>;\nexport const WinesDocument = gql`\n  query Wines {\n    wines {\n      _id\n      denominazioneVino\n      espressioneComunitaria\n      denominazioneZona\n      tipoVino\n      vitigni\n    }\n  }\n`;\n\n/**\n * __useWinesQuery__\n *\n * To run a query within a React component, call `useWinesQuery` and pass it any options that fit your needs.\n * When your component renders, `useWinesQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useWinesQuery({\n *   variables: {\n *   },\n * });\n */\nexport function useWinesQuery(\n  baseOptions?: Apollo.QueryHookOptions<WinesQuery, WinesQueryVariables>\n) {\n  return Apollo.useQuery<WinesQuery, WinesQueryVariables>(\n    WinesDocument,\n    baseOptions\n  );\n}\nexport function useWinesLazyQuery(\n  baseOptions?: Apollo.LazyQueryHookOptions<WinesQuery, WinesQueryVariables>\n) {\n  return Apollo.useLazyQuery<WinesQuery, WinesQueryVariables>(\n    WinesDocument,\n    baseOptions\n  );\n}\nexport type WinesQueryHookResult = ReturnType<typeof useWinesQuery>;\nexport type WinesLazyQueryHookResult = ReturnType<typeof useWinesLazyQuery>;\nexport type WinesQueryResult = Apollo.QueryResult<\n  WinesQuery,\n  WinesQueryVariables\n>;\nexport const NegotiationsDocument = gql`\n  query Negotiations(\n    $offset: Int\n    $orderBy: QueryOrderBy\n    $limit: Int\n    $isConcluded: Boolean\n  ) {\n    negotiations(\n      offset: $offset\n      orderBy: $orderBy\n      limit: $limit\n      isConcluded: $isConcluded\n    ) {\n      negotiations {\n        ...NegotiationDetails\n      }\n      pageCount\n    }\n  }\n  ${NegotiationDetailsFragmentDoc}\n`;\n\n/**\n * __useNegotiationsQuery__\n *\n * To run a query within a React component, call `useNegotiationsQuery` and pass it any options that fit your needs.\n * When your component renders, `useNegotiationsQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useNegotiationsQuery({\n *   variables: {\n *      offset: // value for 'offset'\n *      orderBy: // value for 'orderBy'\n *      limit: // value for 'limit'\n *      isConcluded: // value for 'isConcluded'\n *   },\n * });\n */\nexport function useNegotiationsQuery(\n  baseOptions?: Apollo.QueryHookOptions<\n    NegotiationsQuery,\n    NegotiationsQueryVariables\n  >\n) {\n  return Apollo.useQuery<NegotiationsQuery, NegotiationsQueryVariables>(\n    NegotiationsDocument,\n    baseOptions\n  );\n}\nexport function useNegotiationsLazyQuery(\n  baseOptions?: Apollo.LazyQueryHookOptions<\n    NegotiationsQuery,\n    NegotiationsQueryVariables\n  >\n) {\n  return Apollo.useLazyQuery<NegotiationsQuery, NegotiationsQueryVariables>(\n    NegotiationsDocument,\n    baseOptions\n  );\n}\nexport type NegotiationsQueryHookResult = ReturnType<\n  typeof useNegotiationsQuery\n>;\nexport type NegotiationsLazyQueryHookResult = ReturnType<\n  typeof useNegotiationsLazyQuery\n>;\nexport type NegotiationsQueryResult = Apollo.QueryResult<\n  NegotiationsQuery,\n  NegotiationsQueryVariables\n>;\nexport const NegotiationDocument = gql`\n  query Negotiation($id: ID!) {\n    negotiation(id: $id) {\n      ...NegotiationDetails\n      ad {\n        ... on AdWine {\n          wine {\n            denominazioneZona\n          }\n        }\n        postedBy {\n          hideContact\n          phoneNumber\n          email\n        }\n      }\n    }\n  }\n  ${NegotiationDetailsFragmentDoc}\n`;\n\n/**\n * __useNegotiationQuery__\n *\n * To run a query within a React component, call `useNegotiationQuery` and pass it any options that fit your needs.\n * When your component renders, `useNegotiationQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useNegotiationQuery({\n *   variables: {\n *      id: // value for 'id'\n *   },\n * });\n */\nexport function useNegotiationQuery(\n  baseOptions: Apollo.QueryHookOptions<\n    NegotiationQuery,\n    NegotiationQueryVariables\n  >\n) {\n  return Apollo.useQuery<NegotiationQuery, NegotiationQueryVariables>(\n    NegotiationDocument,\n    baseOptions\n  );\n}\nexport function useNegotiationLazyQuery(\n  baseOptions?: Apollo.LazyQueryHookOptions<\n    NegotiationQuery,\n    NegotiationQueryVariables\n  >\n) {\n  return Apollo.useLazyQuery<NegotiationQuery, NegotiationQueryVariables>(\n    NegotiationDocument,\n    baseOptions\n  );\n}\nexport type NegotiationQueryHookResult = ReturnType<typeof useNegotiationQuery>;\nexport type NegotiationLazyQueryHookResult = ReturnType<\n  typeof useNegotiationLazyQuery\n>;\nexport type NegotiationQueryResult = Apollo.QueryResult<\n  NegotiationQuery,\n  NegotiationQueryVariables\n>;\nexport const MessagesDocument = gql`\n  query Messages {\n    messages {\n      ...MessageDetails\n    }\n  }\n  ${MessageDetailsFragmentDoc}\n`;\n\n/**\n * __useMessagesQuery__\n *\n * To run a query within a React component, call `useMessagesQuery` and pass it any options that fit your needs.\n * When your component renders, `useMessagesQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useMessagesQuery({\n *   variables: {\n *   },\n * });\n */\nexport function useMessagesQuery(\n  baseOptions?: Apollo.QueryHookOptions<MessagesQuery, MessagesQueryVariables>\n) {\n  return Apollo.useQuery<MessagesQuery, MessagesQueryVariables>(\n    MessagesDocument,\n    baseOptions\n  );\n}\nexport function useMessagesLazyQuery(\n  baseOptions?: Apollo.LazyQueryHookOptions<\n    MessagesQuery,\n    MessagesQueryVariables\n  >\n) {\n  return Apollo.useLazyQuery<MessagesQuery, MessagesQueryVariables>(\n    MessagesDocument,\n    baseOptions\n  );\n}\nexport type MessagesQueryHookResult = ReturnType<typeof useMessagesQuery>;\nexport type MessagesLazyQueryHookResult = ReturnType<\n  typeof useMessagesLazyQuery\n>;\nexport type MessagesQueryResult = Apollo.QueryResult<\n  MessagesQuery,\n  MessagesQueryVariables\n>;\nexport const MessagesNegotiationDocument = gql`\n  query MessagesNegotiation($id: ID!, $offset: Int, $limit: Int) {\n    messagesForNegotiation(negotiation: $id, offset: $offset, limit: $limit) {\n      messages {\n        ...MessageDetails\n      }\n      pageCount\n    }\n  }\n  ${MessageDetailsFragmentDoc}\n`;\n\n/**\n * __useMessagesNegotiationQuery__\n *\n * To run a query within a React component, call `useMessagesNegotiationQuery` and pass it any options that fit your needs.\n * When your component renders, `useMessagesNegotiationQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useMessagesNegotiationQuery({\n *   variables: {\n *      id: // value for 'id'\n *      offset: // value for 'offset'\n *      limit: // value for 'limit'\n *   },\n * });\n */\nexport function useMessagesNegotiationQuery(\n  baseOptions: Apollo.QueryHookOptions<\n    MessagesNegotiationQuery,\n    MessagesNegotiationQueryVariables\n  >\n) {\n  return Apollo.useQuery<\n    MessagesNegotiationQuery,\n    MessagesNegotiationQueryVariables\n  >(MessagesNegotiationDocument, baseOptions);\n}\nexport function useMessagesNegotiationLazyQuery(\n  baseOptions?: Apollo.LazyQueryHookOptions<\n    MessagesNegotiationQuery,\n    MessagesNegotiationQueryVariables\n  >\n) {\n  return Apollo.useLazyQuery<\n    MessagesNegotiationQuery,\n    MessagesNegotiationQueryVariables\n  >(MessagesNegotiationDocument, baseOptions);\n}\nexport type MessagesNegotiationQueryHookResult = ReturnType<\n  typeof useMessagesNegotiationQuery\n>;\nexport type MessagesNegotiationLazyQueryHookResult = ReturnType<\n  typeof useMessagesNegotiationLazyQuery\n>;\nexport type MessagesNegotiationQueryResult = Apollo.QueryResult<\n  MessagesNegotiationQuery,\n  MessagesNegotiationQueryVariables\n>;\nexport const ReviewsDocument = gql`\n  query Reviews($offset: Int, $orderBy: QueryOrderBy, $limit: Int) {\n    reviews(offset: $offset, orderBy: $orderBy, limit: $limit) {\n      reviews {\n        ...ReviewDetails\n      }\n      pageCount\n    }\n  }\n  ${ReviewDetailsFragmentDoc}\n`;\n\n/**\n * __useReviewsQuery__\n *\n * To run a query within a React component, call `useReviewsQuery` and pass it any options that fit your needs.\n * When your component renders, `useReviewsQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useReviewsQuery({\n *   variables: {\n *      offset: // value for 'offset'\n *      orderBy: // value for 'orderBy'\n *      limit: // value for 'limit'\n *   },\n * });\n */\nexport function useReviewsQuery(\n  baseOptions?: Apollo.QueryHookOptions<ReviewsQuery, ReviewsQueryVariables>\n) {\n  return Apollo.useQuery<ReviewsQuery, ReviewsQueryVariables>(\n    ReviewsDocument,\n    baseOptions\n  );\n}\nexport function useReviewsLazyQuery(\n  baseOptions?: Apollo.LazyQueryHookOptions<ReviewsQuery, ReviewsQueryVariables>\n) {\n  return Apollo.useLazyQuery<ReviewsQuery, ReviewsQueryVariables>(\n    ReviewsDocument,\n    baseOptions\n  );\n}\nexport type ReviewsQueryHookResult = ReturnType<typeof useReviewsQuery>;\nexport type ReviewsLazyQueryHookResult = ReturnType<typeof useReviewsLazyQuery>;\nexport type ReviewsQueryResult = Apollo.QueryResult<\n  ReviewsQuery,\n  ReviewsQueryVariables\n>;\nexport const ReviewDocument = gql`\n  query Review($id: ID!) {\n    review(id: $id) {\n      ...ReviewDetails\n    }\n  }\n  ${ReviewDetailsFragmentDoc}\n`;\n\n/**\n * __useReviewQuery__\n *\n * To run a query within a React component, call `useReviewQuery` and pass it any options that fit your needs.\n * When your component renders, `useReviewQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useReviewQuery({\n *   variables: {\n *      id: // value for 'id'\n *   },\n * });\n */\nexport function useReviewQuery(\n  baseOptions: Apollo.QueryHookOptions<ReviewQuery, ReviewQueryVariables>\n) {\n  return Apollo.useQuery<ReviewQuery, ReviewQueryVariables>(\n    ReviewDocument,\n    baseOptions\n  );\n}\nexport function useReviewLazyQuery(\n  baseOptions?: Apollo.LazyQueryHookOptions<ReviewQuery, ReviewQueryVariables>\n) {\n  return Apollo.useLazyQuery<ReviewQuery, ReviewQueryVariables>(\n    ReviewDocument,\n    baseOptions\n  );\n}\nexport type ReviewQueryHookResult = ReturnType<typeof useReviewQuery>;\nexport type ReviewLazyQueryHookResult = ReturnType<typeof useReviewLazyQuery>;\nexport type ReviewQueryResult = Apollo.QueryResult<\n  ReviewQuery,\n  ReviewQueryVariables\n>;\nexport const NegotiationsForAdDocument = gql`\n  query NegotiationsForAd($ad: ID!) {\n    negotiationsForAd(ad: $ad) {\n      _id\n      isConcluded\n      createdBy {\n        _id\n        firstName\n        lastName\n      }\n      dateCreated\n      dateConcluded\n      type\n    }\n  }\n`;\n\n/**\n * __useNegotiationsForAdQuery__\n *\n * To run a query within a React component, call `useNegotiationsForAdQuery` and pass it any options that fit your needs.\n * When your component renders, `useNegotiationsForAdQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useNegotiationsForAdQuery({\n *   variables: {\n *      ad: // value for 'ad'\n *   },\n * });\n */\nexport function useNegotiationsForAdQuery(\n  baseOptions: Apollo.QueryHookOptions<\n    NegotiationsForAdQuery,\n    NegotiationsForAdQueryVariables\n  >\n) {\n  return Apollo.useQuery<\n    NegotiationsForAdQuery,\n    NegotiationsForAdQueryVariables\n  >(NegotiationsForAdDocument, baseOptions);\n}\nexport function useNegotiationsForAdLazyQuery(\n  baseOptions?: Apollo.LazyQueryHookOptions<\n    NegotiationsForAdQuery,\n    NegotiationsForAdQueryVariables\n  >\n) {\n  return Apollo.useLazyQuery<\n    NegotiationsForAdQuery,\n    NegotiationsForAdQueryVariables\n  >(NegotiationsForAdDocument, baseOptions);\n}\nexport type NegotiationsForAdQueryHookResult = ReturnType<\n  typeof useNegotiationsForAdQuery\n>;\nexport type NegotiationsForAdLazyQueryHookResult = ReturnType<\n  typeof useNegotiationsForAdLazyQuery\n>;\nexport type NegotiationsForAdQueryResult = Apollo.QueryResult<\n  NegotiationsForAdQuery,\n  NegotiationsForAdQueryVariables\n>;\nexport const AdsForUserDocument = gql`\n  query AdsForUser(\n    $offset: Int\n    $orderBy: QueryOrderBy\n    $limit: Int\n    $isActive: Boolean\n    $user: ID!\n  ) {\n    adsForUser(\n      offset: $offset\n      orderBy: $orderBy\n      limit: $limit\n      user: $user\n      isActive: $isActive\n    ) {\n      ads {\n        _id\n        postedBy {\n          _id\n          firstName\n          lastName\n          hideContact\n        }\n        needsFollowUp\n        harvest\n        abv\n        priceFrom\n        priceTo\n        ... on AdWine {\n          wineName\n          litersFrom\n          litersTo\n          metodoProduttivo\n          wine {\n            denominazioneZona\n          }\n        }\n        typeAd\n        activeNegotiations\n        numberViews\n        datePosted\n        isActive\n        savedTimes\n      }\n      pageCount\n    }\n  }\n`;\n\n/**\n * __useAdsForUserQuery__\n *\n * To run a query within a React component, call `useAdsForUserQuery` and pass it any options that fit your needs.\n * When your component renders, `useAdsForUserQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useAdsForUserQuery({\n *   variables: {\n *      offset: // value for 'offset'\n *      orderBy: // value for 'orderBy'\n *      limit: // value for 'limit'\n *      isActive: // value for 'isActive'\n *      user: // value for 'user'\n *   },\n * });\n */\nexport function useAdsForUserQuery(\n  baseOptions: Apollo.QueryHookOptions<\n    AdsForUserQuery,\n    AdsForUserQueryVariables\n  >\n) {\n  return Apollo.useQuery<AdsForUserQuery, AdsForUserQueryVariables>(\n    AdsForUserDocument,\n    baseOptions\n  );\n}\nexport function useAdsForUserLazyQuery(\n  baseOptions?: Apollo.LazyQueryHookOptions<\n    AdsForUserQuery,\n    AdsForUserQueryVariables\n  >\n) {\n  return Apollo.useLazyQuery<AdsForUserQuery, AdsForUserQueryVariables>(\n    AdsForUserDocument,\n    baseOptions\n  );\n}\nexport type AdsForUserQueryHookResult = ReturnType<typeof useAdsForUserQuery>;\nexport type AdsForUserLazyQueryHookResult = ReturnType<\n  typeof useAdsForUserLazyQuery\n>;\nexport type AdsForUserQueryResult = Apollo.QueryResult<\n  AdsForUserQuery,\n  AdsForUserQueryVariables\n>;\nexport const GetMessageDocument = gql`\n  query getMessage($id: ID!) {\n    message(id: $id) {\n      ...MessageDetails\n    }\n  }\n  ${MessageDetailsFragmentDoc}\n`;\n\n/**\n * __useGetMessageQuery__\n *\n * To run a query within a React component, call `useGetMessageQuery` and pass it any options that fit your needs.\n * When your component renders, `useGetMessageQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useGetMessageQuery({\n *   variables: {\n *      id: // value for 'id'\n *   },\n * });\n */\nexport function useGetMessageQuery(\n  baseOptions: Apollo.QueryHookOptions<\n    GetMessageQuery,\n    GetMessageQueryVariables\n  >\n) {\n  return Apollo.useQuery<GetMessageQuery, GetMessageQueryVariables>(\n    GetMessageDocument,\n    baseOptions\n  );\n}\nexport function useGetMessageLazyQuery(\n  baseOptions?: Apollo.LazyQueryHookOptions<\n    GetMessageQuery,\n    GetMessageQueryVariables\n  >\n) {\n  return Apollo.useLazyQuery<GetMessageQuery, GetMessageQueryVariables>(\n    GetMessageDocument,\n    baseOptions\n  );\n}\nexport type GetMessageQueryHookResult = ReturnType<typeof useGetMessageQuery>;\nexport type GetMessageLazyQueryHookResult = ReturnType<\n  typeof useGetMessageLazyQuery\n>;\nexport type GetMessageQueryResult = Apollo.QueryResult<\n  GetMessageQuery,\n  GetMessageQueryVariables\n>;\nexport const AdPostedFollowUpDocument = gql`\n  subscription AdPostedFollowUp {\n    adPostedFollowUp {\n      _id\n      postedBy {\n        _id\n      }\n      harvest\n      abv\n      priceFrom\n      priceTo\n      ... on AdWine {\n        wineName\n        litersFrom\n        litersTo\n        metodoProduttivo\n      }\n      typeAd\n      activeNegotiations\n      numberViews\n      datePosted\n    }\n  }\n`;\n\n/**\n * __useAdPostedFollowUpSubscription__\n *\n * To run a query within a React component, call `useAdPostedFollowUpSubscription` and pass it any options that fit your needs.\n * When your component renders, `useAdPostedFollowUpSubscription` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the subscription, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useAdPostedFollowUpSubscription({\n *   variables: {\n *   },\n * });\n */\nexport function useAdPostedFollowUpSubscription(\n  baseOptions?: Apollo.SubscriptionHookOptions<\n    AdPostedFollowUpSubscription,\n    AdPostedFollowUpSubscriptionVariables\n  >\n) {\n  return Apollo.useSubscription<\n    AdPostedFollowUpSubscription,\n    AdPostedFollowUpSubscriptionVariables\n  >(AdPostedFollowUpDocument, baseOptions);\n}\nexport type AdPostedFollowUpSubscriptionHookResult = ReturnType<\n  typeof useAdPostedFollowUpSubscription\n>;\nexport type AdPostedFollowUpSubscriptionResult =\n  Apollo.SubscriptionResult<AdPostedFollowUpSubscription>;\nexport const AdRemovedDocument = gql`\n  subscription AdRemoved {\n    adRemoved {\n      _id\n    }\n  }\n`;\n\n/**\n * __useAdRemovedSubscription__\n *\n * To run a query within a React component, call `useAdRemovedSubscription` and pass it any options that fit your needs.\n * When your component renders, `useAdRemovedSubscription` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the subscription, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useAdRemovedSubscription({\n *   variables: {\n *   },\n * });\n */\nexport function useAdRemovedSubscription(\n  baseOptions?: Apollo.SubscriptionHookOptions<\n    AdRemovedSubscription,\n    AdRemovedSubscriptionVariables\n  >\n) {\n  return Apollo.useSubscription<\n    AdRemovedSubscription,\n    AdRemovedSubscriptionVariables\n  >(AdRemovedDocument, baseOptions);\n}\nexport type AdRemovedSubscriptionHookResult = ReturnType<\n  typeof useAdRemovedSubscription\n>;\nexport type AdRemovedSubscriptionResult =\n  Apollo.SubscriptionResult<AdRemovedSubscription>;\nexport const MessageSentDocument = gql`\n  subscription MessageSent {\n    messageSent {\n      ...MessageDetails\n    }\n  }\n  ${MessageDetailsFragmentDoc}\n`;\n\n/**\n * __useMessageSentSubscription__\n *\n * To run a query within a React component, call `useMessageSentSubscription` and pass it any options that fit your needs.\n * When your component renders, `useMessageSentSubscription` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the subscription, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useMessageSentSubscription({\n *   variables: {\n *   },\n * });\n */\nexport function useMessageSentSubscription(\n  baseOptions?: Apollo.SubscriptionHookOptions<\n    MessageSentSubscription,\n    MessageSentSubscriptionVariables\n  >\n) {\n  return Apollo.useSubscription<\n    MessageSentSubscription,\n    MessageSentSubscriptionVariables\n  >(MessageSentDocument, baseOptions);\n}\nexport type MessageSentSubscriptionHookResult = ReturnType<\n  typeof useMessageSentSubscription\n>;\nexport type MessageSentSubscriptionResult =\n  Apollo.SubscriptionResult<MessageSentSubscription>;\nexport const NegotiationCreatedDocument = gql`\n  subscription NegotiationCreated {\n    negotiationCreated {\n      ...NegotiationDetails\n    }\n  }\n  ${NegotiationDetailsFragmentDoc}\n`;\n\n/**\n * __useNegotiationCreatedSubscription__\n *\n * To run a query within a React component, call `useNegotiationCreatedSubscription` and pass it any options that fit your needs.\n * When your component renders, `useNegotiationCreatedSubscription` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the subscription, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useNegotiationCreatedSubscription({\n *   variables: {\n *   },\n * });\n */\nexport function useNegotiationCreatedSubscription(\n  baseOptions?: Apollo.SubscriptionHookOptions<\n    NegotiationCreatedSubscription,\n    NegotiationCreatedSubscriptionVariables\n  >\n) {\n  return Apollo.useSubscription<\n    NegotiationCreatedSubscription,\n    NegotiationCreatedSubscriptionVariables\n  >(NegotiationCreatedDocument, baseOptions);\n}\nexport type NegotiationCreatedSubscriptionHookResult = ReturnType<\n  typeof useNegotiationCreatedSubscription\n>;\nexport type NegotiationCreatedSubscriptionResult =\n  Apollo.SubscriptionResult<NegotiationCreatedSubscription>;\nexport const NegotiationClosedDocument = gql`\n  subscription NegotiationClosed {\n    negotiationClosed {\n      _id\n      postedBy {\n        _id\n      }\n      harvest\n      abv\n      priceFrom\n      priceTo\n      ... on AdWine {\n        wineName\n        litersFrom\n        litersTo\n        metodoProduttivo\n      }\n      typeAd\n      activeNegotiations\n      numberViews\n      datePosted\n    }\n  }\n`;\n\n/**\n * __useNegotiationClosedSubscription__\n *\n * To run a query within a React component, call `useNegotiationClosedSubscription` and pass it any options that fit your needs.\n * When your component renders, `useNegotiationClosedSubscription` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the subscription, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useNegotiationClosedSubscription({\n *   variables: {\n *   },\n * });\n */\nexport function useNegotiationClosedSubscription(\n  baseOptions?: Apollo.SubscriptionHookOptions<\n    NegotiationClosedSubscription,\n    NegotiationClosedSubscriptionVariables\n  >\n) {\n  return Apollo.useSubscription<\n    NegotiationClosedSubscription,\n    NegotiationClosedSubscriptionVariables\n  >(NegotiationClosedDocument, baseOptions);\n}\nexport type NegotiationClosedSubscriptionHookResult = ReturnType<\n  typeof useNegotiationClosedSubscription\n>;\nexport type NegotiationClosedSubscriptionResult =\n  Apollo.SubscriptionResult<NegotiationClosedSubscription>;\nexport const ReviewCreatedDocument = gql`\n  subscription ReviewCreated {\n    reviewCreated {\n      ...ReviewDetails\n    }\n  }\n  ${ReviewDetailsFragmentDoc}\n`;\n\n/**\n * __useReviewCreatedSubscription__\n *\n * To run a query within a React component, call `useReviewCreatedSubscription` and pass it any options that fit your needs.\n * When your component renders, `useReviewCreatedSubscription` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the subscription, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useReviewCreatedSubscription({\n *   variables: {\n *   },\n * });\n */\nexport function useReviewCreatedSubscription(\n  baseOptions?: Apollo.SubscriptionHookOptions<\n    ReviewCreatedSubscription,\n    ReviewCreatedSubscriptionVariables\n  >\n) {\n  return Apollo.useSubscription<\n    ReviewCreatedSubscription,\n    ReviewCreatedSubscriptionVariables\n  >(ReviewCreatedDocument, baseOptions);\n}\nexport type ReviewCreatedSubscriptionHookResult = ReturnType<\n  typeof useReviewCreatedSubscription\n>;\nexport type ReviewCreatedSubscriptionResult =\n  Apollo.SubscriptionResult<ReviewCreatedSubscription>;\n","/Users/giovanni/programming/wine-app-frontend/src/pages/index.tsx",[],"/Users/giovanni/programming/wine-app-frontend/src/pages/Ads.tsx",["362"],"import * as React from 'react';\nimport Typography from '@material-ui/core/Typography';\nimport CssBaseline from '@material-ui/core/CssBaseline';\nimport Container from '@material-ui/core/Container';\nimport { navigate, RouteComponentProps } from '@reach/router';\nimport {\n  AdsWineQuery,\n  QueryOrderBy,\n  TypeAd,\n  TypeProduct,\n  useAdsWineQuery,\n} from '../generated/graphql';\nimport { DeepExtractType } from 'ts-deep-extract-types';\nimport { notification, searchedWine } from '../cache';\nimport { CardWine } from '../components/Cards/CardWine';\nimport { BackButton } from '../components/BackButton';\nimport { Filter } from '../components/FilterAds';\n// import { SnackbarAds } from '../components/Snackbar';\nimport { useTheme } from '@material-ui/core/styles';\nimport { StyledBox } from '../containers/StyledBox';\nimport { useMediaQuery } from '@material-ui/core';\nimport { Order } from '../components/FilterAds/Order';\nimport { InfiniteScroll } from '../containers/InfiniteScrollFetch';\nimport { AdsWineResult } from '../types';\nimport { Loading } from '../components/Loading';\n\nconst Ads: React.FC<RouteComponentProps> = () => {\n  const theme = useTheme();\n  const matches = useMediaQuery(theme.breakpoints.up('sm'));\n  const width = matches ? 400 : 250;\n  const searchedWineCache = searchedWine();\n  // const [ads, setAds] = React.useState<\n  //   DeepExtractType<AdsWineQuery, ['ads']>['ads']\n  // >([]);\n  const [adsFiltered, setAdsFiltered] = React.useState<\n    DeepExtractType<AdsWineQuery, ['ads']>['ads']\n  >([]);\n  const [order, setOrder] = React.useState<QueryOrderBy>(\n    QueryOrderBy.CreatedAtDesc\n  );\n  const [isLoadFetchMore, setIsLoadFetchMore] = React.useState<boolean>(false);\n  const [isLoadOrder, setIsLoadOrder] = React.useState<boolean>(false);\n  const { data, loading, fetchMore } = useAdsWineQuery({\n    variables: {\n      offset: 0,\n      limit: 4,\n      orderBy: QueryOrderBy.CreatedAtDesc,\n      wineName: searchedWineCache?.wineName,\n      typeProduct: searchedWineCache?.typeProduct as TypeProduct,\n      typeAd:\n        searchedWineCache?.typeAd === TypeAd.Buy ? TypeAd.Sell : TypeAd.Buy,\n    },\n    onError: (error) => notification({ type: 'error', message: error.message }),\n  });\n\n  React.useEffect(() => {\n    if (!searchedWineCache?.wineName) void navigate('/');\n    if (fetchMore && data?.ads?.ads?.length) {\n      setIsLoadOrder(true);\n      fetchMore({\n        variables: { orderBy: order, limit: data?.ads?.ads?.length },\n      })\n        .then(() => {\n          setIsLoadOrder(false);\n          // setAds(data.ads?.ads);\n        })\n        .catch((e) => {\n          setIsLoadOrder(false);\n\n          console.error(e);\n        });\n    }\n  }, [order]);\n\n  const onClick = async () => {\n    if (searchedWineCache === undefined) {\n      return;\n    } else {\n      searchedWine({\n        ...searchedWineCache,\n      });\n      const url = searchedWineCache.typeAd === TypeAd.Buy ? '/buy' : '/sell';\n      await navigate(url);\n    }\n  };\n\n  const defaultText =\n    \"Questi sono gli annunci che abbiamo trovato per te: sono stati pubblicati da utenti interessati all'acquisto.\";\n  const noAdsText =\n    'Non abbiamo trovato nulla che corrisponde ai criteri di ricerca, ma esistono annunci per questo vino, clicca su filtri e mostra tutto per vederli';\n\n  const NoResults = () => (\n    <div data-testid='no-result' onClick={onClick}>\n      Non abbiamo trovato nulla, vuoi creare un annuncio?\n    </div>\n  );\n  if (data?.ads && data?.ads?.pageCount === 0) {\n    return <NoResults />;\n  }\n  const handleFetchMore = async () => {\n    setIsLoadFetchMore(true);\n    if (fetchMore && data?.ads?.ads?.length) {\n      try {\n        await fetchMore({\n          variables: {\n            offset: data?.ads?.ads?.length,\n            orderBy: order,\n            limit: 4,\n          },\n        });\n        setIsLoadFetchMore(false);\n        // setAds([...ads, ...(data.ads?.ads as [])]);\n      } catch (e) {\n        setIsLoadFetchMore(false);\n\n        console.error(e);\n      }\n    }\n  };\n  if (loading) {\n    return <Loading />;\n  }\n  if (data?.ads?.ads?.length) {\n    return (\n      <Container component='main' maxWidth='xs'>\n        <CssBaseline />\n        <BackButton />\n        <Typography color='primary' component='h3' variant='h5'>\n          La tua ricerca\n        </Typography>\n        <StyledBox typeAd={searchedWineCache?.typeAd as TypeAd} width={width}>\n          <Typography component='h5' variant='h6'>\n            {searchedWineCache?.typeAd === TypeAd.Buy ? `Compro ` : `Vendo`}{' '}\n            {searchedWineCache?.wineName}\n          </Typography>\n          <Typography align='left' variant='body1'>\n            {`Annata: ${searchedWineCache?.harvest as number}`}\n            <br />\n            {`Gradazione: ${searchedWineCache?.abv as number} % Vol`}\n            <br />\n            {`Quantità: ${searchedWineCache?.litersTo as number} l`}\n            <br />\n            {`Prezzo: ${searchedWineCache?.priceTo as number} euro al litro`}\n          </Typography>\n        </StyledBox>\n        <br />\n        <Typography color='primary' component='h3' variant='h5'>\n          I nostri risultati\n        </Typography>\n        <Typography variant='body2'>\n          {adsFiltered && adsFiltered.length > 0 ? defaultText : noAdsText}\n        </Typography>\n        <Filter list={data?.ads?.ads} setFilteredList={setAdsFiltered}>\n          {' '}\n          <Order isAds setOrder={setOrder} order={order} />\n        </Filter>\n        <br />\n        {isLoadOrder ? (\n          <Loading />\n        ) : (\n          <InfiniteScroll\n            fetchMore={handleFetchMore}\n            isVisible={data.ads.ads?.length !== data?.ads?.pageCount}\n            isLoading={isLoadFetchMore}\n          >\n            {' '}\n            {adsFiltered?.map((ad) => (\n              <CardWine key={ad?._id} ad={ad as AdsWineResult} />\n            ))}\n          </InfiniteScroll>\n        )}\n\n        {/* <SnackbarAds onClick={onClick} /> */}\n      </Container>\n    );\n  }\n  return <div>Grave errore</div>;\n};\n\nexport default Ads;\n","/Users/giovanni/programming/wine-app-frontend/src/pages/Profile.tsx",[],[],"/Users/giovanni/programming/wine-app-frontend/src/pages/Ad.tsx",[],"/Users/giovanni/programming/wine-app-frontend/src/pages/Signup.tsx",[],"/Users/giovanni/programming/wine-app-frontend/src/components/Notification.tsx",["363"],"import { useApolloClient } from '@apollo/client';\nimport Alert from '@material-ui/lab/Alert';\n\nimport * as React from 'react';\nimport { notification } from '../cache';\nimport { useNotificationQuery } from '../generated/graphql';\n\nexport const Notification: React.FC = () => {\n  const client = useApolloClient();\n  const onClose = () => {\n    notification(undefined);\n    setIsVisible(false);\n    client.cache.gc();\n  };\n  const { data, loading, error } = useNotificationQuery();\n  const [isVisible, setIsVisible] = React.useState(false);\n  const timeoutId = React.useRef<number | undefined>(undefined);\n  React.useEffect(() => {\n    if (data && !loading) {\n      setIsVisible(true);\n    }\n    clearTimeout(timeoutId.current);\n  }, [data, loading]);\n\n  React.useEffect(() => {\n    if (isVisible) {\n      timeoutId.current = window.setTimeout(() => {\n        onClose();\n      }, 10000);\n    }\n  }, [isVisible, data?.notification?.message]);\n\n  if (!isVisible || error) {\n    return null;\n  }\n  return (\n    <Alert severity={data?.notification?.type} onClose={onClose}>\n      {data?.notification?.message}\n    </Alert>\n  );\n};\n","/Users/giovanni/programming/wine-app-frontend/src/components/UserForm/index.tsx",[],"/Users/giovanni/programming/wine-app-frontend/src/utils/pivaValidator.ts",[],"/Users/giovanni/programming/wine-app-frontend/src/utils/passwordValidator.ts",[],"/Users/giovanni/programming/wine-app-frontend/src/utils/phoneNumberValidator.ts",[],"/Users/giovanni/programming/wine-app-frontend/src/utils/formHelper.ts",[],"/Users/giovanni/programming/wine-app-frontend/src/pages/Home.tsx",[],"/Users/giovanni/programming/wine-app-frontend/src/components/Navigation/index.tsx",["364"],"import { useApolloClient } from '@apollo/client';\nimport * as React from 'react';\nimport { isLoggedInVar, myInfo, notification } from '../../cache';\nimport {\n  useNegotiationCreatedSubscription,\n  useNegotiationClosedSubscription,\n  useAdPostedFollowUpSubscription,\n  useMessageSentSubscription,\n  useIsUserLoggedInQuery,\n  useReviewCreatedSubscription,\n  useLoginMutation,\n  useMeLazyQuery,\n  Address,\n  User,\n} from '../../generated/graphql';\nimport {\n  updateCacheMessages,\n  updateCacheMessagesAdmin,\n  updateCacheNegotiations,\n  updateCacheReview,\n} from '../../utils/updateCache';\nimport { HeaderBar } from './AppBar';\n\nexport const Header: React.FC = () => {\n  // const [stop, setStop] = React.useState(false);\n  const { data } = useIsUserLoggedInQuery();\n  React.useEffect(() => {\n    if (data?.isLoggedIn) {\n      lazyQuery();\n    }\n  }, [data]);\n  const client = useApolloClient();\n  const [lazyQuery, result] = useMeLazyQuery({\n    onCompleted: (data) => {\n      if (data.me) {\n        myInfo({\n          ...data.me,\n        } as User);\n        // setStop(true);\n      }\n    },\n    onError: (error) => {\n      notification({\n        type: 'error',\n        message: error.message,\n      });\n    },\n  });\n  const [loginMutation] = useLoginMutation({\n    onError: (error) =>\n      notification({\n        type: 'error',\n        message: error.message,\n      }),\n    onCompleted: ({ login }) => {\n      if (login?.errors?.length === 0) {\n        localStorage.setItem(\n          'wineapp-user-token',\n          login?.response?.token as string\n        );\n        localStorage.setItem(\n          'wineapp-user-id',\n          login?.response?.user._id as string\n        );\n        isLoggedInVar(true);\n        notification({\n          type: 'success',\n          message: 'welcome back',\n        });\n        myInfo({\n          _id: login.response?.user._id as string,\n          firstName: login.response?.user.firstName as string,\n          address: login.response?.user.address as Address,\n        } as User);\n      }\n      if (login?.errors?.length) {\n        notification({\n          type: 'error',\n          message: 'errore',\n        });\n      }\n    },\n  });\n  const onSubmitLogin = async ({\n    email,\n    password,\n  }: {\n    email: string;\n    password: string;\n  }) => {\n    await loginMutation({\n      variables: {\n        email: email,\n        password: password,\n      },\n    });\n  };\n  useNegotiationCreatedSubscription({\n    onSubscriptionData: ({ subscriptionData }) => {\n      notification({\n        type: 'success',\n        message: 'qualcuno ha aperto una trattativa con te',\n      });\n      updateCacheNegotiations(\n        client,\n        subscriptionData.data?.negotiationCreated,\n        true\n      );\n    },\n  });\n  useNegotiationClosedSubscription({\n    onSubscriptionData: ({ subscriptionData }) => {\n      updateCacheMessagesAdmin(\n        client,\n        subscriptionData.data?.negotiationClosed\n      );\n      const wineName =\n        subscriptionData.data?.negotiationClosed.__typename === 'AdWine' &&\n        subscriptionData.data?.negotiationClosed.wineName;\n      notification({\n        type: 'info',\n        // eslint-disable-next-line @typescript-eslint/restrict-template-expressions\n        message: `Una tua trattiva e stata dichiarata chiusa per il vino ${wineName}`,\n      });\n    },\n  });\n  useAdPostedFollowUpSubscription({\n    onSubscriptionData: () => {\n      notification({\n        type: 'info',\n        message: 'Qualcuno ha pubblicato un annuncio che ti interessa',\n      });\n    },\n  });\n  useMessageSentSubscription({\n    onSubscriptionData: ({ subscriptionData }) => {\n      updateCacheMessages(client, subscriptionData.data?.messageSent);\n    },\n  });\n  useReviewCreatedSubscription({\n    onSubscriptionData: ({ subscriptionData }) => {\n      const review = subscriptionData.data?.reviewCreated;\n      if (!review) return;\n      notification({\n        type: 'info',\n        message: `La cantina ${review.createdBy.firstName} ti ha lasciato una recensione`,\n      });\n      updateCacheReview(client, review);\n    },\n  });\n\n  return (\n    <HeaderBar\n      meQueryResult={result}\n      onSubmitLogin={onSubmitLogin}\n      isLoggedIn={data?.isLoggedIn || false}\n    />\n  );\n};\n","/Users/giovanni/programming/wine-app-frontend/src/components/Navigation/AppBar.tsx",[],"/Users/giovanni/programming/wine-app-frontend/src/components/Navigation/Drawer.tsx",[],"/Users/giovanni/programming/wine-app-frontend/src/components/LoginModal/LoginForm.tsx",[],[],"/Users/giovanni/programming/wine-app-frontend/src/components/FormFields/PasswordField.tsx",[],"/Users/giovanni/programming/wine-app-frontend/src/components/FormFields/TextField.tsx",[],"/Users/giovanni/programming/wine-app-frontend/src/components/LoginModal/index.tsx",[],"/Users/giovanni/programming/wine-app-frontend/src/components/FormFields/SliderField.tsx",[],"/Users/giovanni/programming/wine-app-frontend/src/components/FormFields/ComboboxField.tsx",[],[],"/Users/giovanni/programming/wine-app-frontend/src/components/FormFields/ComboboxComuni.tsx",[],"/Users/giovanni/programming/wine-app-frontend/src/components/FormFields/ComboboxFieldWines.tsx",["365"],"/* eslint-disable @typescript-eslint/no-unsafe-assignment */\n/* eslint-disable @typescript-eslint/no-unsafe-member-access */\n\nimport * as React from 'react';\nimport { Field, useField } from 'formik';\n\nimport TextField from '@material-ui/core/TextField';\nimport Autocomplete from '@material-ui/lab/Autocomplete';\nimport useMediaQuery from '@material-ui/core/useMediaQuery';\nimport ListSubheader from '@material-ui/core/ListSubheader';\nimport { useTheme, makeStyles } from '@material-ui/core/styles';\nimport { VariableSizeList, ListChildComponentProps } from 'react-window';\nimport { Typography } from '@material-ui/core';\n\nconst LISTBOX_PADDING = 8; // px\n\nfunction renderRow(props: ListChildComponentProps) {\n  const { data, index, style } = props;\n  return React.cloneElement(data[index], {\n    style: {\n      ...style,\n      top: (style.top as number) + LISTBOX_PADDING,\n    },\n  });\n}\n\nconst OuterElementContext = React.createContext({});\n\n// eslint-disable-next-line react/display-name\nconst OuterElementType = React.forwardRef<HTMLDivElement>((props, ref) => {\n  const outerProps = React.useContext(OuterElementContext);\n  return <div ref={ref} {...props} {...outerProps} />;\n});\n\nfunction useResetCache(data: any) {\n  const ref = React.useRef<VariableSizeList>(null);\n  React.useEffect(() => {\n    if (ref.current != null) {\n      ref.current.resetAfterIndex(0, true);\n    }\n  }, [data]);\n  return ref;\n}\n\n// Adapter for react-window\nconst ListboxComponent = React.forwardRef<HTMLDivElement>(\n  function ListboxComponent(props, ref) {\n    const { children, ...other } = props;\n    const itemData = React.Children.toArray(children);\n    const theme = useTheme();\n    const smUp = useMediaQuery(theme.breakpoints.up('sm'), { noSsr: true });\n    const itemCount = itemData.length;\n    const itemSize = smUp ? 36 : 48;\n\n    const getChildSize = (child: React.ReactNode) => {\n      if (React.isValidElement(child) && child.type === ListSubheader) {\n        return 48;\n      }\n\n      return itemSize;\n    };\n\n    const getHeight = () => {\n      if (itemCount > 8) {\n        return 8 * itemSize;\n      }\n      return itemData.map(getChildSize).reduce((a, b) => a + b, 0);\n    };\n\n    const gridRef = useResetCache(itemCount);\n\n    return (\n      <div ref={ref}>\n        <OuterElementContext.Provider value={other}>\n          <VariableSizeList\n            itemData={itemData}\n            height={getHeight() + 2 * LISTBOX_PADDING}\n            width='100%'\n            ref={gridRef}\n            outerElementType={OuterElementType}\n            innerElementType='ul'\n            itemSize={(index) => getChildSize(itemData[index])}\n            overscanCount={5}\n            itemCount={itemCount}\n          >\n            {renderRow}\n          </VariableSizeList>\n        </OuterElementContext.Provider>\n      </div>\n    );\n  }\n);\n\nconst useStyles = makeStyles({\n  option: {\n    color: '#000',\n  },\n  groupLabel: {\n    color: '#707070',\n  },\n});\n\nexport const Combobox: React.FC<{\n  items: string[];\n  label: string;\n  name: string;\n  defaultWine?: string;\n  labelTextColor?: string;\n  underlineColor?: string;\n\n  setFieldValue: (name: string, value: string) => void;\n}> = ({\n  items,\n  label,\n  name,\n  setFieldValue,\n  labelTextColor,\n  underlineColor,\n}) => {\n  const [, { error, touched }] = useField({\n    name: name,\n  });\n  const classes = useStyles();\n\n  return (\n    <Autocomplete\n      disableListWrap\n      data-testid='combobox-wines'\n      options={items} //options.sort((a, b) => -b.regione.localeCompare(a.regione))}\n      classes={{\n        option: classes.option,\n        groupLabel: classes.groupLabel,\n        inputRoot: underlineColor,\n      }}\n      ListboxComponent={\n        ListboxComponent as React.ComponentType<\n          React.HTMLAttributes<HTMLElement>\n        >\n      }\n      renderOption={(option) => <Typography noWrap>{option}</Typography>}\n      fullWidth\n      onChange={(e, option) => {\n        setFieldValue(name, option as string);\n      }}\n      renderInput={(params) => (\n        <Field\n          required\n          component={TextField}\n          {...params}\n          label={label}\n          error={touched && error !== undefined}\n          helperText={error}\n          inputProps={{\n            ...params.inputProps,\n            autoComplete: 'new-password',\n          }}\n          InputLabelProps={{\n            style: { color: labelTextColor },\n          }}\n        />\n      )}\n    />\n  );\n};\n","/Users/giovanni/programming/wine-app-frontend/src/components/FormFields/TextFieldAdornment.tsx",[],"/Users/giovanni/programming/wine-app-frontend/src/components/WineForms/Post/WineFormMutation.tsx",[],"/Users/giovanni/programming/wine-app-frontend/src/components/FormFields/SelectField.tsx",[],"/Users/giovanni/programming/wine-app-frontend/src/components/AddressForm/index.tsx",[],"/Users/giovanni/programming/wine-app-frontend/src/pages/BuySell.tsx",[],"/Users/giovanni/programming/wine-app-frontend/src/utils/multiFilter.ts",["366","367"],"export interface IFilters {\n  [key: string]: (value: any) => boolean;\n}\n\ninterface IArray {\n  [key: string]: any;\n}\n\n// function taken from https://gist.github.com/jherax/f11d669ba286f21b7a2dcff69621eb72\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nexport function multiFilter(\n  array: Array<IArray>,\n  filters: IFilters\n): Array<IArray> {\n  const filterKeys = Object.keys(filters);\n  return array.filter((item) => {\n    // validates all filter criteria\n    return filterKeys.every((key) => {\n      // ignores non-function predicates\n      if (typeof filters[key] !== 'function') return true;\n      return filters[key](item[key]);\n    });\n  });\n}\n","/Users/giovanni/programming/wine-app-frontend/src/components/BackButton.tsx",[],"/Users/giovanni/programming/wine-app-frontend/src/components/Snackbar.tsx",[],[],"/Users/giovanni/programming/wine-app-frontend/src/pages/MyAds.tsx",["368"],"import * as React from 'react';\nimport Typography from '@material-ui/core/Typography';\nimport CssBaseline from '@material-ui/core/CssBaseline';\nimport Container from '@material-ui/core/Container';\nimport { RouteComponentProps } from '@reach/router';\nimport {\n  QueryOrderBy,\n  useAdsForUserQuery,\n  AdsForUserQuery,\n} from '../generated/graphql';\nimport { BackButton } from '../components/BackButton';\nimport { Order } from '../components/FilterAds/Order';\nimport { InfiniteScroll } from '../containers/InfiniteScrollFetch';\nimport { myInfo } from '../cache';\nimport { CardWine } from '../components/Cards/CardWine';\nimport { AdsWineResult } from '../types';\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\nimport Divider from '@material-ui/core/Divider';\nimport { PurpleCheckbox } from '../components/FilterAds';\nimport { Loading } from '../components/Loading';\nimport { ApolloQueryResult } from '@apollo/client';\n\nconst MyAds: React.FC<RouteComponentProps> = () => {\n  const me = myInfo();\n  const [order, setOrder] = React.useState<QueryOrderBy>(\n    QueryOrderBy.CreatedAtDesc\n  );\n  const [pageCount, setPageCount] = React.useState<number>(0);\n  const { data, loading, error, fetchMore } = useAdsForUserQuery({\n    variables: {\n      offset: 0,\n      limit: 4,\n      orderBy: QueryOrderBy.CreatedAtDesc,\n      user: me?._id as string,\n      isActive: undefined,\n    },\n    onError: (error) => console.error(error),\n    onCompleted: ({ adsForUser }) => {\n      setPageCount(adsForUser?.pageCount as number);\n    },\n  });\n  const [hideNotActive, setHideNotActive] = React.useState<boolean>(false);\n  const [isLoadFetchMore, setIsLoadFetchMore] = React.useState<boolean>(false);\n  const [isLoadOrder, setIsLoadOrder] = React.useState<boolean>(false);\n  const handleShowAll = () => {\n    setHideNotActive(!hideNotActive);\n  };\n\n  React.useEffect(() => {\n    const loadMore = async () => {\n      setIsLoadOrder(true);\n      try {\n        const result: ApolloQueryResult<AdsForUserQuery> = await fetchMore({\n          variables: {\n            orderBy: order,\n            limit: data?.adsForUser?.ads?.length,\n            isActive: hideNotActive,\n          },\n        });\n        setIsLoadOrder(false);\n        result.data.adsForUser?.pageCount !== pageCount &&\n          setPageCount(result.data.adsForUser?.pageCount as number);\n      } catch (e) {\n        console.error(e);\n      }\n    };\n\n    if (data?.adsForUser?.ads?.length && fetchMore) {\n      void loadMore();\n    }\n  }, [order]);\n\n  if (loading) {\n    return <Loading />;\n  }\n\n  if (!me?._id || error) return <div>error</div>;\n\n  if (data?.adsForUser?.ads?.length === 0) {\n    return <div>Non hai ancora creato annunci</div>;\n  }\n  if (data?.adsForUser?.ads?.length) {\n    const handleFetchMore = async () => {\n      setIsLoadFetchMore(true);\n      if (fetchMore && data?.adsForUser?.ads?.length) {\n        try {\n          await fetchMore({\n            variables: {\n              offset: data?.adsForUser?.ads?.length,\n              orderBy: order,\n              isActive: hideNotActive,\n            },\n          });\n          setIsLoadFetchMore(false);\n          data.adsForUser?.pageCount !== pageCount &&\n            setPageCount(data.adsForUser?.pageCount as number);\n        } catch (e) {\n          setIsLoadFetchMore(false);\n          console.error(e);\n        }\n      }\n    };\n    return (\n      <Container component='main' maxWidth='xs'>\n        <CssBaseline />\n        <BackButton />\n        <br />\n        <Typography color='primary' component='h3' variant='h5'>\n          Gli annunci che hai creato\n        </Typography>\n        <br />\n        <Order setOrder={setOrder} order={order} />\n        <Divider />\n        <FormControlLabel\n          control={\n            <PurpleCheckbox\n              checked={hideNotActive}\n              onChange={handleShowAll}\n              name='showAll'\n            />\n          }\n          label='Nascondi gli annunci inattivi'\n        />\n        {isLoadOrder ? (\n          <Loading />\n        ) : (\n          <InfiniteScroll\n            fetchMore={handleFetchMore}\n            isVisible={data?.adsForUser?.ads?.length < pageCount}\n            isLoading={isLoadFetchMore}\n          >\n            {' '}\n            {data?.adsForUser?.ads\n              ?.filter((ad) => {\n                if (hideNotActive) {\n                  return ad?.isActive === hideNotActive;\n                } else {\n                  return ad;\n                }\n              })\n              .map((ad) => (\n                <CardWine key={ad && ad._id} ad={ad as AdsWineResult} />\n              ))}\n          </InfiniteScroll>\n        )}\n      </Container>\n    );\n  }\n  return <div>gravissimo errore</div>;\n};\n\nexport default MyAds;\n","/Users/giovanni/programming/wine-app-frontend/src/utils/updateCache.ts",["369","370"],"/* eslint-disable @typescript-eslint/no-unsafe-assignment */\n/* eslint-disable @typescript-eslint/ban-types */\nimport { ApolloCache, ApolloClient, gql, MutationResult } from '@apollo/client';\nimport { cloneDeep } from 'lodash';\nimport { DeepExtractType } from 'ts-deep-extract-types';\nimport { myInfo, searchedWine } from '../cache';\nimport {\n  AdsForUserDocument,\n  AdsWineDocument,\n  AdWine,\n  CreateAdWineMutation,\n  CreateMessageMutation,\n  CreateNegotiationMutation,\n  CreateReviewMutation,\n  DeleteNegotiationMutation,\n  MeDocument,\n  Message,\n  MessagesDocument,\n  MessagesNegotiationDocument,\n  Negotiation,\n  NegotiationsDocument,\n  Review,\n  SaveAdMutation,\n  User,\n} from '../generated/graphql';\n\ninterface IAds {\n  ads: Array<AdWine>;\n  pageCount: number;\n}\n\ninterface ICachedDataAds {\n  ads: IAds;\n}\n\ninterface ICachedDataMyAds {\n  adsForUser: IAds;\n}\n\nexport interface ICachedMe {\n  me: User;\n}\n\nexport interface ICachedDataNegotiations {\n  negotiations: {\n    negotiations: Negotiation[];\n    pageCount: number;\n  };\n}\n\nexport interface ICachedMessages {\n  messages: Message[];\n}\n\nexport interface ICachedMessagesNegs {\n  messagesForNegotiation: {\n    messages: Message[];\n    pageCount: number;\n  };\n}\n\n// eslint-disable-next-line @typescript-eslint/explicit-module-boundary-types\nexport const updateCacheNegotiations = (\n  client: ApolloClient<{}> | ApolloCache<CreateNegotiationMutation>,\n  negotiation: MutationResult<\n    DeepExtractType<\n      CreateNegotiationMutation,\n      ['createNegotiation']\n    >['response']\n  >['data'],\n  isSubscription = false\n): void => {\n  const cachedDataMeLocal: ICachedMe | null = cloneDeep(\n    //@ts-expect-error error\n    client.readQuery({\n      query: MeDocument,\n      variables: {},\n    })\n  );\n  if (!cachedDataMeLocal) {\n    return;\n  }\n  const cachedDataNegotiationsLocal: ICachedDataNegotiations | null = cloneDeep(\n    //@ts-expect-error error\n    client.readQuery({\n      query: NegotiationsDocument,\n      variables: {},\n    })\n  );\n\n  cachedDataMeLocal?.me.negotiations?.push(negotiation as Negotiation);\n  if (isSubscription) {\n    cachedDataMeLocal?.me.messages?.push({\n      isViewed: false,\n      //@ts-expect-error it does not matter if the sentBy is not complete\n      sentBy: { _id: 'placeHolder' },\n    });\n  }\n  //@ts-expect-error error\n  client.writeQuery({\n    query: MeDocument,\n    variables: {},\n    data: cachedDataMeLocal,\n  });\n  myInfo({ ...cachedDataMeLocal?.me });\n\n  if (!cachedDataNegotiationsLocal) return;\n  cachedDataNegotiationsLocal.negotiations.negotiations.push(\n    negotiation as Negotiation\n  );\n  cachedDataNegotiationsLocal.negotiations.pageCount += 1;\n  //@ts-expect-error error\n  client.writeQuery({\n    query: NegotiationsDocument,\n    variables: {},\n    data: cachedDataNegotiationsLocal,\n  });\n};\n\nexport const updateCacheMessagesAdmin = (\n  client: ApolloClient<{}>,\n  negotiation: MutationResult<\n    DeepExtractType<CreateAdWineMutation, ['createAd']>['response']\n  >['data']\n): void => {\n  const cachedDataMessagesLocal: ICachedMessages | null = cloneDeep(\n    client.readQuery({\n      query: MessagesDocument,\n    })\n  );\n  const me = myInfo();\n  cachedDataMessagesLocal?.messages.push({\n    isViewed: false,\n    content: 'placeholder',\n    negotiation: { _id: '605bd4166edd1f04a7764462' } as Negotiation,\n    _id: 'placeholder',\n    sentTo: { _id: me?._id } as User,\n    sentBy: { firstName: 'Amministratore' } as User,\n    dateSent: new Date().toISOString(),\n  });\n  client.writeQuery({\n    query: MessagesDocument,\n    data: cachedDataMessagesLocal,\n  });\n\n  const cachedDataMeLocal: ICachedMe | null = cloneDeep(\n    client.readQuery({\n      query: MeDocument,\n    })\n  );\n  if (!cachedDataMeLocal) {\n    return;\n  }\n\n  const indexNegToClose = cachedDataMeLocal?.me.negotiations?.findIndex(\n    (neg) => neg.ad._id === negotiation?._id\n  );\n  if (\n    indexNegToClose &&\n    indexNegToClose >= 0 &&\n    cachedDataMeLocal?.me.negotiations\n  ) {\n    cachedDataMeLocal.me.negotiations[indexNegToClose].isConcluded = true;\n  }\n  client.writeQuery({\n    query: MeDocument,\n    data: cachedDataMeLocal,\n  });\n  myInfo({ ...cachedDataMeLocal?.me });\n\n  const cachedDataNegotiationsLocal: ICachedDataNegotiations | null = cloneDeep(\n    client.readQuery({\n      query: NegotiationsDocument,\n    })\n  );\n  if (!cachedDataNegotiationsLocal) return;\n  cachedDataNegotiationsLocal?.negotiations.negotiations.filter(\n    (neg) => neg.ad._id !== negotiation?._id\n  );\n  client.writeQuery({\n    query: NegotiationsDocument,\n    data: cachedDataNegotiationsLocal,\n  });\n};\n\nexport const updateCacheAd = (\n  cache: ApolloCache<CreateAdWineMutation>,\n  ad: MutationResult<\n    DeepExtractType<CreateAdWineMutation, ['createAd']>['response']\n  >['data']\n): void => {\n  const searchedWineCache = searchedWine();\n  const variablesCacheUpdate = {\n    wineName: searchedWineCache?.wineName,\n    typeProduct: searchedWineCache?.typeProduct,\n    typeAd: searchedWineCache?.typeAd,\n  };\n  const cachedDataAdsLocal: ICachedDataAds | null = cloneDeep(\n    cache.readQuery({\n      query: AdsWineDocument,\n      variables: variablesCacheUpdate,\n    })\n  );\n  const me = myInfo();\n  const cachedDataMyAdsLocal: ICachedDataMyAds | null = cloneDeep(\n    cache.readQuery({\n      query: AdsForUserDocument,\n      variables: {\n        user: me?._id,\n      },\n    })\n  );\n  const cachedDataMeLocal: ICachedMe | null = cloneDeep(\n    cache.readQuery({\n      query: MeDocument,\n    })\n  );\n  if (!cachedDataMeLocal) {\n    return;\n  }\n\n  cachedDataMeLocal?.me.ads?.push(ad as AdWine);\n\n  cache.writeQuery({\n    query: MeDocument,\n    data: cachedDataMeLocal,\n  });\n  myInfo({ ...cachedDataMeLocal?.me });\n\n  if (cachedDataMyAdsLocal) {\n    cachedDataMyAdsLocal.adsForUser.ads.push(ad as AdWine);\n    cache.writeQuery({\n      query: AdsForUserDocument,\n      variables: {\n        user: me?._id,\n      },\n      data: cachedDataMyAdsLocal,\n    });\n  }\n  if (!cachedDataAdsLocal) return;\n  cachedDataAdsLocal.ads.ads.push(ad as AdWine);\n  cachedDataAdsLocal.ads.pageCount += 1;\n  cache.writeQuery({\n    query: AdsWineDocument,\n    variables: variablesCacheUpdate,\n    data: cachedDataAdsLocal,\n  });\n};\n\nexport const updateCacheMessages = (\n  client: ApolloClient<object>,\n  message: MutationResult<\n    DeepExtractType<CreateMessageMutation, ['createMessage']>['response']\n  >['data']\n): void => {\n  const cachedDataMeLocal: ICachedMe | null = cloneDeep(\n    client.readQuery({\n      query: MeDocument,\n    })\n  );\n  if (!cachedDataMeLocal) {\n    return;\n  }\n  cachedDataMeLocal?.me.messages?.push(message as Message);\n  client.writeQuery({\n    query: MeDocument,\n    data: cachedDataMeLocal,\n  });\n  myInfo({ ...cachedDataMeLocal?.me });\n\n  const cachedMessagesLocal: ICachedMessages | null = cloneDeep(\n    client.readQuery({\n      query: MessagesDocument,\n    })\n  );\n  cachedMessagesLocal?.messages.push(message as Message);\n  client.writeQuery({\n    query: MessagesDocument,\n    variables: { id: message?.negotiation._id },\n    data: cachedMessagesLocal,\n  });\n  const cachedMessagesNegotiationsLocal: ICachedMessagesNegs | null = cloneDeep(\n    client.readQuery({\n      query: MessagesNegotiationDocument,\n      variables: { id: message?.negotiation._id },\n    })\n  );\n  cachedMessagesNegotiationsLocal?.messagesForNegotiation.messages.unshift(\n    message as Message\n  );\n  client.writeQuery({\n    query: MessagesNegotiationDocument,\n    variables: { id: message?.negotiation._id },\n    data: cachedMessagesNegotiationsLocal,\n  });\n};\n\nexport const updateCacheReview = (\n  client: ApolloClient<object>,\n  review: MutationResult<\n    DeepExtractType<CreateReviewMutation, ['createReview']>['response']\n  >['data']\n) => {\n  const cachedDataMeLocal: ICachedMe | null = cloneDeep(\n    client.readQuery({\n      query: MeDocument,\n    })\n  );\n  if (!cachedDataMeLocal) {\n    return;\n  }\n  cachedDataMeLocal?.me.reviews?.push(review as Review);\n  client.writeQuery({\n    query: MeDocument,\n    data: cachedDataMeLocal,\n  });\n  myInfo({ ...cachedDataMeLocal?.me });\n};\n\nexport const updateCacheSaveAd = (\n  cache: ApolloCache<SaveAdMutation>,\n  ad: MutationResult<\n    DeepExtractType<SaveAdMutation, ['saveAd']>['response']\n  >['data']\n) => {\n  const cachedDataMeLocal: ICachedMe | null = cloneDeep(\n    cache.readQuery({\n      query: MeDocument,\n    })\n  );\n  const adCache: { savedTimes: number } | null = cloneDeep(\n    cache.readFragment({\n      // eslint-disable-next-line @typescript-eslint/restrict-template-expressions\n      id: `AdWine:${ad?._id}`,\n      fragment: gql`\n        fragment MyAd on AdWine {\n          savedTimes\n        }\n      `,\n    })\n  );\n  if (!cachedDataMeLocal || !adCache) {\n    return;\n  }\n  // let times: number;\n  if (\n    cachedDataMeLocal?.me.savedAds\n      ?.map((ad) => ad._id)\n      .includes(ad?._id as string)\n  ) {\n    const indexAd = cachedDataMeLocal?.me.savedAds.findIndex(\n      (adSaved) => adSaved._id === ad?._id\n    );\n    cachedDataMeLocal?.me.savedAds.splice(indexAd, 1);\n    adCache.savedTimes -= 1;\n  } else if (cachedDataMeLocal?.me.savedAds) {\n    cachedDataMeLocal?.me.savedAds.push(ad as AdWine);\n    adCache.savedTimes += 1;\n  }\n  cache.writeFragment({\n    // eslint-disable-next-line @typescript-eslint/restrict-template-expressions\n    id: `AdWine:${ad?._id}`,\n    fragment: gql`\n      fragment MyAd on AdWine {\n        savedTimes\n      }\n    `,\n    data: adCache,\n  });\n  cache.writeQuery({ query: MeDocument, data: cachedDataMeLocal });\n  myInfo({ ...cachedDataMeLocal?.me });\n};\n\nexport const updateRemovedNeg = (\n  client: ApolloCache<DeleteNegotiationMutation>,\n  negotiation: MutationResult<\n    DeepExtractType<\n      DeleteNegotiationMutation,\n      ['deleteNegotiation']\n    >['response']\n  >['data']\n): void => {\n  const cachedDataMeLocal: ICachedMe | null = cloneDeep(\n    client.readQuery({\n      query: MeDocument,\n      variables: {},\n    })\n  );\n  if (!cachedDataMeLocal) {\n    return;\n  }\n  const cachedDataNegotiationsLocal: ICachedDataNegotiations | null = cloneDeep(\n    client.readQuery({\n      query: NegotiationsDocument,\n      variables: {},\n    })\n  );\n\n  cachedDataMeLocal.me.negotiations = cachedDataMeLocal.me.negotiations?.filter(\n    (n) => n._id !== negotiation?._id\n  );\n  client.writeQuery({\n    query: MeDocument,\n    variables: {},\n    data: cachedDataMeLocal,\n  });\n  myInfo({ ...cachedDataMeLocal?.me });\n\n  if (!cachedDataNegotiationsLocal) return;\n  cachedDataNegotiationsLocal.negotiations.negotiations =\n    cachedDataNegotiationsLocal.negotiations.negotiations.filter(\n      (n) => n._id !== negotiation?._id\n    );\n  cachedDataNegotiationsLocal.negotiations.pageCount -= 1;\n  client.writeQuery({\n    query: NegotiationsDocument,\n    variables: {},\n    data: cachedDataNegotiationsLocal,\n  });\n};\n","/Users/giovanni/programming/wine-app-frontend/src/pages/Negotiations.tsx",["371"],"import * as React from 'react';\nimport Typography from '@material-ui/core/Typography';\nimport CssBaseline from '@material-ui/core/CssBaseline';\nimport Container from '@material-ui/core/Container';\nimport { RouteComponentProps } from '@reach/router';\nimport {\n  NegotiationDetailsFragment,\n  QueryOrderBy,\n  useNegotiationsQuery,\n} from '../generated/graphql';\nimport { CardNegotiation } from '../components/Cards/CardNegotiation';\nimport { BackButton } from '../components/BackButton';\nimport { Order } from '../components/FilterAds/Order';\nimport { InfiniteScroll } from '../containers/InfiniteScrollFetch';\nimport { notification } from '../cache';\nimport { PurpleCheckbox } from '../components/FilterAds';\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\nimport Divider from '@material-ui/core/Divider';\nimport { Loading } from '../components/Loading';\n\nconst Negotiations: React.FC<RouteComponentProps> = () => {\n  const [order, setOrder] = React.useState<QueryOrderBy>(\n    QueryOrderBy.CreatedAtDesc\n  );\n  const { data, loading, error, fetchMore } = useNegotiationsQuery({\n    variables: {\n      offset: 0,\n      limit: 4,\n      orderBy: order,\n      isConcluded: false,\n    },\n    onError: (error) => console.error(error),\n  });\n  const [isShowAll, setIsShowAll] = React.useState<boolean>(false);\n  const [isLoadFetchMore, setIsLoadFetchMore] = React.useState<boolean>(false);\n  const [isLoadOrder, setIsLoadOrder] = React.useState<boolean>(false);\n  const handleShowAll = async () => {\n    if (isShowAll) {\n      setIsShowAll(!isShowAll);\n      return;\n    }\n    setIsLoadOrder(true);\n    if (fetchMore && !isShowAll) {\n      try {\n        setIsShowAll(true);\n        await fetchMore({\n          variables: {\n            limit: data?.negotiations?.negotiations?.length,\n            isConcluded: true,\n          },\n        });\n        setIsLoadOrder(false);\n      } catch (e) {\n        notification({\n          type: 'error',\n          message: 'Errore durante il caricamento delle trattative',\n        });\n      }\n    }\n  };\n  const isVisible =\n    (data?.negotiations?.negotiations?.length as number) <\n    (data?.negotiations?.pageCount as number);\n  React.useEffect(() => {\n    if (data?.negotiations?.negotiations?.length && fetchMore) {\n      setIsLoadOrder(true);\n\n      fetchMore({\n        variables: {\n          orderBy: order,\n          limit: data?.negotiations?.negotiations?.length,\n          isConcluded: isShowAll,\n        },\n      })\n        .then(() => {\n          setIsLoadOrder(false);\n        })\n        .catch((e) => {\n          setIsLoadOrder(false);\n\n          console.error(e);\n        });\n    }\n  }, [order]);\n\n  if (loading) {\n    return <Loading />;\n  }\n  if (error) return <div>{error.message}</div>;\n  if (data?.negotiations?.negotiations?.length === 0) {\n    return <div>Non hai trattative attive</div>;\n  }\n  if (data?.negotiations?.negotiations?.length) {\n    const handleFetchMore = async () => {\n      setIsLoadFetchMore(true);\n      if (fetchMore) {\n        try {\n          await fetchMore({\n            variables: {\n              offset: data?.negotiations?.negotiations?.length,\n              orderBy: order,\n              isConcluded: isShowAll,\n            },\n          });\n          setIsLoadFetchMore(false);\n        } catch (e) {\n          console.error(e);\n          setIsLoadFetchMore(false);\n        }\n      }\n    };\n\n    return (\n      <Container component='main' maxWidth='xs'>\n        <CssBaseline />\n        <BackButton />\n        <br />\n        <Typography color='primary' component='h3' variant='h5'>\n          Le tue trattative attive\n        </Typography>\n        <br />\n        <Order setOrder={setOrder} order={order} />\n        <Divider />\n        <FormControlLabel\n          control={\n            <PurpleCheckbox\n              checked={isShowAll}\n              onChange={handleShowAll}\n              name='showAll'\n            />\n          }\n          label='Mostra anche le trattative chiuse'\n        />\n        {isLoadOrder ? (\n          <Loading />\n        ) : (\n          <InfiniteScroll\n            fetchMore={handleFetchMore}\n            isVisible={isVisible}\n            isLoading={isLoadFetchMore}\n          >\n            {data?.negotiations?.negotiations\n              .filter((negotiation) =>\n                !isShowAll\n                  ? negotiation?.isConcluded === isShowAll\n                  : negotiation\n              )\n              .map((negotiation) => (\n                <CardNegotiation\n                  key={negotiation?._id}\n                  negotiation={negotiation as NegotiationDetailsFragment}\n                />\n              ))}\n          </InfiniteScroll>\n        )}\n      </Container>\n    );\n  }\n  return <div>Grave errore</div>;\n};\n\nexport default Negotiations;\n","/Users/giovanni/programming/wine-app-frontend/src/pages/Negotiation.tsx",[],"/Users/giovanni/programming/wine-app-frontend/src/components/OpenNegotiations.tsx",[],"/Users/giovanni/programming/wine-app-frontend/src/pages/Messages.tsx",[],"/Users/giovanni/programming/wine-app-frontend/src/components/Chat/index.tsx",["372"],"import TextField from '@material-ui/core/TextField';\nimport * as React from 'react';\nimport {\n  MessageInput,\n  MessagesNegotiationQuery,\n} from '../../generated/graphql';\nimport { MessageChat } from './MessageChat';\nimport SendIcon from '@material-ui/icons/Send';\nimport InputAdornment from '@material-ui/core/InputAdornment';\nimport { IconButton } from '@material-ui/core';\nimport { myInfo } from '../../cache';\nimport { InfiniteScroll } from '../../containers/InfiniteScrollFetch';\nimport { DeepExtractType } from 'ts-deep-extract-types';\nimport { CreateReviewModal } from '../../components/ReviewModal';\nimport { CloseNegotiationModal } from '../NegotiationModals/CloseNegotiationModal';\n\ninterface PropMessages {\n  propsMessage: {\n    isLoading: boolean;\n    messages: DeepExtractType<\n      MessagesNegotiationQuery,\n      ['messagesForNegotiation']\n    >['messages'];\n    isVisible: boolean;\n    handleCreate: (message: MessageInput) => Promise<void>;\n    handleFetchMore: () => Promise<void>;\n  };\n}\n\nexport const Chat: React.FC<PropMessages> = ({ propsMessage }) => {\n  const me = myInfo();\n  const [messageContent, setMessageContent] = React.useState<string>('');\n  const [isLoading, setIsLoading] = React.useState<boolean>(false);\n  const divRef = React.useRef<null | HTMLDivElement>(null);\n  React.useEffect(() => {\n    if (divRef.current) {\n      if (isLoading) return;\n      divRef.current.scroll({\n        top: document.body.offsetHeight + 1000000,\n        left: 0,\n        behavior: 'smooth',\n      });\n    }\n    // const timeoutId = timerIdRef.current;\n    return () => {\n      // clearTimeout(timeoutId);\n    };\n  }, [propsMessage.messages]);\n  const message = propsMessage.messages ? propsMessage.messages[0] : null;\n  if (!message) {\n    return null;\n  }\n  const handleChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n    setMessageContent(event.target.value);\n  };\n  const recipient =\n    message.sentBy._id === me?._id ? message.sentTo._id : message.sentBy._id;\n  const handleCreateMessage = () => {\n    const newMessage = {\n      content: messageContent,\n      sentTo: recipient,\n      negotiation: message.negotiation._id,\n    };\n    void propsMessage.handleCreate(newMessage);\n\n    setMessageContent('');\n  };\n  if (!propsMessage.messages) return null;\n  return (\n    <>\n      <div\n        style={{\n          height: '75vh',\n          margin: 0,\n          padding: 0,\n          overflowY: 'scroll',\n        }}\n        ref={divRef}\n      >\n        <InfiniteScroll\n          fetchMore={propsMessage.handleFetchMore}\n          isLoading={propsMessage.isLoading}\n          isVisible={propsMessage.isVisible}\n          setIsLoading={setIsLoading}\n        >\n          {propsMessage.messages?.map((message) => (\n            <MessageChat key={message?._id} message={message} />\n          ))}\n        </InfiniteScroll>\n      </div>\n      <hr style={{ borderWidth: 1, borderColor: '#6d1331' }} />\n      <div\n        style={{\n          height: '10vh',\n          backgroundColor: '#fff',\n          paddingTop: 0,\n        }}\n      >\n        {message.negotiation.isConcluded ? (\n          <CreateReviewModal\n            idNegotiation={message.negotiation._id}\n            idUser={recipient}\n            isMessage\n            type={message.negotiation.type}\n          />\n        ) : (\n          <CloseNegotiationModal id={message.negotiation._id} isMessage />\n        )}\n        <TextField\n          fullWidth\n          multiline\n          rowsMax={2}\n          variant='outlined'\n          name='content'\n          type='text'\n          placeholder=''\n          label=''\n          value={messageContent}\n          onChange={handleChange}\n          inputProps={{ 'aria-label': 'input-message' }}\n          InputProps={{\n            endAdornment: (\n              <InputAdornment position='end'>\n                <IconButton\n                  aria-label='send'\n                  disabled={!messageContent}\n                  onClick={handleCreateMessage}\n                >\n                  <SendIcon />\n                </IconButton>\n              </InputAdornment>\n            ),\n          }}\n        />\n      </div>\n    </>\n  );\n};\n","/Users/giovanni/programming/wine-app-frontend/src/pages/Message.tsx",["373"],"import * as React from 'react';\nimport CssBaseline from '@material-ui/core/CssBaseline';\nimport Container from '@material-ui/core/Container';\nimport { RouteComponentProps } from '@reach/router';\nimport {\n  MessagesNegotiationQuery,\n  useMessagesNegotiationQuery,\n  useCreateMessageMutation,\n  MessageInput,\n} from '../generated/graphql';\nimport { useParams } from '@reach/router';\nimport { notification } from '../cache';\nimport { Chat } from '../components/Chat';\nimport { DeepExtractType } from 'ts-deep-extract-types';\nimport { Loading } from '../components/Loading';\n\nconst Message: React.FC<RouteComponentProps> = () => {\n  // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment\n  const { id }: { id: string } = useParams();\n  const { data, loading, error, fetchMore } = useMessagesNegotiationQuery({\n    fetchPolicy: 'network-only',\n    variables: { id, offset: 0, limit: 20 },\n    onCompleted: ({ messagesForNegotiation }) => {\n      setSortedMessage([...(messagesForNegotiation?.messages as [])].reverse());\n    },\n  });\n  React.useEffect(() => {\n    if (sortedMessage?.length)\n      setSortedMessage(\n        [...(data?.messagesForNegotiation?.messages as [])].reverse()\n      );\n  }, [data]);\n  const [isFirstRender, setIsFirstRender] = React.useState<boolean>(true);\n  const [isLoading, setIsLoading] = React.useState<boolean>(false);\n  const [sortedMessage, setSortedMessage] = React.useState<\n    DeepExtractType<\n      MessagesNegotiationQuery,\n      ['messagesForNegotiation']\n    >['messages']\n  >([]);\n  const message = data?.messagesForNegotiation?.messages?.length\n    ? data?.messagesForNegotiation.messages[0]\n    : null;\n  const [createMessage] = useCreateMessageMutation({\n    onError: (error) => {\n      console.error(error);\n      notification({ type: 'error', message: error.message });\n    },\n    onCompleted: (createdMessage) => {\n      const messageCreated = createdMessage?.createMessage?.response;\n      if (createdMessage.createMessage?.errors?.length) {\n        const errorMessages = createdMessage.createMessage?.errors.map(\n          (error) => error?.text\n        );\n        notification({\n          type: 'error',\n          message: `${errorMessages.toString()}`,\n        });\n        return;\n      }\n\n      if (sortedMessage?.length) {\n        setSortedMessage([...sortedMessage, messageCreated] as DeepExtractType<\n          MessagesNegotiationQuery,\n          ['messagesForNegotiation']\n        >['messages']);\n      }\n    },\n  });\n\n  const handleFetchMore = async () => {\n    if (isFirstRender) {\n      setIsFirstRender(false);\n      return;\n    }\n    if (sortedMessage?.length && fetchMore) {\n      setIsLoading(true);\n      try {\n        const { data } = await fetchMore({\n          variables: {\n            offset: sortedMessage.length,\n          },\n        });\n        const sortedNewMessages =\n          data.messagesForNegotiation?.messages?.reverse();\n        setSortedMessage([...(sortedNewMessages as []), ...sortedMessage]);\n        setIsLoading(false);\n      } catch (e) {\n        setIsLoading(false);\n\n        console.error(e);\n      }\n    }\n  };\n  const handleCreate = async (message: MessageInput) => {\n    await createMessage({\n      variables: { message },\n    });\n  };\n  const propsMessage = {\n    isLoading: isLoading,\n    messages: sortedMessage,\n    isVisible:\n      data?.messagesForNegotiation?.messages?.length !==\n      data?.messagesForNegotiation?.pageCount,\n    handleCreate,\n    handleFetchMore,\n  };\n  if (loading || propsMessage.isVisible === undefined) {\n    return <Loading />;\n  }\n  if (error) {\n    return <div>error</div>;\n  }\n  if (!message) return <div>niente mess ancora</div>;\n\n  if (!data?.messagesForNegotiation?.messages?.length) {\n    return null;\n  }\n  return (\n    <Container component='main' maxWidth='sm'>\n      <CssBaseline />\n      <Chat propsMessage={propsMessage} />\n    </Container>\n  );\n};\n\nexport default Message;\n","/Users/giovanni/programming/wine-app-frontend/src/components/Chat/MessageChat.tsx",[],"/Users/giovanni/programming/wine-app-frontend/src/components/FilterAds/Order.tsx",[],"/Users/giovanni/programming/wine-app-frontend/src/components/FilterAds/index.tsx",["374","375"],"import * as React from 'react';\nimport Button from '@material-ui/core/Button';\nimport Collapse from '@material-ui/core/Collapse';\nimport FilterListIcon from '@material-ui/icons/FilterList';\nimport Divider from '@material-ui/core/Divider';\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\nimport Checkbox, { CheckboxProps } from '@material-ui/core/Checkbox';\nimport { withStyles } from '@material-ui/core/styles';\nimport { deepPurple } from '@material-ui/core/colors';\nimport { searchedWine } from '../../cache';\nimport { IFilters, multiFilter } from '../../utils/multiFilter';\n\nexport const PurpleCheckbox = withStyles({\n  root: {\n    color: deepPurple[400],\n    '&$checked': {\n      color: deepPurple[600],\n    },\n  },\n  checked: {},\n})((props: CheckboxProps) => <Checkbox color='default' {...props} />);\n\ninterface FilterProps<T, Y> {\n  list: Array<T>;\n  filteredList?: Array<Y>;\n  setFilteredList: React.Dispatch<\n    React.SetStateAction<Array<any> | undefined | null>\n  >;\n  children?: React.ReactNode;\n}\n\nexport const Filter = <T, Y>(props: FilterProps<T, Y>): React.ReactElement => {\n  const searchedWineCache = searchedWine();\n  const [isShowAll, setIsShowAll] = React.useState<boolean>(false);\n  const [showFilter, setShowFilter] = React.useState<boolean>(false);\n  const [filterAds, setFilterAds] = React.useState<IFilters>({\n    priceTo: (priceTo: number) =>\n      priceTo <= (searchedWineCache?.priceTo as number),\n    abv: (abv: number) =>\n      abv >= (searchedWineCache?.abv as number) - 0.5 ||\n      abv <= (searchedWineCache?.abv as number) + 0.5,\n    harvest: (harvest: number) =>\n      harvest === (searchedWineCache?.harvest as number) ||\n      harvest - 1 === (searchedWineCache?.harvest as number),\n    litersTo: (litersTo: number) =>\n      litersTo >= (searchedWineCache?.litersTo as number),\n  });\n  React.useEffect(() => {\n    if (props.list.length > 0) {\n      const filtredAds = multiFilter(props.list, filterAds);\n      props.setFilteredList(filtredAds);\n    }\n  }, [filterAds, props.list]);\n  const handleShowAll = () => {\n    if (!isShowAll) {\n      setFilterAds({\n        priceTo: () => true,\n        harvest: () => true,\n        abv: () => true,\n        litersTo: () => true,\n      });\n    } else {\n      setFilterAds({\n        priceTo: (priceTo: number) =>\n          priceTo <= (searchedWineCache?.priceTo as number),\n        abv: (abv: number) =>\n          abv >= (searchedWineCache?.abv as number) - 0.5 ||\n          abv <= (searchedWineCache?.abv as number) + 0.5,\n        harvest: (harvest: number) =>\n          harvest === (searchedWineCache?.harvest as number) ||\n          harvest - 1 === (searchedWineCache?.harvest as number),\n        litersTo: (litersTo: number) =>\n          litersTo >= (searchedWineCache?.litersTo as number),\n      });\n    }\n    setIsShowAll(!isShowAll);\n  };\n  return (\n    <>\n      <Button\n        onClick={() => setShowFilter(!showFilter)}\n        aria-label='filter'\n        color='primary'\n        size='large'\n        startIcon={<FilterListIcon />}\n      >\n        Filtri\n      </Button>\n      <Collapse in={showFilter}>\n        {props.children}\n        <Divider />\n        <FormControlLabel\n          control={\n            <PurpleCheckbox\n              checked={isShowAll}\n              onChange={handleShowAll}\n              name='showAll'\n            />\n          }\n          label='Mostra tutti gli annunci per questo vino'\n        />\n      </Collapse>\n    </>\n  );\n};\n","/Users/giovanni/programming/wine-app-frontend/src/utils/useIntersectionHook.tsx",["376"],"import * as React from 'react';\n\nexport const useIntersect = ({\n  root = null,\n  rootMargin = '0px',\n  threshold = 0,\n}): [\n  React.Dispatch<React.SetStateAction<HTMLDivElement | null>>,\n  IntersectionObserverEntry | null\n] => {\n  const [entry, setEntry] = React.useState<IntersectionObserverEntry | null>(\n    null\n  );\n  const [node, setNode] = React.useState<HTMLDivElement | null>(null);\n\n  const observer = React.useRef<IntersectionObserver | null>(null);\n  React.useEffect(() => {\n    if (observer.current) {\n      observer.current.disconnect();\n    }\n    observer.current = new window.IntersectionObserver(\n      ([entry]) => setEntry(entry),\n      { root, rootMargin, threshold }\n    );\n\n    const { current: currentObserver } = observer;\n\n    if (node) {\n      currentObserver.observe(node);\n    }\n    return () => currentObserver.disconnect();\n  }, [node, root, rootMargin, threshold]);\n  return [setNode, entry];\n};\n","/Users/giovanni/programming/wine-app-frontend/src/containers/CloseNegotiationButton.tsx",[],"/Users/giovanni/programming/wine-app-frontend/src/pages/SavedAds.tsx",[],"/Users/giovanni/programming/wine-app-frontend/src/utils/styleHook.tsx",[],"/Users/giovanni/programming/wine-app-frontend/src/containers/CreateReview.tsx",[],"/Users/giovanni/programming/wine-app-frontend/src/pages/Reviews.tsx",["377"],"import * as React from 'react';\nimport Typography from '@material-ui/core/Typography';\nimport CssBaseline from '@material-ui/core/CssBaseline';\nimport Container from '@material-ui/core/Container';\nimport { RouteComponentProps } from '@reach/router';\nimport {\n  QueryOrderBy,\n  useReviewsQuery,\n  ReviewsQuery,\n  ReviewDetailsFragment,\n} from '../generated/graphql';\nimport { BackButton } from '../components/BackButton';\nimport { Order } from '../components/FilterAds/Order';\nimport { InfiniteScroll } from '../containers/InfiniteScrollFetch';\nimport { DeepExtractType } from 'ts-deep-extract-types';\nimport { CardReview } from '../components/Cards/CardReview';\nimport { Loading } from '../components/Loading';\n\nconst Reviews: React.FC<RouteComponentProps> = () => {\n  const [reviews, setReviews] = React.useState<\n    DeepExtractType<ReviewsQuery, ['reviews']>['reviews']\n  >([]);\n  const [order, setOrder] = React.useState<QueryOrderBy>(\n    QueryOrderBy.CreatedAtDesc\n  );\n  const [isLoadFetchMore, setIsLoadFetchMore] = React.useState<boolean>(false);\n  const [isLoadOrder, setIsLoadOrder] = React.useState<boolean>(false);\n\n  const { data, error, loading, fetchMore } = useReviewsQuery({\n    variables: {\n      offset: 0,\n      limit: 4,\n      orderBy: QueryOrderBy.CreatedAtDesc,\n    },\n    onError: (error) => console.error(error),\n    onCompleted: ({ reviews }) => setReviews(reviews?.reviews),\n  });\n\n  React.useEffect(() => {\n    if (reviews?.length && fetchMore) {\n      setIsLoadOrder(true);\n      fetchMore({\n        variables: { orderBy: order, limit: reviews.length },\n      })\n        .then(({ data }) => {\n          setReviews(data.reviews?.reviews);\n          setIsLoadOrder(false);\n        })\n        .catch((e) => {\n          console.error(e);\n          setIsLoadOrder(false);\n        });\n    }\n  }, [order]);\n\n  if (error) return <div>error</div>;\n  if (loading) {\n    return <Loading />;\n  }\n  if (reviews?.length === 0) {\n    return <div>Non hai ancora recensioni</div>;\n  } else if (reviews?.length) {\n    const handleFetchMore = async () => {\n      if (fetchMore) {\n        try {\n          setIsLoadFetchMore(true);\n          const { data } = await fetchMore({\n            variables: {\n              offset: reviews?.length,\n              orderBy: order,\n            },\n          });\n          setReviews([...(reviews as []), ...(data.reviews?.reviews as [])]);\n          setIsLoadFetchMore(false);\n        } catch (e) {\n          console.error(e);\n          setIsLoadFetchMore(false);\n        }\n      }\n    };\n    return (\n      <Container component='main' maxWidth='xs'>\n        <CssBaseline />\n        <BackButton />\n        <br />\n        <Typography color='primary' component='h3' variant='h5'>\n          Le tue recensioni\n        </Typography>\n        <br />\n        <Order setOrder={setOrder} order={order} />\n        {isLoadOrder ? (\n          <Loading />\n        ) : (\n          <InfiniteScroll\n            fetchMore={handleFetchMore}\n            isVisible={reviews?.length !== data?.reviews?.pageCount}\n            isLoading={isLoadFetchMore}\n          >\n            {' '}\n            {reviews?.map((review) => (\n              <CardReview\n                key={review && review._id}\n                review={review as ReviewDetailsFragment}\n              />\n            ))}\n          </InfiniteScroll>\n        )}\n      </Container>\n    );\n  }\n  return <div>Grave errore</div>;\n};\n\nexport default Reviews;\n","/Users/giovanni/programming/wine-app-frontend/src/components/Loading.tsx",[],"/Users/giovanni/programming/wine-app-frontend/src/components/ReviewModal/index.tsx",[],"/Users/giovanni/programming/wine-app-frontend/src/containers/InfiniteScrollFetch.tsx",["378"],"import { useLocation } from '@reach/router';\nimport * as React from 'react';\nimport ExpandMoreIcon from '@material-ui/icons/ExpandMore';\nimport { useIntersect } from '../utils/useIntersectionHook';\nimport { makeStyles, createStyles } from '@material-ui/core';\nimport CircularProgress from '@material-ui/core/CircularProgress';\n\ninterface InfiniteScrollProps {\n  children: React.ReactNode;\n  fetchMore: () => void;\n  isVisible: boolean;\n  isLoading: boolean;\n  setIsLoading?: React.Dispatch<React.SetStateAction<boolean>>;\n}\n\nconst useStyles = makeStyles(() =>\n  createStyles({\n    root: {\n      display: 'flex',\n      flexDirection: 'column',\n      alignItems: 'center',\n    },\n  })\n);\n\nexport const InfiniteScroll: React.FC<InfiniteScrollProps> = (props) => {\n  const classes = useStyles();\n  const { pathname } = useLocation();\n  const message = pathname.split('/')[1] === 'messaggi';\n  const [ref, entry] = useIntersect({ threshold: 0 });\n  const [isOk, setIsOk] = React.useState<boolean>(true);\n  React.useEffect(() => {\n    if (entry && entry?.intersectionRatio > 0 && isOk) {\n      void props.fetchMore();\n      props.setIsLoading && props.setIsLoading(true);\n      setIsOk(false);\n    } else if (entry?.intersectionRatio === 0 && !isOk) {\n      setIsOk(true);\n      props.setIsLoading && props.setIsLoading(false);\n    }\n  }, [entry?.intersectionRatio]);\n  if (message) {\n    return (\n      <>\n        {props.isVisible ? (\n          props.isLoading ? (\n            <div className={classes.root}>\n              <CircularProgress />\n            </div>\n          ) : (\n            <div className={classes.root} id='page-bottom-boundary' ref={ref}>\n              {' '}\n              <ExpandMoreIcon />\n            </div>\n          )\n        ) : null}\n        {props.children}\n      </>\n    );\n  }\n\n  return (\n    <div className={classes.root}>\n      {props.children}\n      {props.isVisible ? (\n        props.isLoading ? (\n          <CircularProgress />\n        ) : (\n          <div id='page-bottom-boundary' ref={ref} style={{ height: 30 }}>\n            {' '}\n            <ExpandMoreIcon />\n          </div>\n        )\n      ) : null}\n    </div>\n  );\n};\n","/Users/giovanni/programming/wine-app-frontend/src/containers/StyledBox.tsx",[],"/Users/giovanni/programming/wine-app-frontend/src/components/Cards/CardNegotiation.tsx",[],"/Users/giovanni/programming/wine-app-frontend/src/components/Cards/CardReview.tsx",[],"/Users/giovanni/programming/wine-app-frontend/src/components/Cards/CardWine.tsx",[],"/Users/giovanni/programming/wine-app-frontend/src/components/Cards/CardWineDetail.tsx",[],"/Users/giovanni/programming/wine-app-frontend/src/containers/FavoriteButton.tsx",["379"],"import * as React from 'react';\nimport FavoriteBorderIcon from '@material-ui/icons/FavoriteBorder';\nimport IconButton from '@material-ui/core/IconButton';\nimport FavoriteIcon from '@material-ui/icons/Favorite';\nimport { useSaveAdMutation, useMyInfoQuery } from '../generated/graphql';\nimport { updateCacheSaveAd } from '../utils/updateCache';\n\ntype FontSize = 'small' | 'inherit' | 'default' | 'large';\n\nexport const FavoriteButton: React.FC<{\n  id: string;\n  timesFavorite: number;\n  fontSize?: FontSize;\n}> = ({ id, fontSize = 'default', timesFavorite }) => {\n  const { data } = useMyInfoQuery();\n  const [saveAd] = useSaveAdMutation({\n    variables: { id },\n    onCompleted: () => {\n      setIsFav(!isFav);\n    },\n    onError: (error) => console.error(error),\n    update: (cache, { data }) => {\n      updateCacheSaveAd(cache, data?.saveAd?.response);\n    },\n  });\n  const [stop, setStop] = React.useState<boolean>(false);\n  const [isFav, setIsFav] = React.useState<boolean>(\n    data?.myInfo?.savedAds?.map((ad) => ad._id).includes(id) || false\n  );\n  React.useEffect(() => {\n    if (data?.myInfo?.savedAds && !stop) {\n      setIsFav(\n        data?.myInfo?.savedAds?.map((ad) => ad._id).includes(id) || false\n      );\n      setStop(true);\n    }\n  }, [data]);\n\n  return (\n    <IconButton aria-label='save' onClick={() => saveAd()} size='small'>\n      {isFav ? (\n        <FavoriteIcon fontSize={fontSize} />\n      ) : (\n        <FavoriteBorderIcon fontSize={fontSize} />\n      )}\n      {timesFavorite}\n    </IconButton>\n  );\n};\n","/Users/giovanni/programming/wine-app-frontend/src/components/SwipableTabsNotification/index.tsx",[],"/Users/giovanni/programming/wine-app-frontend/src/components/SwipableTabsNotification/NotificationListEl.tsx",[],"/Users/giovanni/programming/wine-app-frontend/src/components/SwipableTabsNotification/MessageListEl.tsx",[],"/Users/giovanni/programming/wine-app-frontend/src/components/NotificationModal/index.tsx",[],"/Users/giovanni/programming/wine-app-frontend/src/components/NegotiationModals/OpenNegotiationModal.tsx",[],"/Users/giovanni/programming/wine-app-frontend/src/components/NegotiationModals/CloseNegotiationModal.tsx",[],"/Users/giovanni/programming/wine-app-frontend/src/containers/CancelNegotiationButton.tsx",[],"/Users/giovanni/programming/wine-app-frontend/src/utils/wineList.ts",[],{"ruleId":"380","severity":1,"message":"381","line":18,"column":9,"nodeType":"382","messageId":"383","endLine":18,"endColumn":12,"suggestions":"384"},{"ruleId":"385","severity":1,"message":"386","line":2108,"column":8,"nodeType":"387","messageId":"388","endLine":2113,"endColumn":2},{"ruleId":"385","severity":1,"message":"386","line":2164,"column":8,"nodeType":"387","messageId":"388","endLine":2169,"endColumn":2},{"ruleId":"385","severity":1,"message":"386","line":2220,"column":8,"nodeType":"387","messageId":"388","endLine":2225,"endColumn":2},{"ruleId":"385","severity":1,"message":"386","line":2276,"column":8,"nodeType":"387","messageId":"388","endLine":2281,"endColumn":2},{"ruleId":"385","severity":1,"message":"386","line":2351,"column":8,"nodeType":"387","messageId":"388","endLine":2356,"endColumn":2},{"ruleId":"385","severity":1,"message":"386","line":2406,"column":8,"nodeType":"387","messageId":"388","endLine":2411,"endColumn":2},{"ruleId":"385","severity":1,"message":"386","line":2474,"column":8,"nodeType":"387","messageId":"388","endLine":2479,"endColumn":2},{"ruleId":"385","severity":1,"message":"386","line":2526,"column":8,"nodeType":"387","messageId":"388","endLine":2531,"endColumn":2},{"ruleId":"385","severity":1,"message":"386","line":2579,"column":8,"nodeType":"387","messageId":"388","endLine":2584,"endColumn":2},{"ruleId":"385","severity":1,"message":"386","line":2635,"column":8,"nodeType":"387","messageId":"388","endLine":2640,"endColumn":2},{"ruleId":"385","severity":1,"message":"386","line":2690,"column":8,"nodeType":"387","messageId":"388","endLine":2695,"endColumn":2},{"ruleId":"385","severity":1,"message":"386","line":2746,"column":8,"nodeType":"387","messageId":"388","endLine":2751,"endColumn":2},{"ruleId":"385","severity":1,"message":"386","line":2802,"column":8,"nodeType":"387","messageId":"388","endLine":2807,"endColumn":2},{"ruleId":"385","severity":1,"message":"386","line":2866,"column":8,"nodeType":"387","messageId":"388","endLine":2868,"endColumn":2},{"ruleId":"385","severity":1,"message":"386","line":2874,"column":8,"nodeType":"387","messageId":"388","endLine":2879,"endColumn":2},{"ruleId":"385","severity":1,"message":"386","line":2920,"column":8,"nodeType":"387","messageId":"388","endLine":2922,"endColumn":2},{"ruleId":"385","severity":1,"message":"386","line":2928,"column":8,"nodeType":"387","messageId":"388","endLine":2930,"endColumn":2},{"ruleId":"385","severity":1,"message":"386","line":3006,"column":8,"nodeType":"387","messageId":"388","endLine":3008,"endColumn":2},{"ruleId":"385","severity":1,"message":"386","line":3011,"column":8,"nodeType":"387","messageId":"388","endLine":3013,"endColumn":2},{"ruleId":"385","severity":1,"message":"386","line":3043,"column":8,"nodeType":"387","messageId":"388","endLine":3048,"endColumn":2},{"ruleId":"385","severity":1,"message":"386","line":3054,"column":8,"nodeType":"387","messageId":"388","endLine":3059,"endColumn":2},{"ruleId":"385","severity":1,"message":"386","line":3099,"column":8,"nodeType":"387","messageId":"388","endLine":3104,"endColumn":2},{"ruleId":"385","severity":1,"message":"386","line":3110,"column":8,"nodeType":"387","messageId":"388","endLine":3115,"endColumn":2},{"ruleId":"385","severity":1,"message":"386","line":3187,"column":8,"nodeType":"387","messageId":"388","endLine":3189,"endColumn":2},{"ruleId":"385","severity":1,"message":"386","line":3195,"column":8,"nodeType":"387","messageId":"388","endLine":3197,"endColumn":2},{"ruleId":"385","severity":1,"message":"386","line":3239,"column":8,"nodeType":"387","messageId":"388","endLine":3244,"endColumn":2},{"ruleId":"385","severity":1,"message":"386","line":3250,"column":8,"nodeType":"387","messageId":"388","endLine":3255,"endColumn":2},{"ruleId":"385","severity":1,"message":"386","line":3339,"column":8,"nodeType":"387","messageId":"388","endLine":3341,"endColumn":2},{"ruleId":"385","severity":1,"message":"386","line":3347,"column":8,"nodeType":"387","messageId":"388","endLine":3349,"endColumn":2},{"ruleId":"385","severity":1,"message":"386","line":3425,"column":8,"nodeType":"387","messageId":"388","endLine":3427,"endColumn":2},{"ruleId":"385","severity":1,"message":"386","line":3430,"column":8,"nodeType":"387","messageId":"388","endLine":3432,"endColumn":2},{"ruleId":"385","severity":1,"message":"386","line":3469,"column":8,"nodeType":"387","messageId":"388","endLine":3471,"endColumn":2},{"ruleId":"385","severity":1,"message":"386","line":3477,"column":8,"nodeType":"387","messageId":"388","endLine":3479,"endColumn":2},{"ruleId":"385","severity":1,"message":"386","line":3532,"column":8,"nodeType":"387","messageId":"388","endLine":3537,"endColumn":2},{"ruleId":"385","severity":1,"message":"386","line":3543,"column":8,"nodeType":"387","messageId":"388","endLine":3548,"endColumn":2},{"ruleId":"385","severity":1,"message":"386","line":3601,"column":8,"nodeType":"387","messageId":"388","endLine":3606,"endColumn":2},{"ruleId":"385","severity":1,"message":"386","line":3612,"column":8,"nodeType":"387","messageId":"388","endLine":3617,"endColumn":2},{"ruleId":"385","severity":1,"message":"386","line":3655,"column":8,"nodeType":"387","messageId":"388","endLine":3657,"endColumn":2},{"ruleId":"385","severity":1,"message":"386","line":3663,"column":8,"nodeType":"387","messageId":"388","endLine":3668,"endColumn":2},{"ruleId":"385","severity":1,"message":"386","line":3712,"column":8,"nodeType":"387","messageId":"388","endLine":3717,"endColumn":2},{"ruleId":"385","severity":1,"message":"386","line":3723,"column":8,"nodeType":"387","messageId":"388","endLine":3728,"endColumn":2},{"ruleId":"385","severity":1,"message":"386","line":3774,"column":8,"nodeType":"387","messageId":"388","endLine":3776,"endColumn":2},{"ruleId":"385","severity":1,"message":"386","line":3782,"column":8,"nodeType":"387","messageId":"388","endLine":3784,"endColumn":2},{"ruleId":"385","severity":1,"message":"386","line":3821,"column":8,"nodeType":"387","messageId":"388","endLine":3823,"endColumn":2},{"ruleId":"385","severity":1,"message":"386","line":3829,"column":8,"nodeType":"387","messageId":"388","endLine":3831,"endColumn":2},{"ruleId":"385","severity":1,"message":"386","line":3876,"column":8,"nodeType":"387","messageId":"388","endLine":3881,"endColumn":2},{"ruleId":"385","severity":1,"message":"386","line":3887,"column":8,"nodeType":"387","messageId":"388","endLine":3892,"endColumn":2},{"ruleId":"385","severity":1,"message":"386","line":3977,"column":8,"nodeType":"387","messageId":"388","endLine":3982,"endColumn":2},{"ruleId":"385","severity":1,"message":"386","line":3988,"column":8,"nodeType":"387","messageId":"388","endLine":3993,"endColumn":2},{"ruleId":"385","severity":1,"message":"386","line":4032,"column":8,"nodeType":"387","messageId":"388","endLine":4037,"endColumn":2},{"ruleId":"385","severity":1,"message":"386","line":4043,"column":8,"nodeType":"387","messageId":"388","endLine":4048,"endColumn":2},{"ruleId":"385","severity":1,"message":"386","line":4102,"column":8,"nodeType":"387","messageId":"388","endLine":4107,"endColumn":2},{"ruleId":"385","severity":1,"message":"386","line":4141,"column":8,"nodeType":"387","messageId":"388","endLine":4146,"endColumn":2},{"ruleId":"385","severity":1,"message":"386","line":4181,"column":8,"nodeType":"387","messageId":"388","endLine":4186,"endColumn":2},{"ruleId":"385","severity":1,"message":"386","line":4221,"column":8,"nodeType":"387","messageId":"388","endLine":4226,"endColumn":2},{"ruleId":"385","severity":1,"message":"386","line":4277,"column":8,"nodeType":"387","messageId":"388","endLine":4282,"endColumn":2},{"ruleId":"385","severity":1,"message":"386","line":4317,"column":8,"nodeType":"387","messageId":"388","endLine":4322,"endColumn":2},{"ruleId":"389","severity":1,"message":"390","line":73,"column":6,"nodeType":"391","endLine":73,"endColumn":13,"suggestions":"392"},{"ruleId":"389","severity":1,"message":"393","line":31,"column":6,"nodeType":"391","endLine":31,"endColumn":46,"suggestions":"394"},{"ruleId":"389","severity":1,"message":"395","line":31,"column":6,"nodeType":"391","endLine":31,"endColumn":12,"suggestions":"396"},{"ruleId":"380","severity":1,"message":"381","line":35,"column":30,"nodeType":"382","messageId":"383","endLine":35,"endColumn":33,"suggestions":"397"},{"ruleId":"380","severity":1,"message":"381","line":2,"column":26,"nodeType":"382","messageId":"383","endLine":2,"endColumn":29,"suggestions":"398"},{"ruleId":"380","severity":1,"message":"381","line":6,"column":18,"nodeType":"382","messageId":"383","endLine":6,"endColumn":21,"suggestions":"399"},{"ruleId":"389","severity":1,"message":"400","line":71,"column":6,"nodeType":"391","endLine":71,"endColumn":13,"suggestions":"401"},{"ruleId":"385","severity":1,"message":"386","line":298,"column":34,"nodeType":"402","messageId":"388","endLine":303,"endColumn":5},{"ruleId":"385","severity":1,"message":"386","line":320,"column":34,"nodeType":"402","messageId":"388","endLine":325,"endColumn":5},{"ruleId":"389","severity":1,"message":"403","line":84,"column":6,"nodeType":"391","endLine":84,"endColumn":13,"suggestions":"404"},{"ruleId":"389","severity":1,"message":"405","line":48,"column":6,"nodeType":"391","endLine":48,"endColumn":29,"suggestions":"406"},{"ruleId":"389","severity":1,"message":"407","line":32,"column":6,"nodeType":"391","endLine":32,"endColumn":12,"suggestions":"408"},{"ruleId":"380","severity":1,"message":"381","line":27,"column":32,"nodeType":"382","messageId":"383","endLine":27,"endColumn":35,"suggestions":"409"},{"ruleId":"389","severity":1,"message":"410","line":53,"column":6,"nodeType":"391","endLine":53,"endColumn":29,"suggestions":"411"},{"ruleId":"385","severity":1,"message":"412","line":3,"column":30,"nodeType":"413","messageId":"414","endLine":7,"endColumn":2},{"ruleId":"389","severity":1,"message":"415","line":54,"column":6,"nodeType":"391","endLine":54,"endColumn":13,"suggestions":"416"},{"ruleId":"389","severity":1,"message":"417","line":41,"column":6,"nodeType":"391","endLine":41,"endColumn":32,"suggestions":"418"},{"ruleId":"389","severity":1,"message":"419","line":37,"column":6,"nodeType":"391","endLine":37,"endColumn":12,"suggestions":"420"},"@typescript-eslint/no-explicit-any","Unexpected any. Specify a different type.","TSAnyKeyword","unexpectedAny",["421","422"],"@typescript-eslint/explicit-module-boundary-types","Missing return type on function.","FunctionDeclaration","missingReturnType","react-hooks/exhaustive-deps","React Hook React.useEffect has missing dependencies: 'data?.ads?.ads?.length', 'fetchMore', and 'searchedWineCache?.wineName'. Either include them or remove the dependency array.","ArrayExpression",["423"],"React Hook React.useEffect has a missing dependency: 'onClose'. Either include it or remove the dependency array.",["424"],"React Hook React.useEffect has a missing dependency: 'lazyQuery'. Either include it or remove the dependency array.",["425"],["426","427"],["428","429"],["430","431"],"React Hook React.useEffect has missing dependencies: 'data?.adsForUser?.ads?.length', 'fetchMore', 'hideNotActive', and 'pageCount'. Either include them or remove the dependency array.",["432"],"ArrowFunctionExpression","React Hook React.useEffect has missing dependencies: 'data?.negotiations?.negotiations?.length', 'fetchMore', and 'isShowAll'. Either include them or remove the dependency array.",["433"],"React Hook React.useEffect has a missing dependency: 'isLoading'. Either include it or remove the dependency array.",["434"],"React Hook React.useEffect has a missing dependency: 'sortedMessage?.length'. Either include it or remove the dependency array.",["435"],["436","437"],"React Hook React.useEffect has a missing dependency: 'props'. Either include it or remove the dependency array. However, 'props' will change when *any* prop changes, so the preferred fix is to destructure the 'props' object outside of the useEffect call and refer to those specific props inside React.useEffect.",["438"],"Object pattern argument should be typed.","ObjectPattern","missingArgTypeUnnamed","React Hook React.useEffect has missing dependencies: 'fetchMore' and 'reviews.length'. Either include them or remove the dependency array.",["439"],"React Hook React.useEffect has missing dependencies: 'entry', 'isOk', and 'props'. Either include them or remove the dependency array. However, 'props' will change when *any* prop changes, so the preferred fix is to destructure the 'props' object outside of the useEffect call and refer to those specific props inside React.useEffect.",["440"],"React Hook React.useEffect has missing dependencies: 'id' and 'stop'. Either include them or remove the dependency array. If 'setIsFav' needs the current value of 'id', you can also switch to useReducer instead of useState and read 'id' in the reducer.",["441"],{"messageId":"442","fix":"443","desc":"444"},{"messageId":"445","fix":"446","desc":"447"},{"desc":"448","fix":"449"},{"desc":"450","fix":"451"},{"desc":"452","fix":"453"},{"messageId":"442","fix":"454","desc":"444"},{"messageId":"445","fix":"455","desc":"447"},{"messageId":"442","fix":"456","desc":"444"},{"messageId":"445","fix":"457","desc":"447"},{"messageId":"442","fix":"458","desc":"444"},{"messageId":"445","fix":"459","desc":"447"},{"desc":"460","fix":"461"},{"desc":"462","fix":"463"},{"desc":"464","fix":"465"},{"desc":"466","fix":"467"},{"messageId":"442","fix":"468","desc":"444"},{"messageId":"445","fix":"469","desc":"447"},{"desc":"470","fix":"471"},{"desc":"472","fix":"473"},{"desc":"474","fix":"475"},{"desc":"476","fix":"477"},"suggestUnknown",{"range":"478","text":"479"},"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct.","suggestNever",{"range":"478","text":"480"},"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of.","Update the dependencies array to be: [data?.ads?.ads?.length, fetchMore, order, searchedWineCache?.wineName]",{"range":"481","text":"482"},"Update the dependencies array to be: [isVisible, data.notification.message, onClose]",{"range":"483","text":"484"},"Update the dependencies array to be: [data, lazyQuery]",{"range":"485","text":"486"},{"range":"487","text":"479"},{"range":"487","text":"480"},{"range":"488","text":"479"},{"range":"488","text":"480"},{"range":"489","text":"479"},{"range":"489","text":"480"},"Update the dependencies array to be: [data?.adsForUser?.ads?.length, fetchMore, hideNotActive, order, pageCount]",{"range":"490","text":"491"},"Update the dependencies array to be: [data?.negotiations?.negotiations?.length, fetchMore, isShowAll, order]",{"range":"492","text":"493"},"Update the dependencies array to be: [isLoading, propsMessage.messages]",{"range":"494","text":"495"},"Update the dependencies array to be: [data, sortedMessage?.length]",{"range":"496","text":"497"},{"range":"498","text":"479"},{"range":"498","text":"480"},"Update the dependencies array to be: [filterAds, props, props.list]",{"range":"499","text":"500"},"Update the dependencies array to be: [fetchMore, order, reviews.length]",{"range":"501","text":"502"},"Update the dependencies array to be: [entry, entry?.intersectionRatio, isOk, props]",{"range":"503","text":"504"},"Update the dependencies array to be: [data, id, stop]",{"range":"505","text":"506"},[586,589],"unknown","never",[2683,2690],"[data?.ads?.ads?.length, fetchMore, order, searchedWineCache?.wineName]",[896,936],"[isVisible, data.notification.message, onClose]",[847,853],"[data, lazyQuery]",[1215,1218],[53,56],[109,112],[2498,2505],"[data?.adsForUser?.ads?.length, fetchMore, hideNotActive, order, pageCount]",[2650,2657],"[data?.negotiations?.negotiations?.length, fetchMore, isShowAll, order]",[1635,1658],"[isLoading, propsMessage.messages]",[1207,1213],"[data, sortedMessage?.length]",[966,969],[2012,2035],"[filterAds, props, props.list]",[1820,1827],"[fetchMore, order, reviews.length]",[1333,1359],"[entry, entry?.intersectionRatio, isOk, props]",[1253,1259],"[data, id, stop]"]